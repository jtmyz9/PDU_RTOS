/*
 * can_routines.c
 *
 * Created: 4/21/2018 3:39:38 PM
 *  Author: Jason
 */ 

#include <asf.h>
#include "PDU/PDU.h"
#include "PDU_CAN_conf.h"

/*
* Service a State Request from Requesting ECU
*/
void state_request(uint64_t payload){
	enable_mask = ((payload)  | PDU_NON_ENGINE_MASK) & ~error_mask;
	g_recv_timeout_cnt = 0;
	set_enable(enable_mask, PDU_ON_STATE);
	//do this to ensure off request are serviced
	//TODO: someday refactor the port write code to make more sense
	set_enable(~enable_mask, PDU_OFF_STATE);
}

void ecu_eng_data(uint64_t payload){
	vehicle.RPM = LSB0W(payload) * ECU_RPM_SCALE;
}

void ecu_vehicle_data(uint64_t payload){
	vehicle.fuel_pressure	= LSB0W(payload);
	PDU.batt_volt			= ( LSB1W(payload) << 8 ) | LSB2W(payload);
}


/*
* Handler for generic interrupts from PDU_CAN
* PDU is connected directly to vehicle ECU that requests PDU updates
* Interrupt source is detected and then handled as needed
*/
void CAN_RECEIVE(void){
	//can_disable_interrupt(PDU_CAN, CAN_DISABLE_ALL_INTERRUPT_MASK);
	
	/*
	* Local status variable for use in interrupt handler
	* Used to hold/ and store result of determining source of the 
	* Triggering interrupt
	*/
	uint32_t status;
	status = can_get_status(PDU_CAN);				//get the entire status register
	
	/*
	* If this is an interrupt trigger by a Mailbox
	* ie, if it was triggered by a CAN reception
	*/
	if( status & GLOBAL_MAILBOX_MASK){
		//figure out which mailbox had interrupt
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
			status = can_mailbox_get_status(PDU_CAN, i);
			
			/*
			* If the CAN message ready bit is set in the status register for 
			* the current mailbox, and only the message ready bit
			*/
			if ((status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
				can_mailbox[i].ul_status = status;
				can_mailbox_read(PDU_CAN, &can_mailbox[i]);
				handle_CAN(&can_mailbox[i]);

				/*Reinitialize the mailbox, resets all  interrupt flags regarding this mailbox*/
				can_mailbox[i].uc_obj_type = CAN_MB_RX_MODE;
				can_mailbox_init(PDU_CAN, &can_mailbox[i]);
				g_ul_recv_status = 1;
				break;
			}
		}

	}
	
	
	/*
	* Interrupt Triggered by CAN bus off
	*/	
	else if ( status & CAN_SR_BOFF ){
		
		enable_mask = PDU_TIMEOUT_MASK;
		set_enable(enable_mask, PDU_ON_STATE);
		//do this to ensure off request are serviced
		//TODO: someday refactor the port write code to make more sense
		set_enable(~enable_mask, PDU_OFF_STATE);
		PDU.error_flag = true;
		
		
		can_init(PDU_CAN, ul_sysclk, PDU_CAN_BAUD);		
				
		/* Disable all CAN interrupts. */
		can_disable_interrupt(PDU_CAN, CAN_DISABLE_ALL_INTERRUPT_MASK);
		__disable_irq();
		can_enable_autobaud_listen_mode(PDU_CAN);
		while( ( can_get_status(PDU_CAN) & PDU_ALL_ERR_MASK ) );
		can_disable_autobaud_listen_mode(PDU_CAN);
		__enable_irq();
		
	}
}