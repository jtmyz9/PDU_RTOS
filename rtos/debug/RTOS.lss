
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000089bc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004089bc  004089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  004089c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bfac  200009d0  00409394  000209d0  2**2
                  ALLOC
  4 .stack        00003004  2000c97c  00415340  000209d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002eaf5  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005a26  00000000  00000000  0004f54c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b4f2  00000000  00000000  00054f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001180  00000000  00000000  00060464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001338  00000000  00000000  000615e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001eb78  00000000  00000000  0006291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016815  00000000  00000000  00081494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000706c7  00000000  00000000  00097ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003a2c  00000000  00000000  00108370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 f9 00 20 19 07 40 00 15 07 40 00 15 07 40 00     ... ..@...@...@.
  400010:	15 07 40 00 15 07 40 00 15 07 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 2a 40 00 15 07 40 00 00 00 00 00 51 2b 40 00     .*@...@.....Q+@.
  40003c:	b5 2b 40 00 15 07 40 00 15 07 40 00 15 07 40 00     .+@...@...@...@.
  40004c:	15 07 40 00 15 07 40 00 15 07 40 00 15 07 40 00     ..@...@...@...@.
  40005c:	15 07 40 00 15 07 40 00 75 05 40 00 89 05 40 00     ..@...@.u.@...@.
  40006c:	9d 05 40 00 b1 05 40 00 c5 05 40 00 15 07 40 00     ..@...@...@...@.
  40007c:	15 07 40 00 15 07 40 00 15 07 40 00 15 07 40 00     ..@...@...@...@.
  40008c:	15 07 40 00 15 07 40 00 15 07 40 00 15 07 40 00     ..@...@...@...@.
  40009c:	15 07 40 00 15 07 40 00 15 07 40 00 15 07 40 00     ..@...@...@...@.
  4000ac:	15 07 40 00 15 07 40 00 15 07 40 00 ed 22 40 00     ..@...@...@.."@.
  4000bc:	01 23 40 00 15 07 40 00 15 07 40 00 15 07 40 00     .#@...@...@...@.
  4000cc:	15 07 40 00 15 07 40 00 3d 11 40 00 15 07 40 00     ..@...@.=.@...@.
  4000dc:	15 07 40 00 15 07 40 00 15 07 40 00 15 07 40 00     ..@...@...@...@.
  4000ec:	15 07 40 00 15 07 40 00 15 07 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009d0 	.word	0x200009d0
  400114:	00000000 	.word	0x00000000
  400118:	004089c4 	.word	0x004089c4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004089c4 	.word	0x004089c4
  400158:	200009d4 	.word	0x200009d4
  40015c:	004089c4 	.word	0x004089c4
  400160:	00000000 	.word	0x00000000

00400164 <all_off>:
	NVIC_SystemReset();
	}
	
	
void all_off(void){
	enable_mask = 0;
  400164:	2200      	movs	r2, #0
  400166:	4b03      	ldr	r3, [pc, #12]	; (400174 <all_off+0x10>)
  400168:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_port_to_base(port);

	if (level){
		base->PIO_SODR = mask;
	} else {
		base->PIO_CODR = mask;
  40016a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <all_off+0x14>)
  400170:	635a      	str	r2, [r3, #52]	; 0x34
  400172:	4770      	bx	lr
  400174:	2000c388 	.word	0x2000c388
  400178:	400e1400 	.word	0x400e1400

0040017c <reset_line_handler>:
void reset_line_handler(uint32_t id, uint32_t mask){
  40017c:	b510      	push	{r4, lr}
	printf("RESET\r");
  40017e:	4812      	ldr	r0, [pc, #72]	; (4001c8 <reset_line_handler+0x4c>)
  400180:	4b12      	ldr	r3, [pc, #72]	; (4001cc <reset_line_handler+0x50>)
  400182:	4798      	blx	r3
	all_off();
  400184:	4b12      	ldr	r3, [pc, #72]	; (4001d0 <reset_line_handler+0x54>)
  400186:	4798      	blx	r3
		pwm_channel_disable(PDU_PWM, pwm_assignment[index]);
  400188:	2100      	movs	r1, #0
  40018a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40018e:	4c11      	ldr	r4, [pc, #68]	; (4001d4 <reset_line_handler+0x58>)
  400190:	47a0      	blx	r4
  400192:	2101      	movs	r1, #1
  400194:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400198:	47a0      	blx	r4
  40019a:	2102      	movs	r1, #2
  40019c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4001a0:	47a0      	blx	r4
  4001a2:	2103      	movs	r1, #3
  4001a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4001a8:	47a0      	blx	r4
	delay_ms( FAULT_LATCH_TIME_MS_LC * 50 );
  4001aa:	480b      	ldr	r0, [pc, #44]	; (4001d8 <reset_line_handler+0x5c>)
  4001ac:	4b0b      	ldr	r3, [pc, #44]	; (4001dc <reset_line_handler+0x60>)
  4001ae:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4001b0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  4001b4:	490a      	ldr	r1, [pc, #40]	; (4001e0 <reset_line_handler+0x64>)
  4001b6:	68ca      	ldr	r2, [r1, #12]
  4001b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4001bc:	4b09      	ldr	r3, [pc, #36]	; (4001e4 <reset_line_handler+0x68>)
  4001be:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
  4001c0:	60cb      	str	r3, [r1, #12]
  4001c2:	f3bf 8f4f 	dsb	sy
  4001c6:	e7fe      	b.n	4001c6 <reset_line_handler+0x4a>
  4001c8:	004084c4 	.word	0x004084c4
  4001cc:	004054ed 	.word	0x004054ed
  4001d0:	00400165 	.word	0x00400165
  4001d4:	00402837 	.word	0x00402837
  4001d8:	025773d3 	.word	0x025773d3
  4001dc:	20000001 	.word	0x20000001
  4001e0:	e000ed00 	.word	0xe000ed00
  4001e4:	05fa0004 	.word	0x05fa0004

004001e8 <set_enable>:
	if (level){
  4001e8:	b911      	cbnz	r1, 4001f0 <set_enable+0x8>
		base->PIO_CODR = mask;
  4001ea:	4b03      	ldr	r3, [pc, #12]	; (4001f8 <set_enable+0x10>)
  4001ec:	6358      	str	r0, [r3, #52]	; 0x34
  4001ee:	4770      	bx	lr
		base->PIO_SODR = mask;
  4001f0:	4b01      	ldr	r3, [pc, #4]	; (4001f8 <set_enable+0x10>)
  4001f2:	6318      	str	r0, [r3, #48]	; 0x30
  4001f4:	4770      	bx	lr
  4001f6:	bf00      	nop
  4001f8:	400e1400 	.word	0x400e1400

004001fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001fc:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001fe:	480e      	ldr	r0, [pc, #56]	; (400238 <sysclk_init+0x3c>)
  400200:	4b0e      	ldr	r3, [pc, #56]	; (40023c <sysclk_init+0x40>)
  400202:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	2000      	movs	r0, #0
  400208:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x44>)
  40020a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40020c:	4c0d      	ldr	r4, [pc, #52]	; (400244 <sysclk_init+0x48>)
  40020e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400210:	2800      	cmp	r0, #0
  400212:	d0fc      	beq.n	40020e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400214:	4b0c      	ldr	r3, [pc, #48]	; (400248 <sysclk_init+0x4c>)
  400216:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400218:	4a0c      	ldr	r2, [pc, #48]	; (40024c <sysclk_init+0x50>)
  40021a:	4b0d      	ldr	r3, [pc, #52]	; (400250 <sysclk_init+0x54>)
  40021c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40021e:	4c0d      	ldr	r4, [pc, #52]	; (400254 <sysclk_init+0x58>)
  400220:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400222:	2800      	cmp	r0, #0
  400224:	d0fc      	beq.n	400220 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400226:	2000      	movs	r0, #0
  400228:	4b0b      	ldr	r3, [pc, #44]	; (400258 <sysclk_init+0x5c>)
  40022a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40022c:	4b0b      	ldr	r3, [pc, #44]	; (40025c <sysclk_init+0x60>)
  40022e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400230:	480b      	ldr	r0, [pc, #44]	; (400260 <sysclk_init+0x64>)
  400232:	4b02      	ldr	r3, [pc, #8]	; (40023c <sysclk_init+0x40>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	07270e00 	.word	0x07270e00
  40023c:	004008ed 	.word	0x004008ed
  400240:	0040063d 	.word	0x0040063d
  400244:	00400691 	.word	0x00400691
  400248:	004006a1 	.word	0x004006a1
  40024c:	20153f04 	.word	0x20153f04
  400250:	400e0400 	.word	0x400e0400
  400254:	004006b1 	.word	0x004006b1
  400258:	004005d9 	.word	0x004005d9
  40025c:	004007e1 	.word	0x004007e1
  400260:	068e7780 	.word	0x068e7780

00400264 <board_init>:




void board_init(void)
{
  400264:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400266:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40026a:	4b6d      	ldr	r3, [pc, #436]	; (400420 <board_init+0x1bc>)
  40026c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40026e:	2009      	movs	r0, #9
  400270:	4c6c      	ldr	r4, [pc, #432]	; (400424 <board_init+0x1c0>)
  400272:	47a0      	blx	r4
  400274:	200a      	movs	r0, #10
  400276:	47a0      	blx	r4
  400278:	200b      	movs	r0, #11
  40027a:	47a0      	blx	r4
  40027c:	200c      	movs	r0, #12
  40027e:	47a0      	blx	r4
  400280:	200d      	movs	r0, #13
  400282:	47a0      	blx	r4
		base->PIO_PUDR = mask;
  400284:	4b68      	ldr	r3, [pc, #416]	; (400428 <board_init+0x1c4>)
  400286:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40028a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40028c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400290:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400292:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400298:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40029a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40029e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002a0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002a2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4002a6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002a8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4002aa:	4a60      	ldr	r2, [pc, #384]	; (40042c <board_init+0x1c8>)
  4002ac:	2108      	movs	r1, #8
  4002ae:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002b0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002b4:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002b6:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002b8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002bc:	6f10      	ldr	r0, [r2, #112]	; 0x70
  4002be:	f020 0008 	bic.w	r0, r0, #8
  4002c2:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002c4:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4002c6:	f020 0008 	bic.w	r0, r0, #8
  4002ca:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002cc:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  4002ce:	2104      	movs	r1, #4
  4002d0:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002d2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002d6:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002d8:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002da:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002de:	6f10      	ldr	r0, [r2, #112]	; 0x70
  4002e0:	f020 0004 	bic.w	r0, r0, #4
  4002e4:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002e6:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4002e8:	f020 0004 	bic.w	r0, r0, #4
  4002ec:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002ee:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  4002f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4002f4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002fa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002fc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400302:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400304:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400308:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40030a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40030c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400310:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400312:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400318:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40031a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40031e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400320:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400326:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400328:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40032c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40032e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400330:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400334:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400336:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40033c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40033e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400342:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400344:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40034a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40034c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400350:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400352:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400354:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400358:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40035a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40035c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400360:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400366:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400368:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40036a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400370:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400374:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400376:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400378:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40037c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400380:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400384:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400388:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40038a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40038e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400390:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400396:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400398:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40039c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40039e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003a0:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4003a4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003a6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4003a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003ac:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003b2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003b4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ca:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4003cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003e0:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  4003e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e8:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  4003ec:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ee:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4003f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003f4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003fa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400402:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400404:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  400408:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40040a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  400410:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400412:	605a      	str	r2, [r3, #4]
#ifdef CONF_PDU_PWM
	ioport_set_pin_peripheral_mode(PIN_PWM_0_GPIO, PIN_PWM_LED0_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_PWM_1_GPIO, PIN_PWM_LED1_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_PWM_2_GPIO, PIN_PWM_LED2_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_PWM_3_GPIO, PIN_PWM_LED3_FLAGS);
	pmc_enable_periph_clk(ID_PWM);
  400414:	2024      	movs	r0, #36	; 0x24
  400416:	47a0      	blx	r4
#endif

/* Enable CAN0 & CAN1 clock. */

#ifdef CONF_BOARD_CAN0
	pmc_enable_periph_clk(ID_CAN0);
  400418:	2025      	movs	r0, #37	; 0x25
  40041a:	47a0      	blx	r4
  40041c:	bd10      	pop	{r4, pc}
  40041e:	bf00      	nop
  400420:	400e1850 	.word	0x400e1850
  400424:	004006c1 	.word	0x004006c1
  400428:	400e0e00 	.word	0x400e0e00
  40042c:	400e1000 	.word	0x400e1000

00400430 <pio_set_input>:
  400430:	6441      	str	r1, [r0, #68]	; 0x44
  400432:	f012 0f01 	tst.w	r2, #1
  400436:	bf14      	ite	ne
  400438:	6641      	strne	r1, [r0, #100]	; 0x64
  40043a:	6601      	streq	r1, [r0, #96]	; 0x60
  40043c:	f012 0f0a 	tst.w	r2, #10
  400440:	bf14      	ite	ne
  400442:	6201      	strne	r1, [r0, #32]
  400444:	6241      	streq	r1, [r0, #36]	; 0x24
  400446:	f012 0f02 	tst.w	r2, #2
  40044a:	d107      	bne.n	40045c <pio_set_input+0x2c>
  40044c:	f012 0f08 	tst.w	r2, #8
  400450:	bf18      	it	ne
  400452:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
  400456:	6141      	str	r1, [r0, #20]
  400458:	6001      	str	r1, [r0, #0]
  40045a:	4770      	bx	lr
  40045c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400460:	e7f9      	b.n	400456 <pio_set_input+0x26>

00400462 <pio_configure_interrupt>:
  400462:	f012 0f10 	tst.w	r2, #16
  400466:	d010      	beq.n	40048a <pio_configure_interrupt+0x28>
  400468:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
  40046c:	f012 0f20 	tst.w	r2, #32
  400470:	bf14      	ite	ne
  400472:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
  400476:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
  40047a:	f012 0f40 	tst.w	r2, #64	; 0x40
  40047e:	bf14      	ite	ne
  400480:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
  400484:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400488:	4770      	bx	lr
  40048a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40048e:	4770      	bx	lr

00400490 <pio_enable_interrupt>:
  400490:	6401      	str	r1, [r0, #64]	; 0x40
  400492:	4770      	bx	lr

00400494 <pio_get_interrupt_status>:
  400494:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  400496:	4770      	bx	lr

00400498 <pio_get_interrupt_mask>:
  400498:	6c80      	ldr	r0, [r0, #72]	; 0x48
  40049a:	4770      	bx	lr

0040049c <pio_handler_process>:
  40049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004a0:	4681      	mov	r9, r0
  4004a2:	460f      	mov	r7, r1
  4004a4:	4b12      	ldr	r3, [pc, #72]	; (4004f0 <pio_handler_process+0x54>)
  4004a6:	4798      	blx	r3
  4004a8:	4605      	mov	r5, r0
  4004aa:	4648      	mov	r0, r9
  4004ac:	4b11      	ldr	r3, [pc, #68]	; (4004f4 <pio_handler_process+0x58>)
  4004ae:	4798      	blx	r3
  4004b0:	4005      	ands	r5, r0
  4004b2:	d013      	beq.n	4004dc <pio_handler_process+0x40>
  4004b4:	4c10      	ldr	r4, [pc, #64]	; (4004f8 <pio_handler_process+0x5c>)
  4004b6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4004ba:	e003      	b.n	4004c4 <pio_handler_process+0x28>
  4004bc:	42b4      	cmp	r4, r6
  4004be:	d00d      	beq.n	4004dc <pio_handler_process+0x40>
  4004c0:	3410      	adds	r4, #16
  4004c2:	b15d      	cbz	r5, 4004dc <pio_handler_process+0x40>
  4004c4:	6820      	ldr	r0, [r4, #0]
  4004c6:	42b8      	cmp	r0, r7
  4004c8:	d1f8      	bne.n	4004bc <pio_handler_process+0x20>
  4004ca:	6861      	ldr	r1, [r4, #4]
  4004cc:	4229      	tst	r1, r5
  4004ce:	d0f5      	beq.n	4004bc <pio_handler_process+0x20>
  4004d0:	68e3      	ldr	r3, [r4, #12]
  4004d2:	4798      	blx	r3
  4004d4:	6863      	ldr	r3, [r4, #4]
  4004d6:	ea25 0503 	bic.w	r5, r5, r3
  4004da:	e7ef      	b.n	4004bc <pio_handler_process+0x20>
  4004dc:	4b07      	ldr	r3, [pc, #28]	; (4004fc <pio_handler_process+0x60>)
  4004de:	681b      	ldr	r3, [r3, #0]
  4004e0:	b123      	cbz	r3, 4004ec <pio_handler_process+0x50>
  4004e2:	4b07      	ldr	r3, [pc, #28]	; (400500 <pio_handler_process+0x64>)
  4004e4:	681b      	ldr	r3, [r3, #0]
  4004e6:	b10b      	cbz	r3, 4004ec <pio_handler_process+0x50>
  4004e8:	4648      	mov	r0, r9
  4004ea:	4798      	blx	r3
  4004ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4004f0:	00400495 	.word	0x00400495
  4004f4:	00400499 	.word	0x00400499
  4004f8:	200009ec 	.word	0x200009ec
  4004fc:	2000c518 	.word	0x2000c518
  400500:	20000a60 	.word	0x20000a60

00400504 <pio_handler_set>:
  400504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400506:	4c18      	ldr	r4, [pc, #96]	; (400568 <pio_handler_set+0x64>)
  400508:	6826      	ldr	r6, [r4, #0]
  40050a:	2e06      	cmp	r6, #6
  40050c:	d829      	bhi.n	400562 <pio_handler_set+0x5e>
  40050e:	f04f 0c00 	mov.w	ip, #0
  400512:	4664      	mov	r4, ip
  400514:	4f15      	ldr	r7, [pc, #84]	; (40056c <pio_handler_set+0x68>)
  400516:	e004      	b.n	400522 <pio_handler_set+0x1e>
  400518:	3401      	adds	r4, #1
  40051a:	b2e4      	uxtb	r4, r4
  40051c:	46a4      	mov	ip, r4
  40051e:	42a6      	cmp	r6, r4
  400520:	d309      	bcc.n	400536 <pio_handler_set+0x32>
  400522:	46a6      	mov	lr, r4
  400524:	0125      	lsls	r5, r4, #4
  400526:	597d      	ldr	r5, [r7, r5]
  400528:	428d      	cmp	r5, r1
  40052a:	d1f5      	bne.n	400518 <pio_handler_set+0x14>
  40052c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400530:	686d      	ldr	r5, [r5, #4]
  400532:	4295      	cmp	r5, r2
  400534:	d1f0      	bne.n	400518 <pio_handler_set+0x14>
  400536:	4d0d      	ldr	r5, [pc, #52]	; (40056c <pio_handler_set+0x68>)
  400538:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40053c:	eb05 040e 	add.w	r4, r5, lr
  400540:	f845 100e 	str.w	r1, [r5, lr]
  400544:	6062      	str	r2, [r4, #4]
  400546:	60a3      	str	r3, [r4, #8]
  400548:	9906      	ldr	r1, [sp, #24]
  40054a:	60e1      	str	r1, [r4, #12]
  40054c:	3601      	adds	r6, #1
  40054e:	4566      	cmp	r6, ip
  400550:	bf04      	itt	eq
  400552:	4905      	ldreq	r1, [pc, #20]	; (400568 <pio_handler_set+0x64>)
  400554:	600e      	streq	r6, [r1, #0]
  400556:	4611      	mov	r1, r2
  400558:	461a      	mov	r2, r3
  40055a:	4b05      	ldr	r3, [pc, #20]	; (400570 <pio_handler_set+0x6c>)
  40055c:	4798      	blx	r3
  40055e:	2000      	movs	r0, #0
  400560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400562:	2001      	movs	r0, #1
  400564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400566:	bf00      	nop
  400568:	20000a5c 	.word	0x20000a5c
  40056c:	200009ec 	.word	0x200009ec
  400570:	00400463 	.word	0x00400463

00400574 <PIOA_Handler>:
  400574:	b508      	push	{r3, lr}
  400576:	2109      	movs	r1, #9
  400578:	4801      	ldr	r0, [pc, #4]	; (400580 <PIOA_Handler+0xc>)
  40057a:	4b02      	ldr	r3, [pc, #8]	; (400584 <PIOA_Handler+0x10>)
  40057c:	4798      	blx	r3
  40057e:	bd08      	pop	{r3, pc}
  400580:	400e0e00 	.word	0x400e0e00
  400584:	0040049d 	.word	0x0040049d

00400588 <PIOB_Handler>:
  400588:	b508      	push	{r3, lr}
  40058a:	210a      	movs	r1, #10
  40058c:	4801      	ldr	r0, [pc, #4]	; (400594 <PIOB_Handler+0xc>)
  40058e:	4b02      	ldr	r3, [pc, #8]	; (400598 <PIOB_Handler+0x10>)
  400590:	4798      	blx	r3
  400592:	bd08      	pop	{r3, pc}
  400594:	400e1000 	.word	0x400e1000
  400598:	0040049d 	.word	0x0040049d

0040059c <PIOC_Handler>:
  40059c:	b508      	push	{r3, lr}
  40059e:	210b      	movs	r1, #11
  4005a0:	4801      	ldr	r0, [pc, #4]	; (4005a8 <PIOC_Handler+0xc>)
  4005a2:	4b02      	ldr	r3, [pc, #8]	; (4005ac <PIOC_Handler+0x10>)
  4005a4:	4798      	blx	r3
  4005a6:	bd08      	pop	{r3, pc}
  4005a8:	400e1200 	.word	0x400e1200
  4005ac:	0040049d 	.word	0x0040049d

004005b0 <PIOD_Handler>:
  4005b0:	b508      	push	{r3, lr}
  4005b2:	210c      	movs	r1, #12
  4005b4:	4801      	ldr	r0, [pc, #4]	; (4005bc <PIOD_Handler+0xc>)
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <PIOD_Handler+0x10>)
  4005b8:	4798      	blx	r3
  4005ba:	bd08      	pop	{r3, pc}
  4005bc:	400e1400 	.word	0x400e1400
  4005c0:	0040049d 	.word	0x0040049d

004005c4 <PIOE_Handler>:
  4005c4:	b508      	push	{r3, lr}
  4005c6:	210d      	movs	r1, #13
  4005c8:	4801      	ldr	r0, [pc, #4]	; (4005d0 <PIOE_Handler+0xc>)
  4005ca:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOE_Handler+0x10>)
  4005cc:	4798      	blx	r3
  4005ce:	bd08      	pop	{r3, pc}
  4005d0:	400e1600 	.word	0x400e1600
  4005d4:	0040049d 	.word	0x0040049d

004005d8 <pmc_switch_mck_to_pllack>:
  4005d8:	4a17      	ldr	r2, [pc, #92]	; (400638 <pmc_switch_mck_to_pllack+0x60>)
  4005da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005e0:	4318      	orrs	r0, r3
  4005e2:	6310      	str	r0, [r2, #48]	; 0x30
  4005e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005e6:	f013 0f08 	tst.w	r3, #8
  4005ea:	d10a      	bne.n	400602 <pmc_switch_mck_to_pllack+0x2a>
  4005ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005f0:	4911      	ldr	r1, [pc, #68]	; (400638 <pmc_switch_mck_to_pllack+0x60>)
  4005f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005f4:	f012 0f08 	tst.w	r2, #8
  4005f8:	d103      	bne.n	400602 <pmc_switch_mck_to_pllack+0x2a>
  4005fa:	3b01      	subs	r3, #1
  4005fc:	d1f9      	bne.n	4005f2 <pmc_switch_mck_to_pllack+0x1a>
  4005fe:	2001      	movs	r0, #1
  400600:	4770      	bx	lr
  400602:	4a0d      	ldr	r2, [pc, #52]	; (400638 <pmc_switch_mck_to_pllack+0x60>)
  400604:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400606:	f023 0303 	bic.w	r3, r3, #3
  40060a:	f043 0302 	orr.w	r3, r3, #2
  40060e:	6313      	str	r3, [r2, #48]	; 0x30
  400610:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400612:	f013 0f08 	tst.w	r3, #8
  400616:	d10a      	bne.n	40062e <pmc_switch_mck_to_pllack+0x56>
  400618:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40061c:	4906      	ldr	r1, [pc, #24]	; (400638 <pmc_switch_mck_to_pllack+0x60>)
  40061e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400620:	f012 0f08 	tst.w	r2, #8
  400624:	d105      	bne.n	400632 <pmc_switch_mck_to_pllack+0x5a>
  400626:	3b01      	subs	r3, #1
  400628:	d1f9      	bne.n	40061e <pmc_switch_mck_to_pllack+0x46>
  40062a:	2001      	movs	r0, #1
  40062c:	4770      	bx	lr
  40062e:	2000      	movs	r0, #0
  400630:	4770      	bx	lr
  400632:	2000      	movs	r0, #0
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	400e0400 	.word	0x400e0400

0040063c <pmc_switch_mainck_to_xtal>:
  40063c:	b9c8      	cbnz	r0, 400672 <pmc_switch_mainck_to_xtal+0x36>
  40063e:	4a11      	ldr	r2, [pc, #68]	; (400684 <pmc_switch_mainck_to_xtal+0x48>)
  400640:	6a13      	ldr	r3, [r2, #32]
  400642:	0209      	lsls	r1, r1, #8
  400644:	b289      	uxth	r1, r1
  400646:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40064a:	f023 0303 	bic.w	r3, r3, #3
  40064e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400652:	f043 0301 	orr.w	r3, r3, #1
  400656:	430b      	orrs	r3, r1
  400658:	6213      	str	r3, [r2, #32]
  40065a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40065c:	f013 0f01 	tst.w	r3, #1
  400660:	d0fb      	beq.n	40065a <pmc_switch_mainck_to_xtal+0x1e>
  400662:	4a08      	ldr	r2, [pc, #32]	; (400684 <pmc_switch_mainck_to_xtal+0x48>)
  400664:	6a13      	ldr	r3, [r2, #32]
  400666:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40066a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40066e:	6213      	str	r3, [r2, #32]
  400670:	4770      	bx	lr
  400672:	4904      	ldr	r1, [pc, #16]	; (400684 <pmc_switch_mainck_to_xtal+0x48>)
  400674:	6a0b      	ldr	r3, [r1, #32]
  400676:	4a04      	ldr	r2, [pc, #16]	; (400688 <pmc_switch_mainck_to_xtal+0x4c>)
  400678:	401a      	ands	r2, r3
  40067a:	4b04      	ldr	r3, [pc, #16]	; (40068c <pmc_switch_mainck_to_xtal+0x50>)
  40067c:	4313      	orrs	r3, r2
  40067e:	620b      	str	r3, [r1, #32]
  400680:	4770      	bx	lr
  400682:	bf00      	nop
  400684:	400e0400 	.word	0x400e0400
  400688:	fec8fffc 	.word	0xfec8fffc
  40068c:	01370002 	.word	0x01370002

00400690 <pmc_osc_is_ready_mainck>:
  400690:	4b02      	ldr	r3, [pc, #8]	; (40069c <pmc_osc_is_ready_mainck+0xc>)
  400692:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400694:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400698:	4770      	bx	lr
  40069a:	bf00      	nop
  40069c:	400e0400 	.word	0x400e0400

004006a0 <pmc_disable_pllack>:
  4006a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006a4:	4b01      	ldr	r3, [pc, #4]	; (4006ac <pmc_disable_pllack+0xc>)
  4006a6:	629a      	str	r2, [r3, #40]	; 0x28
  4006a8:	4770      	bx	lr
  4006aa:	bf00      	nop
  4006ac:	400e0400 	.word	0x400e0400

004006b0 <pmc_is_locked_pllack>:
  4006b0:	4b02      	ldr	r3, [pc, #8]	; (4006bc <pmc_is_locked_pllack+0xc>)
  4006b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4006b4:	f000 0002 	and.w	r0, r0, #2
  4006b8:	4770      	bx	lr
  4006ba:	bf00      	nop
  4006bc:	400e0400 	.word	0x400e0400

004006c0 <pmc_enable_periph_clk>:
  4006c0:	282f      	cmp	r0, #47	; 0x2f
  4006c2:	d81e      	bhi.n	400702 <pmc_enable_periph_clk+0x42>
  4006c4:	281f      	cmp	r0, #31
  4006c6:	d80c      	bhi.n	4006e2 <pmc_enable_periph_clk+0x22>
  4006c8:	4b11      	ldr	r3, [pc, #68]	; (400710 <pmc_enable_periph_clk+0x50>)
  4006ca:	699a      	ldr	r2, [r3, #24]
  4006cc:	2301      	movs	r3, #1
  4006ce:	4083      	lsls	r3, r0
  4006d0:	4393      	bics	r3, r2
  4006d2:	d018      	beq.n	400706 <pmc_enable_periph_clk+0x46>
  4006d4:	2301      	movs	r3, #1
  4006d6:	fa03 f000 	lsl.w	r0, r3, r0
  4006da:	4b0d      	ldr	r3, [pc, #52]	; (400710 <pmc_enable_periph_clk+0x50>)
  4006dc:	6118      	str	r0, [r3, #16]
  4006de:	2000      	movs	r0, #0
  4006e0:	4770      	bx	lr
  4006e2:	3820      	subs	r0, #32
  4006e4:	4b0a      	ldr	r3, [pc, #40]	; (400710 <pmc_enable_periph_clk+0x50>)
  4006e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4006ea:	2301      	movs	r3, #1
  4006ec:	4083      	lsls	r3, r0
  4006ee:	4393      	bics	r3, r2
  4006f0:	d00b      	beq.n	40070a <pmc_enable_periph_clk+0x4a>
  4006f2:	2301      	movs	r3, #1
  4006f4:	fa03 f000 	lsl.w	r0, r3, r0
  4006f8:	4b05      	ldr	r3, [pc, #20]	; (400710 <pmc_enable_periph_clk+0x50>)
  4006fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  4006fe:	2000      	movs	r0, #0
  400700:	4770      	bx	lr
  400702:	2001      	movs	r0, #1
  400704:	4770      	bx	lr
  400706:	2000      	movs	r0, #0
  400708:	4770      	bx	lr
  40070a:	2000      	movs	r0, #0
  40070c:	4770      	bx	lr
  40070e:	bf00      	nop
  400710:	400e0400 	.word	0x400e0400

00400714 <Dummy_Handler>:
  400714:	e7fe      	b.n	400714 <Dummy_Handler>
	...

00400718 <Reset_Handler>:
  400718:	b500      	push	{lr}
  40071a:	b083      	sub	sp, #12
  40071c:	4b25      	ldr	r3, [pc, #148]	; (4007b4 <Reset_Handler+0x9c>)
  40071e:	4a26      	ldr	r2, [pc, #152]	; (4007b8 <Reset_Handler+0xa0>)
  400720:	429a      	cmp	r2, r3
  400722:	d010      	beq.n	400746 <Reset_Handler+0x2e>
  400724:	4b25      	ldr	r3, [pc, #148]	; (4007bc <Reset_Handler+0xa4>)
  400726:	4a23      	ldr	r2, [pc, #140]	; (4007b4 <Reset_Handler+0x9c>)
  400728:	429a      	cmp	r2, r3
  40072a:	d20c      	bcs.n	400746 <Reset_Handler+0x2e>
  40072c:	3b01      	subs	r3, #1
  40072e:	1a9b      	subs	r3, r3, r2
  400730:	f023 0303 	bic.w	r3, r3, #3
  400734:	3304      	adds	r3, #4
  400736:	4413      	add	r3, r2
  400738:	491f      	ldr	r1, [pc, #124]	; (4007b8 <Reset_Handler+0xa0>)
  40073a:	f851 0b04 	ldr.w	r0, [r1], #4
  40073e:	f842 0b04 	str.w	r0, [r2], #4
  400742:	429a      	cmp	r2, r3
  400744:	d1f9      	bne.n	40073a <Reset_Handler+0x22>
  400746:	4b1e      	ldr	r3, [pc, #120]	; (4007c0 <Reset_Handler+0xa8>)
  400748:	4a1e      	ldr	r2, [pc, #120]	; (4007c4 <Reset_Handler+0xac>)
  40074a:	429a      	cmp	r2, r3
  40074c:	d20a      	bcs.n	400764 <Reset_Handler+0x4c>
  40074e:	3b01      	subs	r3, #1
  400750:	1a9b      	subs	r3, r3, r2
  400752:	f023 0303 	bic.w	r3, r3, #3
  400756:	3304      	adds	r3, #4
  400758:	4413      	add	r3, r2
  40075a:	2100      	movs	r1, #0
  40075c:	f842 1b04 	str.w	r1, [r2], #4
  400760:	4293      	cmp	r3, r2
  400762:	d1fb      	bne.n	40075c <Reset_Handler+0x44>
  400764:	4a18      	ldr	r2, [pc, #96]	; (4007c8 <Reset_Handler+0xb0>)
  400766:	4b19      	ldr	r3, [pc, #100]	; (4007cc <Reset_Handler+0xb4>)
  400768:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40076c:	6093      	str	r3, [r2, #8]
  40076e:	f3ef 8310 	mrs	r3, PRIMASK
  400772:	fab3 f383 	clz	r3, r3
  400776:	095b      	lsrs	r3, r3, #5
  400778:	9301      	str	r3, [sp, #4]
  40077a:	b672      	cpsid	i
  40077c:	f3bf 8f5f 	dmb	sy
  400780:	2200      	movs	r2, #0
  400782:	4b13      	ldr	r3, [pc, #76]	; (4007d0 <Reset_Handler+0xb8>)
  400784:	701a      	strb	r2, [r3, #0]
  400786:	9901      	ldr	r1, [sp, #4]
  400788:	4a12      	ldr	r2, [pc, #72]	; (4007d4 <Reset_Handler+0xbc>)
  40078a:	6813      	ldr	r3, [r2, #0]
  40078c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400790:	6013      	str	r3, [r2, #0]
  400792:	f3bf 8f4f 	dsb	sy
  400796:	f3bf 8f6f 	isb	sy
  40079a:	b129      	cbz	r1, 4007a8 <Reset_Handler+0x90>
  40079c:	2201      	movs	r2, #1
  40079e:	4b0c      	ldr	r3, [pc, #48]	; (4007d0 <Reset_Handler+0xb8>)
  4007a0:	701a      	strb	r2, [r3, #0]
  4007a2:	f3bf 8f5f 	dmb	sy
  4007a6:	b662      	cpsie	i
  4007a8:	4b0b      	ldr	r3, [pc, #44]	; (4007d8 <Reset_Handler+0xc0>)
  4007aa:	4798      	blx	r3
  4007ac:	4b0b      	ldr	r3, [pc, #44]	; (4007dc <Reset_Handler+0xc4>)
  4007ae:	4798      	blx	r3
  4007b0:	e7fe      	b.n	4007b0 <Reset_Handler+0x98>
  4007b2:	bf00      	nop
  4007b4:	20000000 	.word	0x20000000
  4007b8:	004089c4 	.word	0x004089c4
  4007bc:	200009d0 	.word	0x200009d0
  4007c0:	2000c97c 	.word	0x2000c97c
  4007c4:	200009d0 	.word	0x200009d0
  4007c8:	e000ed00 	.word	0xe000ed00
  4007cc:	00400000 	.word	0x00400000
  4007d0:	2000000a 	.word	0x2000000a
  4007d4:	e000ed88 	.word	0xe000ed88
  4007d8:	0040549d 	.word	0x0040549d
  4007dc:	00404145 	.word	0x00404145

004007e0 <SystemCoreClockUpdate>:
  4007e0:	4b3b      	ldr	r3, [pc, #236]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  4007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007e4:	f003 0303 	and.w	r3, r3, #3
  4007e8:	2b01      	cmp	r3, #1
  4007ea:	d01d      	beq.n	400828 <SystemCoreClockUpdate+0x48>
  4007ec:	b183      	cbz	r3, 400810 <SystemCoreClockUpdate+0x30>
  4007ee:	2b02      	cmp	r3, #2
  4007f0:	d036      	beq.n	400860 <SystemCoreClockUpdate+0x80>
  4007f2:	4b37      	ldr	r3, [pc, #220]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  4007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007fa:	2b70      	cmp	r3, #112	; 0x70
  4007fc:	d05f      	beq.n	4008be <SystemCoreClockUpdate+0xde>
  4007fe:	4b34      	ldr	r3, [pc, #208]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  400800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400802:	4934      	ldr	r1, [pc, #208]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  400804:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400808:	680b      	ldr	r3, [r1, #0]
  40080a:	40d3      	lsrs	r3, r2
  40080c:	600b      	str	r3, [r1, #0]
  40080e:	4770      	bx	lr
  400810:	4b31      	ldr	r3, [pc, #196]	; (4008d8 <SystemCoreClockUpdate+0xf8>)
  400812:	695b      	ldr	r3, [r3, #20]
  400814:	f013 0f80 	tst.w	r3, #128	; 0x80
  400818:	bf14      	ite	ne
  40081a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  40081e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400822:	4b2c      	ldr	r3, [pc, #176]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  400824:	601a      	str	r2, [r3, #0]
  400826:	e7e4      	b.n	4007f2 <SystemCoreClockUpdate+0x12>
  400828:	4b29      	ldr	r3, [pc, #164]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  40082a:	6a1b      	ldr	r3, [r3, #32]
  40082c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400830:	d003      	beq.n	40083a <SystemCoreClockUpdate+0x5a>
  400832:	4a2a      	ldr	r2, [pc, #168]	; (4008dc <SystemCoreClockUpdate+0xfc>)
  400834:	4b27      	ldr	r3, [pc, #156]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  400836:	601a      	str	r2, [r3, #0]
  400838:	e7db      	b.n	4007f2 <SystemCoreClockUpdate+0x12>
  40083a:	4a29      	ldr	r2, [pc, #164]	; (4008e0 <SystemCoreClockUpdate+0x100>)
  40083c:	4b25      	ldr	r3, [pc, #148]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  40083e:	601a      	str	r2, [r3, #0]
  400840:	4b23      	ldr	r3, [pc, #140]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  400842:	6a1b      	ldr	r3, [r3, #32]
  400844:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400848:	2b10      	cmp	r3, #16
  40084a:	d005      	beq.n	400858 <SystemCoreClockUpdate+0x78>
  40084c:	2b20      	cmp	r3, #32
  40084e:	d1d0      	bne.n	4007f2 <SystemCoreClockUpdate+0x12>
  400850:	4a22      	ldr	r2, [pc, #136]	; (4008dc <SystemCoreClockUpdate+0xfc>)
  400852:	4b20      	ldr	r3, [pc, #128]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  400854:	601a      	str	r2, [r3, #0]
  400856:	e7cc      	b.n	4007f2 <SystemCoreClockUpdate+0x12>
  400858:	4a22      	ldr	r2, [pc, #136]	; (4008e4 <SystemCoreClockUpdate+0x104>)
  40085a:	4b1e      	ldr	r3, [pc, #120]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  40085c:	601a      	str	r2, [r3, #0]
  40085e:	e7c8      	b.n	4007f2 <SystemCoreClockUpdate+0x12>
  400860:	4b1b      	ldr	r3, [pc, #108]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  400862:	6a1b      	ldr	r3, [r3, #32]
  400864:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400868:	d016      	beq.n	400898 <SystemCoreClockUpdate+0xb8>
  40086a:	4a1c      	ldr	r2, [pc, #112]	; (4008dc <SystemCoreClockUpdate+0xfc>)
  40086c:	4b19      	ldr	r3, [pc, #100]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  40086e:	601a      	str	r2, [r3, #0]
  400870:	4b17      	ldr	r3, [pc, #92]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  400872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400874:	f003 0303 	and.w	r3, r3, #3
  400878:	2b02      	cmp	r3, #2
  40087a:	d1ba      	bne.n	4007f2 <SystemCoreClockUpdate+0x12>
  40087c:	4a14      	ldr	r2, [pc, #80]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  40087e:	6a91      	ldr	r1, [r2, #40]	; 0x28
  400880:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400882:	4814      	ldr	r0, [pc, #80]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  400884:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400888:	6803      	ldr	r3, [r0, #0]
  40088a:	fb01 3303 	mla	r3, r1, r3, r3
  40088e:	b2d2      	uxtb	r2, r2
  400890:	fbb3 f3f2 	udiv	r3, r3, r2
  400894:	6003      	str	r3, [r0, #0]
  400896:	e7ac      	b.n	4007f2 <SystemCoreClockUpdate+0x12>
  400898:	4a11      	ldr	r2, [pc, #68]	; (4008e0 <SystemCoreClockUpdate+0x100>)
  40089a:	4b0e      	ldr	r3, [pc, #56]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  40089c:	601a      	str	r2, [r3, #0]
  40089e:	4b0c      	ldr	r3, [pc, #48]	; (4008d0 <SystemCoreClockUpdate+0xf0>)
  4008a0:	6a1b      	ldr	r3, [r3, #32]
  4008a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008a6:	2b10      	cmp	r3, #16
  4008a8:	d005      	beq.n	4008b6 <SystemCoreClockUpdate+0xd6>
  4008aa:	2b20      	cmp	r3, #32
  4008ac:	d1e0      	bne.n	400870 <SystemCoreClockUpdate+0x90>
  4008ae:	4a0b      	ldr	r2, [pc, #44]	; (4008dc <SystemCoreClockUpdate+0xfc>)
  4008b0:	4b08      	ldr	r3, [pc, #32]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  4008b2:	601a      	str	r2, [r3, #0]
  4008b4:	e7dc      	b.n	400870 <SystemCoreClockUpdate+0x90>
  4008b6:	4a0b      	ldr	r2, [pc, #44]	; (4008e4 <SystemCoreClockUpdate+0x104>)
  4008b8:	4b06      	ldr	r3, [pc, #24]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  4008ba:	601a      	str	r2, [r3, #0]
  4008bc:	e7d8      	b.n	400870 <SystemCoreClockUpdate+0x90>
  4008be:	4a05      	ldr	r2, [pc, #20]	; (4008d4 <SystemCoreClockUpdate+0xf4>)
  4008c0:	6813      	ldr	r3, [r2, #0]
  4008c2:	4909      	ldr	r1, [pc, #36]	; (4008e8 <SystemCoreClockUpdate+0x108>)
  4008c4:	fba1 1303 	umull	r1, r3, r1, r3
  4008c8:	085b      	lsrs	r3, r3, #1
  4008ca:	6013      	str	r3, [r2, #0]
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e0400 	.word	0x400e0400
  4008d4:	2000000c 	.word	0x2000000c
  4008d8:	400e1810 	.word	0x400e1810
  4008dc:	00b71b00 	.word	0x00b71b00
  4008e0:	003d0900 	.word	0x003d0900
  4008e4:	007a1200 	.word	0x007a1200
  4008e8:	aaaaaaab 	.word	0xaaaaaaab

004008ec <system_init_flash>:
  4008ec:	4b12      	ldr	r3, [pc, #72]	; (400938 <system_init_flash+0x4c>)
  4008ee:	4298      	cmp	r0, r3
  4008f0:	d911      	bls.n	400916 <system_init_flash+0x2a>
  4008f2:	4b12      	ldr	r3, [pc, #72]	; (40093c <system_init_flash+0x50>)
  4008f4:	4298      	cmp	r0, r3
  4008f6:	d913      	bls.n	400920 <system_init_flash+0x34>
  4008f8:	4b11      	ldr	r3, [pc, #68]	; (400940 <system_init_flash+0x54>)
  4008fa:	4298      	cmp	r0, r3
  4008fc:	d914      	bls.n	400928 <system_init_flash+0x3c>
  4008fe:	4b11      	ldr	r3, [pc, #68]	; (400944 <system_init_flash+0x58>)
  400900:	4298      	cmp	r0, r3
  400902:	d915      	bls.n	400930 <system_init_flash+0x44>
  400904:	4b10      	ldr	r3, [pc, #64]	; (400948 <system_init_flash+0x5c>)
  400906:	4298      	cmp	r0, r3
  400908:	bf94      	ite	ls
  40090a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
  40090e:	4a0f      	ldrhi	r2, [pc, #60]	; (40094c <system_init_flash+0x60>)
  400910:	4b0f      	ldr	r3, [pc, #60]	; (400950 <system_init_flash+0x64>)
  400912:	601a      	str	r2, [r3, #0]
  400914:	4770      	bx	lr
  400916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40091a:	4b0d      	ldr	r3, [pc, #52]	; (400950 <system_init_flash+0x64>)
  40091c:	601a      	str	r2, [r3, #0]
  40091e:	4770      	bx	lr
  400920:	4a0c      	ldr	r2, [pc, #48]	; (400954 <system_init_flash+0x68>)
  400922:	4b0b      	ldr	r3, [pc, #44]	; (400950 <system_init_flash+0x64>)
  400924:	601a      	str	r2, [r3, #0]
  400926:	4770      	bx	lr
  400928:	4a0b      	ldr	r2, [pc, #44]	; (400958 <system_init_flash+0x6c>)
  40092a:	4b09      	ldr	r3, [pc, #36]	; (400950 <system_init_flash+0x64>)
  40092c:	601a      	str	r2, [r3, #0]
  40092e:	4770      	bx	lr
  400930:	4a0a      	ldr	r2, [pc, #40]	; (40095c <system_init_flash+0x70>)
  400932:	4b07      	ldr	r3, [pc, #28]	; (400950 <system_init_flash+0x64>)
  400934:	601a      	str	r2, [r3, #0]
  400936:	4770      	bx	lr
  400938:	01312cff 	.word	0x01312cff
  40093c:	026259ff 	.word	0x026259ff
  400940:	039386ff 	.word	0x039386ff
  400944:	04c4b3ff 	.word	0x04c4b3ff
  400948:	05f5e0ff 	.word	0x05f5e0ff
  40094c:	04000500 	.word	0x04000500
  400950:	400e0a00 	.word	0x400e0a00
  400954:	04000100 	.word	0x04000100
  400958:	04000200 	.word	0x04000200
  40095c:	04000300 	.word	0x04000300

00400960 <_sbrk>:
  400960:	4b0a      	ldr	r3, [pc, #40]	; (40098c <_sbrk+0x2c>)
  400962:	681b      	ldr	r3, [r3, #0]
  400964:	b153      	cbz	r3, 40097c <_sbrk+0x1c>
  400966:	4b09      	ldr	r3, [pc, #36]	; (40098c <_sbrk+0x2c>)
  400968:	681b      	ldr	r3, [r3, #0]
  40096a:	181a      	adds	r2, r3, r0
  40096c:	4908      	ldr	r1, [pc, #32]	; (400990 <_sbrk+0x30>)
  40096e:	4291      	cmp	r1, r2
  400970:	db08      	blt.n	400984 <_sbrk+0x24>
  400972:	4610      	mov	r0, r2
  400974:	4a05      	ldr	r2, [pc, #20]	; (40098c <_sbrk+0x2c>)
  400976:	6010      	str	r0, [r2, #0]
  400978:	4618      	mov	r0, r3
  40097a:	4770      	bx	lr
  40097c:	4a05      	ldr	r2, [pc, #20]	; (400994 <_sbrk+0x34>)
  40097e:	4b03      	ldr	r3, [pc, #12]	; (40098c <_sbrk+0x2c>)
  400980:	601a      	str	r2, [r3, #0]
  400982:	e7f0      	b.n	400966 <_sbrk+0x6>
  400984:	f04f 30ff 	mov.w	r0, #4294967295
  400988:	4770      	bx	lr
  40098a:	bf00      	nop
  40098c:	20000a64 	.word	0x20000a64
  400990:	2001fffc 	.word	0x2001fffc
  400994:	2000f980 	.word	0x2000f980

00400998 <_close>:
  400998:	f04f 30ff 	mov.w	r0, #4294967295
  40099c:	4770      	bx	lr

0040099e <_fstat>:
  40099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4009a2:	604b      	str	r3, [r1, #4]
  4009a4:	2000      	movs	r0, #0
  4009a6:	4770      	bx	lr

004009a8 <_isatty>:
  4009a8:	2001      	movs	r0, #1
  4009aa:	4770      	bx	lr

004009ac <_lseek>:
  4009ac:	2000      	movs	r0, #0
  4009ae:	4770      	bx	lr

004009b0 <pdu_ioinit>:
		}
	
	
}

void pdu_ioinit(void){
  4009b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009b4:	b082      	sub	sp, #8
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009b6:	4b1e      	ldr	r3, [pc, #120]	; (400a30 <pdu_ioinit+0x80>)
  4009b8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
  4009bc:	601a      	str	r2, [r3, #0]
		base->PIO_OER = mask;
  4009be:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = mask;
  4009c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009c4:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4009c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009cc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009d2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4009d8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009de:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4009e4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009ea:	631a      	str	r2, [r3, #48]	; 0x30
  4009ec:	4c11      	ldr	r4, [pc, #68]	; (400a34 <pdu_ioinit+0x84>)
  4009ee:	f104 0828 	add.w	r8, r4, #40	; 0x28
	ioport_set_pin_dir(STATUS_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(STATUS_LED3_GPIO, LED0_INACTIVE_LEVEL);

	for( uint8_t iopin = 0; iopin < NUM_DIGITAL_IO; iopin++){
		
		pio_set_input(PIOD, PDU_digital_iopoins[iopin], PIO_PULLUP);
  4009f2:	4f0f      	ldr	r7, [pc, #60]	; (400a30 <pdu_ioinit+0x80>)
  4009f4:	2601      	movs	r6, #1
  4009f6:	4d10      	ldr	r5, [pc, #64]	; (400a38 <pdu_ioinit+0x88>)
  4009f8:	4632      	mov	r2, r6
  4009fa:	f854 1b04 	ldr.w	r1, [r4], #4
  4009fe:	4638      	mov	r0, r7
  400a00:	47a8      	blx	r5
	for( uint8_t iopin = 0; iopin < NUM_DIGITAL_IO; iopin++){
  400a02:	4544      	cmp	r4, r8
  400a04:	d1f8      	bne.n	4009f8 <pdu_ioinit+0x48>
		//ioport_set_pin_dir(PDU_digital_iopoins[iopin], IOPORT_DIR_INPUT);
		//ioport_set_pin_input_mode(PDU_digital_iopoins[iopin], PDU_DIO_INPUT_FLAGS, PDU_DIO_SENSE_LEVEL);
		//ioport_set_pin_mode(PDU_digital_iopoins[iopin], (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE | IOPORT_MODE_GLITCH_FILTER)); 
		}
		
	pio_handler_set(PIOD, ID_PIOD, RESET_LINE, PIO_IT_LOW_LEVEL, reset_line_handler);
  400a06:	4c0a      	ldr	r4, [pc, #40]	; (400a30 <pdu_ioinit+0x80>)
  400a08:	4b0c      	ldr	r3, [pc, #48]	; (400a3c <pdu_ioinit+0x8c>)
  400a0a:	9300      	str	r3, [sp, #0]
  400a0c:	2310      	movs	r3, #16
  400a0e:	2201      	movs	r2, #1
  400a10:	210c      	movs	r1, #12
  400a12:	4620      	mov	r0, r4
  400a14:	4d0a      	ldr	r5, [pc, #40]	; (400a40 <pdu_ioinit+0x90>)
  400a16:	47a8      	blx	r5
	pio_enable_interrupt(PIOD, RESET_LINE);
  400a18:	2101      	movs	r1, #1
  400a1a:	4620      	mov	r0, r4
  400a1c:	4b09      	ldr	r3, [pc, #36]	; (400a44 <pdu_ioinit+0x94>)
  400a1e:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400a24:	4b08      	ldr	r3, [pc, #32]	; (400a48 <pdu_ioinit+0x98>)
  400a26:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOD_IRQn);
	}
  400a28:	b002      	add	sp, #8
  400a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a2e:	bf00      	nop
  400a30:	400e1400 	.word	0x400e1400
  400a34:	00408524 	.word	0x00408524
  400a38:	00400431 	.word	0x00400431
  400a3c:	0040017d 	.word	0x0040017d
  400a40:	00400505 	.word	0x00400505
  400a44:	00400491 	.word	0x00400491
  400a48:	e000e100 	.word	0xe000e100

00400a4c <pdu_afec_init>:

void pdu_afec_init(void){
  400a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a50:	b083      	sub	sp, #12
		
	/*
	* High Current afec Enable  
	*/
	afec_enable(IS_AFEC);
  400a52:	4c44      	ldr	r4, [pc, #272]	; (400b64 <pdu_afec_init+0x118>)
  400a54:	4620      	mov	r0, r4
  400a56:	4b44      	ldr	r3, [pc, #272]	; (400b68 <pdu_afec_init+0x11c>)
  400a58:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);	
  400a5a:	4d44      	ldr	r5, [pc, #272]	; (400b6c <pdu_afec_init+0x120>)
  400a5c:	4628      	mov	r0, r5
  400a5e:	4b44      	ldr	r3, [pc, #272]	; (400b70 <pdu_afec_init+0x124>)
  400a60:	4798      	blx	r3
	afec_cfg.resolution = AFEC_16_BITS;
  400a62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  400a66:	602b      	str	r3, [r5, #0]
	//afec_cfg.anach = false;
	afec_init(IS_AFEC, &afec_cfg);
  400a68:	4629      	mov	r1, r5
  400a6a:	4620      	mov	r0, r4
  400a6c:	4b41      	ldr	r3, [pc, #260]	; (400b74 <pdu_afec_init+0x128>)
  400a6e:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  400a70:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400a72:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  400a76:	6063      	str	r3, [r4, #4]
	afec_set_trigger(IS_AFEC, AFEC_TRIG_SW);
	
	//get default config for a channel
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400a78:	483f      	ldr	r0, [pc, #252]	; (400b78 <pdu_afec_init+0x12c>)
  400a7a:	4b40      	ldr	r3, [pc, #256]	; (400b7c <pdu_afec_init+0x130>)
  400a7c:	4798      	blx	r3
  400a7e:	4d40      	ldr	r5, [pc, #256]	; (400b80 <pdu_afec_init+0x134>)
  400a80:	f8df 911c 	ldr.w	r9, [pc, #284]	; 400ba0 <pdu_afec_init+0x154>
  400a84:	f105 0a08 	add.w	sl, r5, #8
	for(uint8_t i = 0; i < NUM_HC_CHANNEL; i++){
		//set the config for the AFEC channel
		afec_ch_set_config(IS_AFEC, HC_AFEC_channel_list[i], &afec_ch_cfg);
  400a88:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 400b78 <pdu_afec_init+0x12c>
  400a8c:	4f3d      	ldr	r7, [pc, #244]	; (400b84 <pdu_afec_init+0x138>)
  400a8e:	f835 bb02 	ldrh.w	fp, [r5], #2
  400a92:	4642      	mov	r2, r8
  400a94:	4659      	mov	r1, fp
  400a96:	4620      	mov	r0, r4
  400a98:	47b8      	blx	r7
		afec_ch_set_config(IS_AFEC, HC_temp_channel_list[i], &afec_ch_cfg);
  400a9a:	f839 6b02 	ldrh.w	r6, [r9], #2
  400a9e:	4642      	mov	r2, r8
  400aa0:	4631      	mov	r1, r6
  400aa2:	4620      	mov	r0, r4
  400aa4:	47b8      	blx	r7
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400aa6:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400aae:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  400ab0:	6666      	str	r6, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400ab2:	66e3      	str	r3, [r4, #108]	; 0x6c
	for(uint8_t i = 0; i < NUM_HC_CHANNEL; i++){
  400ab4:	4555      	cmp	r5, sl
  400ab6:	d1ea      	bne.n	400a8e <pdu_afec_init+0x42>
		afec_channel_set_analog_offset(IS_AFEC, HC_temp_channel_list[i],AFEC_ANALOG_OFFSET);
	}
	
	// Initialize System voltage sensor AFEC
	for(uint8_t index = 0; index < NUM_SUPPLY_MONITOR; index++){
		afec_ch_set_config( PDU_AFEC, supply_monitor_list[index], &afec_ch_cfg );
  400ab8:	4f2f      	ldr	r7, [pc, #188]	; (400b78 <pdu_afec_init+0x12c>)
  400aba:	4c2a      	ldr	r4, [pc, #168]	; (400b64 <pdu_afec_init+0x118>)
  400abc:	463a      	mov	r2, r7
  400abe:	210c      	movs	r1, #12
  400ac0:	4620      	mov	r0, r4
  400ac2:	4e30      	ldr	r6, [pc, #192]	; (400b84 <pdu_afec_init+0x138>)
  400ac4:	47b0      	blx	r6
	afec->AFEC_CSELR = afec_ch;
  400ac6:	230c      	movs	r3, #12
  400ac8:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400aca:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400ace:	66e5      	str	r5, [r4, #108]	; 0x6c
  400ad0:	463a      	mov	r2, r7
  400ad2:	210d      	movs	r1, #13
  400ad4:	4620      	mov	r0, r4
  400ad6:	47b0      	blx	r6
	afec->AFEC_CSELR = afec_ch;
  400ad8:	230d      	movs	r3, #13
  400ada:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400adc:	66e5      	str	r5, [r4, #108]	; 0x6c
	
	//afec_enable_interrupt(HA_AFEC, 0xFFFF);
	/*
	* Low Current Afec Enable  
	*/
	afec_enable(LA_AFEC);
  400ade:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
  400ae2:	4620      	mov	r0, r4
  400ae4:	4b20      	ldr	r3, [pc, #128]	; (400b68 <pdu_afec_init+0x11c>)
  400ae6:	4798      	blx	r3
	afec_get_config_defaults(&afec_1_cfg);
  400ae8:	4d27      	ldr	r5, [pc, #156]	; (400b88 <pdu_afec_init+0x13c>)
  400aea:	4628      	mov	r0, r5
  400aec:	4b20      	ldr	r3, [pc, #128]	; (400b70 <pdu_afec_init+0x124>)
  400aee:	4798      	blx	r3
	afec_1_cfg.resolution = AFEC_16_BITS;
  400af0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  400af4:	602b      	str	r3, [r5, #0]
	//afec_1_cfg.anach = false;
	afec_init(LA_AFEC, &afec_1_cfg);
  400af6:	4629      	mov	r1, r5
  400af8:	4620      	mov	r0, r4
  400afa:	4b1e      	ldr	r3, [pc, #120]	; (400b74 <pdu_afec_init+0x128>)
  400afc:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400afe:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400b00:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400b04:	6063      	str	r3, [r4, #4]
	afec_set_trigger(LA_AFEC, AFEC_TRIG_SW);
	
	//get default config for a channel
	afec_ch_get_config_defaults(&afec_1_ch_cfg);
  400b06:	4821      	ldr	r0, [pc, #132]	; (400b8c <pdu_afec_init+0x140>)
  400b08:	4b1c      	ldr	r3, [pc, #112]	; (400b7c <pdu_afec_init+0x130>)
  400b0a:	4798      	blx	r3
  400b0c:	4c20      	ldr	r4, [pc, #128]	; (400b90 <pdu_afec_init+0x144>)
  400b0e:	f104 0908 	add.w	r9, r4, #8
	for(uint8_t i = 0; i < NUM_LC_CHANNEL/2; i++){
		//set the config for the AFEC channel
		afec_ch_set_config(LA_AFEC, LC_AFEC_channel_list[i], &afec_1_ch_cfg);
  400b12:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400b8c <pdu_afec_init+0x140>
  400b16:	4d1f      	ldr	r5, [pc, #124]	; (400b94 <pdu_afec_init+0x148>)
  400b18:	4637      	mov	r7, r6
  400b1a:	f834 6b02 	ldrh.w	r6, [r4], #2
  400b1e:	4642      	mov	r2, r8
  400b20:	4631      	mov	r1, r6
  400b22:	4628      	mov	r0, r5
  400b24:	47b8      	blx	r7
	afec->AFEC_CSELR = afec_ch;
  400b26:	666e      	str	r6, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b2c:	66eb      	str	r3, [r5, #108]	; 0x6c
	for(uint8_t i = 0; i < NUM_LC_CHANNEL/2; i++){
  400b2e:	454c      	cmp	r4, r9
  400b30:	d1f3      	bne.n	400b1a <pdu_afec_init+0xce>
	}
	//afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec_data_ready, 1);
	

	/*Use AFEC0 here because the temperature sensor is hardwired to AFEC0*/	 
	afec_ch_set_config(AFEC0, AFEC_TEMPERATURE_SENSOR, &afec_ch_cfg);	
  400b32:	4c0c      	ldr	r4, [pc, #48]	; (400b64 <pdu_afec_init+0x118>)
  400b34:	4a10      	ldr	r2, [pc, #64]	; (400b78 <pdu_afec_init+0x12c>)
  400b36:	210f      	movs	r1, #15
  400b38:	4620      	mov	r0, r4
  400b3a:	4b12      	ldr	r3, [pc, #72]	; (400b84 <pdu_afec_init+0x138>)
  400b3c:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  400b3e:	230f      	movs	r3, #15
  400b40:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b46:	66e3      	str	r3, [r4, #108]	; 0x6c
	 */
	afec_channel_set_analog_offset(AFEC0, AFEC_TEMPERATURE_SENSOR, AFEC_ANALOG_OFFSET);
	
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  400b48:	4668      	mov	r0, sp
  400b4a:	4b13      	ldr	r3, [pc, #76]	; (400b98 <pdu_afec_init+0x14c>)
  400b4c:	4798      	blx	r3
	afec_temp_sensor_cfg.rctc = false;
  400b4e:	2300      	movs	r3, #0
  400b50:	f88d 3000 	strb.w	r3, [sp]
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  400b54:	4669      	mov	r1, sp
  400b56:	4620      	mov	r0, r4
  400b58:	4b10      	ldr	r3, [pc, #64]	; (400b9c <pdu_afec_init+0x150>)
  400b5a:	4798      	blx	r3
	
	//afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_15,	get_chip_temp, 1);
	//NVIC_EnableIRQ(AFEC0_IRQn);
}
  400b5c:	b003      	add	sp, #12
  400b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b62:	bf00      	nop
  400b64:	400b0000 	.word	0x400b0000
  400b68:	00402315 	.word	0x00402315
  400b6c:	2000c3dc 	.word	0x2000c3dc
  400b70:	004021c9 	.word	0x004021c9
  400b74:	00402219 	.word	0x00402219
  400b78:	2000c3d8 	.word	0x2000c3d8
  400b7c:	004021f9 	.word	0x004021f9
  400b80:	004084cc 	.word	0x004084cc
  400b84:	00402185 	.word	0x00402185
  400b88:	2000c3f8 	.word	0x2000c3f8
  400b8c:	2000c514 	.word	0x2000c514
  400b90:	004084dc 	.word	0x004084dc
  400b94:	400b4000 	.word	0x400b4000
  400b98:	00402203 	.word	0x00402203
  400b9c:	004021b5 	.word	0x004021b5
  400ba0:	004084d4 	.word	0x004084d4

00400ba4 <pdu_can_init>:

void pdu_can_init(void){
  400ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/*
	* Initialize the CAN Bus for the PDU
	* Setup mailbox structs 
	*/
	//NOTE: CAN peripherial must first be initialized in board init()
	can_init(PDU_CAN, ul_sysclk, PDU_CAN_BAUD);	
  400ba8:	4c36      	ldr	r4, [pc, #216]	; (400c84 <pdu_can_init+0xe0>)
  400baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400bae:	4b36      	ldr	r3, [pc, #216]	; (400c88 <pdu_can_init+0xe4>)
  400bb0:	6819      	ldr	r1, [r3, #0]
  400bb2:	4620      	mov	r0, r4
  400bb4:	4b35      	ldr	r3, [pc, #212]	; (400c8c <pdu_can_init+0xe8>)
  400bb6:	4798      	blx	r3
	
	can_enable_autobaud_listen_mode(PDU_CAN);
  400bb8:	4620      	mov	r0, r4
  400bba:	4b35      	ldr	r3, [pc, #212]	; (400c90 <pdu_can_init+0xec>)
  400bbc:	4798      	blx	r3
	while( ( can_get_status(PDU_CAN) & PDU_ALL_ERR_MASK ) );
  400bbe:	4625      	mov	r5, r4
  400bc0:	4c34      	ldr	r4, [pc, #208]	; (400c94 <pdu_can_init+0xf0>)
  400bc2:	4628      	mov	r0, r5
  400bc4:	47a0      	blx	r4
  400bc6:	f010 5ff8 	tst.w	r0, #520093696	; 0x1f000000
  400bca:	d1fa      	bne.n	400bc2 <pdu_can_init+0x1e>
	can_disable_autobaud_listen_mode(PDU_CAN);
  400bcc:	482d      	ldr	r0, [pc, #180]	; (400c84 <pdu_can_init+0xe0>)
  400bce:	4b32      	ldr	r3, [pc, #200]	; (400c98 <pdu_can_init+0xf4>)
  400bd0:	4798      	blx	r3
  400bd2:	4c32      	ldr	r4, [pc, #200]	; (400c9c <pdu_can_init+0xf8>)
  400bd4:	f504 7180 	add.w	r1, r4, #256	; 0x100
  400bd8:	4623      	mov	r3, r4
 *
 *  \param p_mailbox Pointer to mailbox configure structure.
 */
static void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
	p_mailbox->ul_mb_idx = 0;
  400bda:	2200      	movs	r2, #0
  400bdc:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
  400bde:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
  400be0:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
  400be2:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
  400be4:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
  400be6:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
  400be8:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
  400bea:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
  400bec:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
  400bee:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
  400bf0:	61da      	str	r2, [r3, #28]
  400bf2:	3320      	adds	r3, #32

	//make sure all mailbox structs are zeroed
	for( int i =0; i < CANMB_NUMBER; i ++){
  400bf4:	428b      	cmp	r3, r1
  400bf6:	d1f1      	bne.n	400bdc <pdu_can_init+0x38>
		reset_mailbox_conf(&can_mailbox[i]);
	}
	
	//the first mailbox is always the ECU receive mailbox
	can_mailbox[ENABLE_MB_IDX].ul_mb_idx = ENABLE_MB_IDX;
  400bf8:	4d28      	ldr	r5, [pc, #160]	; (400c9c <pdu_can_init+0xf8>)
  400bfa:	2300      	movs	r3, #0
  400bfc:	602b      	str	r3, [r5, #0]
	
	can_mailbox[ENABLE_MB_IDX].uc_obj_type = CAN_MB_RX_OVER_WR_MODE;
  400bfe:	2602      	movs	r6, #2
  400c00:	712e      	strb	r6, [r5, #4]
	can_mailbox[ENABLE_MB_IDX].ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;		//this masks all id bits
  400c02:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
  400c06:	f8c5 900c 	str.w	r9, [r5, #12]
	can_mailbox[ENABLE_MB_IDX].ul_id = CAN_MID_MIDvA(PDU_ECU_REC_ADDRESS);
  400c0a:	f04f 638d 	mov.w	r3, #73924608	; 0x4680000
  400c0e:	612b      	str	r3, [r5, #16]

	can_mailbox_init(PDU_CAN, &(can_mailbox[ENABLE_MB_IDX]));
  400c10:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400c84 <pdu_can_init+0xe0>
  400c14:	4629      	mov	r1, r5
  400c16:	4640      	mov	r0, r8
  400c18:	4f21      	ldr	r7, [pc, #132]	; (400ca0 <pdu_can_init+0xfc>)
  400c1a:	47b8      	blx	r7
		
	///* second mailbox is always the receive mailbox for pwm request */
	can_mailbox[PWM_MB_IDX].ul_mb_idx = PWM_MB_IDX;
  400c1c:	2301      	movs	r3, #1
  400c1e:	622b      	str	r3, [r5, #32]
	can_mailbox[PWM_MB_IDX].uc_obj_type = CAN_MB_RX_OVER_WR_MODE;
  400c20:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
	can_mailbox[PWM_MB_IDX].ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;		//this masks all id bits
  400c24:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
	can_mailbox[PWM_MB_IDX].ul_id = CAN_MID_MIDvA(PDU_PWM_UPDATE_ADD);
  400c28:	f04f 6390 	mov.w	r3, #75497472	; 0x4800000
  400c2c:	632b      	str	r3, [r5, #48]	; 0x30
	can_mailbox_init(PDU_CAN, &can_mailbox[PWM_MB_IDX]);
  400c2e:	f105 0120 	add.w	r1, r5, #32
  400c32:	4640      	mov	r0, r8
  400c34:	47b8      	blx	r7
	
	/* third mailbox is always the ECU receive mailbox for vehicle data */
	can_mailbox[REC_MB_IDX].ul_mb_idx = REC_MB_IDX;
  400c36:	642e      	str	r6, [r5, #64]	; 0x40
	can_mailbox[REC_MB_IDX].uc_obj_type = CAN_MB_RX_OVER_WR_MODE;
  400c38:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
	can_mailbox[REC_MB_IDX].ul_id_msk = PDU_ECU_GEN_MSG_ID_MASK;		//this will only allow all generic messages from ECU
  400c3c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  400c40:	64eb      	str	r3, [r5, #76]	; 0x4c
	can_mailbox[REC_MB_IDX].ul_id = CAN_MID_MIDvA(PDU_ECU_DATA_BLOCK_BASE);
  400c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  400c46:	652b      	str	r3, [r5, #80]	; 0x50
	can_mailbox_init(PDU_CAN, &can_mailbox[REC_MB_IDX]);
  400c48:	f105 0140 	add.w	r1, r5, #64	; 0x40
  400c4c:	4640      	mov	r0, r8
  400c4e:	47b8      	blx	r7
  400c50:	f04f 56a0 	mov.w	r6, #335544320	; 0x14000000
  400c54:	2503      	movs	r5, #3
	/** Init CAN bus TX mailboxes */
	for( uint8_t i = PDU_TX_FIRST_MB; i < PDU_TX_MB + PDU_TX_FIRST_MB; i++){
		can_mailbox[i].ul_mb_idx = i;
		can_mailbox[i].uc_obj_type = CAN_MB_TX_MODE;
		can_mailbox[i].ul_id_msk = 0;
		can_mailbox[i].ul_id = CAN_MID_MIDvA(PDU_BASE_TX_ADDRESS + (i - PDU_TX_FIRST_MB));
  400c56:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400ca4 <pdu_can_init+0x100>
		can_mailbox[i].ul_mb_idx = i;
  400c5a:	6625      	str	r5, [r4, #96]	; 0x60
		can_mailbox[i].uc_obj_type = CAN_MB_TX_MODE;
  400c5c:	2303      	movs	r3, #3
  400c5e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		can_mailbox[i].ul_id_msk = 0;
  400c62:	2300      	movs	r3, #0
  400c64:	66e3      	str	r3, [r4, #108]	; 0x6c
		can_mailbox[i].ul_id = CAN_MID_MIDvA(PDU_BASE_TX_ADDRESS + (i - PDU_TX_FIRST_MB));
  400c66:	ea06 0309 	and.w	r3, r6, r9
  400c6a:	6723      	str	r3, [r4, #112]	; 0x70
		can_mailbox_init(PDU_CAN, &can_mailbox[i]);
  400c6c:	f104 0160 	add.w	r1, r4, #96	; 0x60
  400c70:	4640      	mov	r0, r8
  400c72:	47b8      	blx	r7
  400c74:	3501      	adds	r5, #1
  400c76:	3420      	adds	r4, #32
  400c78:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
	for( uint8_t i = PDU_TX_FIRST_MB; i < PDU_TX_MB + PDU_TX_FIRST_MB; i++){
  400c7c:	2d08      	cmp	r5, #8
  400c7e:	d1ec      	bne.n	400c5a <pdu_can_init+0xb6>
	//can_enable_interrupt(PDU_CAN, PDU_CAN_IE_MASK);
	//NVIC_SetPriority(CAN0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
	//NVIC_EnableIRQ(CAN0_IRQn);
	

}
  400c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c84:	40010000 	.word	0x40010000
  400c88:	2000c398 	.word	0x2000c398
  400c8c:	00402521 	.word	0x00402521
  400c90:	00402383 	.word	0x00402383
  400c94:	00402395 	.word	0x00402395
  400c98:	00402379 	.word	0x00402379
  400c9c:	2000c414 	.word	0x2000c414
  400ca0:	004023bb 	.word	0x004023bb
  400ca4:	1ffc0000 	.word	0x1ffc0000

00400ca8 <pdu_pwm_init>:

void pdu_pwm_init(void){
  400ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400cac:	b084      	sub	sp, #16
	
	
	pwm_clock_t clock_setting = {
  400cae:	4b19      	ldr	r3, [pc, #100]	; (400d14 <pdu_pwm_init+0x6c>)
  400cb0:	9301      	str	r3, [sp, #4]
  400cb2:	2300      	movs	r3, #0
  400cb4:	9302      	str	r3, [sp, #8]
  400cb6:	4b18      	ldr	r3, [pc, #96]	; (400d18 <pdu_pwm_init+0x70>)
  400cb8:	681b      	ldr	r3, [r3, #0]
  400cba:	9303      	str	r3, [sp, #12]
		.ul_clka = PDU_PWM_FREQUENCY * PDU_PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = ul_sysclk
	};
	pwm_init(PWM, &clock_setting);
  400cbc:	a901      	add	r1, sp, #4
  400cbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cc2:	4b16      	ldr	r3, [pc, #88]	; (400d1c <pdu_pwm_init+0x74>)
  400cc4:	4798      	blx	r3
  400cc6:	4f16      	ldr	r7, [pc, #88]	; (400d20 <pdu_pwm_init+0x78>)
  400cc8:	4c16      	ldr	r4, [pc, #88]	; (400d24 <pdu_pwm_init+0x7c>)
  400cca:	f107 0a10 	add.w	sl, r7, #16
	
	for(int i =0; i < NUM_HC_CHANNEL; i++){
		/* Disable channel counter event interrupt */
		pwm_channel_disable_interrupt(PWM, pwm_assignment[i], 0);
  400cce:	2500      	movs	r5, #0
  400cd0:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  400cd4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 400d30 <pdu_pwm_init+0x88>
  400cd8:	f857 6b04 	ldr.w	r6, [r7], #4
  400cdc:	462a      	mov	r2, r5
  400cde:	4631      	mov	r1, r6
  400ce0:	4640      	mov	r0, r8
  400ce2:	47c8      	blx	r9
		
		/* Initialize PWM channel for HCx */
		/* Period is left-aligned */
		hc_pwm_channel[i].alignment = PWM_ALIGN_LEFT;
  400ce4:	8125      	strh	r5, [r4, #8]
		/* Output waveform starts at a low level */
		hc_pwm_channel[i].polarity = PWM_LOW;
  400ce6:	72a5      	strb	r5, [r4, #10]
		/* Use PWM clock A as source clock */
		hc_pwm_channel[i].ul_prescaler = PWM_CMR_CPRE_CLKA;
  400ce8:	230b      	movs	r3, #11
  400cea:	6063      	str	r3, [r4, #4]
		/* Period value of output waveform */
		hc_pwm_channel[i].ul_period = PDU_PERIOD_VALUE;
  400cec:	2364      	movs	r3, #100	; 0x64
  400cee:	6123      	str	r3, [r4, #16]
		/* Duty cycle value of output waveform */
		hc_pwm_channel[i].ul_duty = PDU_DEFAULT_DUTY_VALUE;
  400cf0:	234b      	movs	r3, #75	; 0x4b
  400cf2:	60e3      	str	r3, [r4, #12]
		hc_pwm_channel[i].channel = pwm_assignment[i];
  400cf4:	6026      	str	r6, [r4, #0]
	
		pwm_channel_init(PWM, &(hc_pwm_channel[i]));
  400cf6:	4621      	mov	r1, r4
  400cf8:	4640      	mov	r0, r8
  400cfa:	4b0b      	ldr	r3, [pc, #44]	; (400d28 <pdu_pwm_init+0x80>)
  400cfc:	4798      	blx	r3
		pwm_channel_enable_interrupt(PWM, pwm_assignment[i], 0);
  400cfe:	462a      	mov	r2, r5
  400d00:	4631      	mov	r1, r6
  400d02:	4640      	mov	r0, r8
  400d04:	4b09      	ldr	r3, [pc, #36]	; (400d2c <pdu_pwm_init+0x84>)
  400d06:	4798      	blx	r3
  400d08:	3438      	adds	r4, #56	; 0x38
	for(int i =0; i < NUM_HC_CHANNEL; i++){
  400d0a:	4557      	cmp	r7, sl
  400d0c:	d1e4      	bne.n	400cd8 <pdu_pwm_init+0x30>

	}
		
}
  400d0e:	b004      	add	sp, #16
  400d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d14:	0007a120 	.word	0x0007a120
  400d18:	2000c398 	.word	0x2000c398
  400d1c:	00402671 	.word	0x00402671
  400d20:	0040860c 	.word	0x0040860c
  400d24:	2000c770 	.word	0x2000c770
  400d28:	004026b5 	.word	0x004026b5
  400d2c:	00402841 	.word	0x00402841
  400d30:	00402853 	.word	0x00402853

00400d34 <init_PDU>:
void init_PDU(void){
  400d34:	b538      	push	{r3, r4, r5, lr}
	pdu_ioinit();
  400d36:	4b22      	ldr	r3, [pc, #136]	; (400dc0 <init_PDU+0x8c>)
  400d38:	4798      	blx	r3
	pdu_pwm_init();
  400d3a:	4b22      	ldr	r3, [pc, #136]	; (400dc4 <init_PDU+0x90>)
  400d3c:	4798      	blx	r3
	pdu_can_init();
  400d3e:	4b22      	ldr	r3, [pc, #136]	; (400dc8 <init_PDU+0x94>)
  400d40:	4798      	blx	r3
	pdu_afec_init();
  400d42:	4b22      	ldr	r3, [pc, #136]	; (400dcc <init_PDU+0x98>)
  400d44:	4798      	blx	r3
	afec_semaphore = xSemaphoreCreateMutex();
  400d46:	2001      	movs	r0, #1
  400d48:	4c21      	ldr	r4, [pc, #132]	; (400dd0 <init_PDU+0x9c>)
  400d4a:	47a0      	blx	r4
  400d4c:	4b21      	ldr	r3, [pc, #132]	; (400dd4 <init_PDU+0xa0>)
  400d4e:	6018      	str	r0, [r3, #0]
	afec2_semaphore = xSemaphoreCreateMutex();
  400d50:	2001      	movs	r0, #1
  400d52:	47a0      	blx	r4
  400d54:	4b20      	ldr	r3, [pc, #128]	; (400dd8 <init_PDU+0xa4>)
  400d56:	6018      	str	r0, [r3, #0]
	afec_complete_buffer = xSemaphoreCreateBinary();
  400d58:	2203      	movs	r2, #3
  400d5a:	2100      	movs	r1, #0
  400d5c:	2001      	movs	r0, #1
  400d5e:	4b1f      	ldr	r3, [pc, #124]	; (400ddc <init_PDU+0xa8>)
  400d60:	4798      	blx	r3
  400d62:	4b1f      	ldr	r3, [pc, #124]	; (400de0 <init_PDU+0xac>)
  400d64:	6018      	str	r0, [r3, #0]
	enable_mask = PDU_DEFAULT_MASK;
  400d66:	f44f 62e2 	mov.w	r2, #1808	; 0x710
  400d6a:	4b1e      	ldr	r3, [pc, #120]	; (400de4 <init_PDU+0xb0>)
  400d6c:	601a      	str	r2, [r3, #0]
  400d6e:	4d1e      	ldr	r5, [pc, #120]	; (400de8 <init_PDU+0xb4>)
  400d70:	1f29      	subs	r1, r5, #4
  400d72:	4c1e      	ldr	r4, [pc, #120]	; (400dec <init_PDU+0xb8>)
  400d74:	351c      	adds	r5, #28
	return 1U << (pin & 0x1F);
  400d76:	2001      	movs	r0, #1
		ioport_set_pin_dir(PDU_DEN_iopins[index], IOPORT_DIR_OUTPUT);
  400d78:	f851 2f04 	ldr.w	r2, [r1, #4]!
	return pin >> 5;
  400d7c:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400d82:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400d86:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  400d88:	f002 021f 	and.w	r2, r2, #31
  400d8c:	fa00 f202 	lsl.w	r2, r0, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d90:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d96:	631a      	str	r2, [r3, #48]	; 0x30
		ioport_set_pin_dir(PDU_DSEL_iopins[index], IOPORT_DIR_OUTPUT);
  400d98:	f854 2f04 	ldr.w	r2, [r4, #4]!
	return pin >> 5;
  400d9c:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400da2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400da6:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  400da8:	f002 021f 	and.w	r2, r2, #31
  400dac:	fa00 f202 	lsl.w	r2, r0, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400db0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400db6:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t index = 0; index < NUM_LC_CHANNEL; index++){
  400db8:	42a9      	cmp	r1, r5
  400dba:	d1dd      	bne.n	400d78 <init_PDU+0x44>
}
  400dbc:	bd38      	pop	{r3, r4, r5, pc}
  400dbe:	bf00      	nop
  400dc0:	004009b1 	.word	0x004009b1
  400dc4:	00400ca9 	.word	0x00400ca9
  400dc8:	00400ba5 	.word	0x00400ba5
  400dcc:	00400a4d 	.word	0x00400a4d
  400dd0:	0040323d 	.word	0x0040323d
  400dd4:	2000c850 	.word	0x2000c850
  400dd8:	2000c5e8 	.word	0x2000c5e8
  400ddc:	0040301d 	.word	0x0040301d
  400de0:	2000c5ec 	.word	0x2000c5ec
  400de4:	2000c388 	.word	0x2000c388
  400de8:	004084e4 	.word	0x004084e4
  400dec:	00408500 	.word	0x00408500

00400df0 <PDU_system_startup>:
/*
* System Startup function
* This function shall create all the necessary threads
* for PDU functionality
*/
void PDU_system_startup(void){
  400df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400df2:	b083      	sub	sp, #12
  400df4:	2400      	movs	r4, #0
		for (U8 i = 0; i < NUM_HC_CHANNEL; i++)
		{
			if (xTaskCreate(HC_thread,
  400df6:	4f3c      	ldr	r7, [pc, #240]	; (400ee8 <PDU_system_startup+0xf8>)
  400df8:	4e3c      	ldr	r6, [pc, #240]	; (400eec <PDU_system_startup+0xfc>)
  400dfa:	4d3d      	ldr	r5, [pc, #244]	; (400ef0 <PDU_system_startup+0x100>)
  400dfc:	e002      	b.n	400e04 <PDU_system_startup+0x14>
  400dfe:	3401      	adds	r4, #1
		for (U8 i = 0; i < NUM_HC_CHANNEL; i++)
  400e00:	2c04      	cmp	r4, #4
  400e02:	d010      	beq.n	400e26 <PDU_system_startup+0x36>
			if (xTaskCreate(HC_thread,
  400e04:	2300      	movs	r3, #0
  400e06:	9301      	str	r3, [sp, #4]
  400e08:	2301      	movs	r3, #1
  400e0a:	9300      	str	r3, [sp, #0]
  400e0c:	4623      	mov	r3, r4
  400e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e12:	4639      	mov	r1, r7
  400e14:	4630      	mov	r0, r6
  400e16:	47a8      	blx	r5
  400e18:	2801      	cmp	r0, #1
  400e1a:	d0f0      	beq.n	400dfe <PDU_system_startup+0xe>
			"HC Thread",
			HC_THREAD_STACK_SIZE,
			(void*) i,				// channel number
			HC_THREAD_PRIORITY,
			NULL) != pdPASS)
			{printf("Failed to create a HC task %d\r\n", i); }
  400e1c:	4621      	mov	r1, r4
  400e1e:	4835      	ldr	r0, [pc, #212]	; (400ef4 <PDU_system_startup+0x104>)
  400e20:	4b35      	ldr	r3, [pc, #212]	; (400ef8 <PDU_system_startup+0x108>)
  400e22:	4798      	blx	r3
  400e24:	e7eb      	b.n	400dfe <PDU_system_startup+0xe>

		}
		
		for (U8 i = NUM_HC_CHANNEL; i < NUM_PDU_CHANNEL; i++)
			{
			if (xTaskCreate(LC_thread,
  400e26:	4f35      	ldr	r7, [pc, #212]	; (400efc <PDU_system_startup+0x10c>)
  400e28:	4e35      	ldr	r6, [pc, #212]	; (400f00 <PDU_system_startup+0x110>)
  400e2a:	4d31      	ldr	r5, [pc, #196]	; (400ef0 <PDU_system_startup+0x100>)
  400e2c:	e002      	b.n	400e34 <PDU_system_startup+0x44>
  400e2e:	3401      	adds	r4, #1
		for (U8 i = NUM_HC_CHANNEL; i < NUM_PDU_CHANNEL; i++)
  400e30:	2c0c      	cmp	r4, #12
  400e32:	d010      	beq.n	400e56 <PDU_system_startup+0x66>
			if (xTaskCreate(LC_thread,
  400e34:	2300      	movs	r3, #0
  400e36:	9301      	str	r3, [sp, #4]
  400e38:	2301      	movs	r3, #1
  400e3a:	9300      	str	r3, [sp, #0]
  400e3c:	4623      	mov	r3, r4
  400e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e42:	4639      	mov	r1, r7
  400e44:	4630      	mov	r0, r6
  400e46:	47a8      	blx	r5
  400e48:	2801      	cmp	r0, #1
  400e4a:	d0f0      	beq.n	400e2e <PDU_system_startup+0x3e>
				"LC Thread",
				LC_THREAD_STACK_SIZE,
				(void*) i,				// channel number
				LC_THREAD_PRIORITY,
				NULL) != pdPASS)
				{printf("Failed to create a LC task %d\r\n", i); }		
  400e4c:	4621      	mov	r1, r4
  400e4e:	482d      	ldr	r0, [pc, #180]	; (400f04 <PDU_system_startup+0x114>)
  400e50:	4b29      	ldr	r3, [pc, #164]	; (400ef8 <PDU_system_startup+0x108>)
  400e52:	4798      	blx	r3
  400e54:	e7eb      	b.n	400e2e <PDU_system_startup+0x3e>
			}
		
		if (xTaskCreate(can_thread,
  400e56:	2300      	movs	r3, #0
  400e58:	9301      	str	r3, [sp, #4]
  400e5a:	2201      	movs	r2, #1
  400e5c:	9200      	str	r2, [sp, #0]
  400e5e:	2240      	movs	r2, #64	; 0x40
  400e60:	4929      	ldr	r1, [pc, #164]	; (400f08 <PDU_system_startup+0x118>)
  400e62:	482a      	ldr	r0, [pc, #168]	; (400f0c <PDU_system_startup+0x11c>)
  400e64:	4c22      	ldr	r4, [pc, #136]	; (400ef0 <PDU_system_startup+0x100>)
  400e66:	47a0      	blx	r4
  400e68:	2801      	cmp	r0, #1
  400e6a:	d002      	beq.n	400e72 <PDU_system_startup+0x82>
			"CAN Thread",
			CAN_THREAD_STACK_SIZE,
			NULL,
			1,
			NULL) != pdPASS)
			{ printf("Failed to create can task\r\n"); }
  400e6c:	4828      	ldr	r0, [pc, #160]	; (400f10 <PDU_system_startup+0x120>)
  400e6e:	4b22      	ldr	r3, [pc, #136]	; (400ef8 <PDU_system_startup+0x108>)
  400e70:	4798      	blx	r3
		
		if (xTaskCreate(transmit_status,
  400e72:	2300      	movs	r3, #0
  400e74:	9301      	str	r3, [sp, #4]
  400e76:	2202      	movs	r2, #2
  400e78:	9200      	str	r2, [sp, #0]
  400e7a:	2240      	movs	r2, #64	; 0x40
  400e7c:	4925      	ldr	r1, [pc, #148]	; (400f14 <PDU_system_startup+0x124>)
  400e7e:	4826      	ldr	r0, [pc, #152]	; (400f18 <PDU_system_startup+0x128>)
  400e80:	4c1b      	ldr	r4, [pc, #108]	; (400ef0 <PDU_system_startup+0x100>)
  400e82:	47a0      	blx	r4
  400e84:	2801      	cmp	r0, #1
  400e86:	d002      	beq.n	400e8e <PDU_system_startup+0x9e>
			"Status Thread",
			CAN_THREAD_STACK_SIZE,
			NULL,
			TRANSMIT_PRIORITY,
			NULL) != pdPASS)
			{ printf("Failed to create can task\r\n"); }
  400e88:	4821      	ldr	r0, [pc, #132]	; (400f10 <PDU_system_startup+0x120>)
  400e8a:	4b1b      	ldr	r3, [pc, #108]	; (400ef8 <PDU_system_startup+0x108>)
  400e8c:	4798      	blx	r3
		
		
		if (xTaskCreate(transmit_output_current,
  400e8e:	2300      	movs	r3, #0
  400e90:	9301      	str	r3, [sp, #4]
  400e92:	2202      	movs	r2, #2
  400e94:	9200      	str	r2, [sp, #0]
  400e96:	2240      	movs	r2, #64	; 0x40
  400e98:	4920      	ldr	r1, [pc, #128]	; (400f1c <PDU_system_startup+0x12c>)
  400e9a:	4821      	ldr	r0, [pc, #132]	; (400f20 <PDU_system_startup+0x130>)
  400e9c:	4c14      	ldr	r4, [pc, #80]	; (400ef0 <PDU_system_startup+0x100>)
  400e9e:	47a0      	blx	r4
  400ea0:	2801      	cmp	r0, #1
  400ea2:	d002      	beq.n	400eaa <PDU_system_startup+0xba>
			"Current Thread",
			CAN_THREAD_STACK_SIZE,
			NULL,
			TRANSMIT_PRIORITY,
			NULL) != pdPASS)
			{ printf("Failed to create can task\r\n"); }
  400ea4:	481a      	ldr	r0, [pc, #104]	; (400f10 <PDU_system_startup+0x120>)
  400ea6:	4b14      	ldr	r3, [pc, #80]	; (400ef8 <PDU_system_startup+0x108>)
  400ea8:	4798      	blx	r3
		
		
		if (xTaskCreate(transmit_output_state,
  400eaa:	2300      	movs	r3, #0
  400eac:	9301      	str	r3, [sp, #4]
  400eae:	2202      	movs	r2, #2
  400eb0:	9200      	str	r2, [sp, #0]
  400eb2:	2240      	movs	r2, #64	; 0x40
  400eb4:	491b      	ldr	r1, [pc, #108]	; (400f24 <PDU_system_startup+0x134>)
  400eb6:	481c      	ldr	r0, [pc, #112]	; (400f28 <PDU_system_startup+0x138>)
  400eb8:	4c0d      	ldr	r4, [pc, #52]	; (400ef0 <PDU_system_startup+0x100>)
  400eba:	47a0      	blx	r4
  400ebc:	2801      	cmp	r0, #1
  400ebe:	d002      	beq.n	400ec6 <PDU_system_startup+0xd6>
			"State Thread",
			CAN_THREAD_STACK_SIZE,
			NULL,
			TRANSMIT_PRIORITY,
			NULL) != pdPASS)
			{ printf("Failed to create can task\r\n"); }
  400ec0:	4813      	ldr	r0, [pc, #76]	; (400f10 <PDU_system_startup+0x120>)
  400ec2:	4b0d      	ldr	r3, [pc, #52]	; (400ef8 <PDU_system_startup+0x108>)
  400ec4:	4798      	blx	r3
		
		if (xTaskCreate(system_task,
  400ec6:	2300      	movs	r3, #0
  400ec8:	9301      	str	r3, [sp, #4]
  400eca:	2203      	movs	r2, #3
  400ecc:	9200      	str	r2, [sp, #0]
  400ece:	f44f 7280 	mov.w	r2, #256	; 0x100
  400ed2:	4916      	ldr	r1, [pc, #88]	; (400f2c <PDU_system_startup+0x13c>)
  400ed4:	4816      	ldr	r0, [pc, #88]	; (400f30 <PDU_system_startup+0x140>)
  400ed6:	4c06      	ldr	r4, [pc, #24]	; (400ef0 <PDU_system_startup+0x100>)
  400ed8:	47a0      	blx	r4
  400eda:	2801      	cmp	r0, #1
  400edc:	d002      	beq.n	400ee4 <PDU_system_startup+0xf4>
			"System Thread",
			SYSTEM_THREAD_STACK_SIZE,
			NULL,
			SYSTEM_TASK_PRIORITY,
			NULL) != pdPASS)
			{ printf("Failed to create can task\r\n"); }
  400ede:	480c      	ldr	r0, [pc, #48]	; (400f10 <PDU_system_startup+0x120>)
  400ee0:	4b05      	ldr	r3, [pc, #20]	; (400ef8 <PDU_system_startup+0x108>)
  400ee2:	4798      	blx	r3
	}
  400ee4:	b003      	add	sp, #12
  400ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400ee8:	0040854c 	.word	0x0040854c
  400eec:	0040164d 	.word	0x0040164d
  400ef0:	0040357d 	.word	0x0040357d
  400ef4:	00408558 	.word	0x00408558
  400ef8:	004054ed 	.word	0x004054ed
  400efc:	00408578 	.word	0x00408578
  400f00:	00401975 	.word	0x00401975
  400f04:	00408584 	.word	0x00408584
  400f08:	004085a4 	.word	0x004085a4
  400f0c:	0040102d 	.word	0x0040102d
  400f10:	004085b0 	.word	0x004085b0
  400f14:	004085cc 	.word	0x004085cc
  400f18:	00401c51 	.word	0x00401c51
  400f1c:	004085dc 	.word	0x004085dc
  400f20:	00401db9 	.word	0x00401db9
  400f24:	004085ec 	.word	0x004085ec
  400f28:	00401e95 	.word	0x00401e95
  400f2c:	004085fc 	.word	0x004085fc
  400f30:	00401fa1 	.word	0x00401fa1

00400f34 <enable_request>:

/*
* Service a State Request from Requesting ECU
*/
void enable_request(uint64_t payload){
	enable_mask = ((payload)) & ~error_mask;
  400f34:	4b04      	ldr	r3, [pc, #16]	; (400f48 <enable_request+0x14>)
  400f36:	681b      	ldr	r3, [r3, #0]
  400f38:	ea20 0003 	bic.w	r0, r0, r3
  400f3c:	4b03      	ldr	r3, [pc, #12]	; (400f4c <enable_request+0x18>)
  400f3e:	6018      	str	r0, [r3, #0]
	g_recv_timeout_cnt = 0;
  400f40:	2200      	movs	r2, #0
  400f42:	4b03      	ldr	r3, [pc, #12]	; (400f50 <enable_request+0x1c>)
  400f44:	601a      	str	r2, [r3, #0]
  400f46:	4770      	bx	lr
  400f48:	2000c38c 	.word	0x2000c38c
  400f4c:	2000c388 	.word	0x2000c388
  400f50:	2000c390 	.word	0x2000c390

00400f54 <ecu_eng_data>:
	//do this to ensure off request are serviced
	//TODO: someday refactor the port write code to make more sense
	//set_enable(~enable_mask, PDU_OFF_STATE);
}

void ecu_eng_data(uint64_t payload){
  400f54:	b082      	sub	sp, #8
	vehicle.RPM = LSB0W(payload) * ECU_RPM_SCALE;
  400f56:	b2c0      	uxtb	r0, r0
  400f58:	f44f 7316 	mov.w	r3, #600	; 0x258
  400f5c:	fb03 f000 	mul.w	r0, r3, r0
  400f60:	4b01      	ldr	r3, [pc, #4]	; (400f68 <ecu_eng_data+0x14>)
  400f62:	6018      	str	r0, [r3, #0]
}
  400f64:	b002      	add	sp, #8
  400f66:	4770      	bx	lr
  400f68:	2000c39c 	.word	0x2000c39c

00400f6c <ecu_vehicle_data>:

void ecu_vehicle_data(uint64_t payload){
  400f6c:	b082      	sub	sp, #8
	vehicle.fuel_pressure	= LSB0D(payload);
  400f6e:	4b03      	ldr	r3, [pc, #12]	; (400f7c <ecu_vehicle_data+0x10>)
  400f70:	7198      	strb	r0, [r3, #6]
	//PDU.batt_volt			= ( LSB1D(payload) << 8 ) | LSB2D(payload);
	vehicle.eng_status		= (Tst_bits(LSB3D( payload ), 1));
  400f72:	f3c0 6000 	ubfx	r0, r0, #24, #1
  400f76:	71d8      	strb	r0, [r3, #7]
}
  400f78:	b002      	add	sp, #8
  400f7a:	4770      	bx	lr
  400f7c:	2000c39c 	.word	0x2000c39c

00400f80 <pwm_request>:

void pwm_request(uint64_t payload){
  400f80:	b430      	push	{r4, r5}
  400f82:	b082      	sub	sp, #8
  400f84:	ac02      	add	r4, sp, #8
  400f86:	e964 0102 	strd	r0, r1, [r4, #-8]!
	
	for(int i = 0; i < NUM_HC_CHANNEL; i++)
  400f8a:	2300      	movs	r3, #0
		{
		pwm_request_arr[i] = ((uint8_t *)( &( payload ) ))[i];
  400f8c:	490c      	ldr	r1, [pc, #48]	; (400fc0 <pwm_request+0x40>)
		if( pwm_request_arr[i] > max_duty_cycle ) pwm_request_arr[i] = max_duty_cycle;
  400f8e:	4d0d      	ldr	r5, [pc, #52]	; (400fc4 <pwm_request+0x44>)
  400f90:	e007      	b.n	400fa2 <pwm_request+0x22>
		pwm_request_arr[i] = PWM_DUTY_CYCLE_OFFSET - pwm_request_arr[i];
  400f92:	5cca      	ldrb	r2, [r1, r3]
  400f94:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
  400f98:	b2d2      	uxtb	r2, r2
  400f9a:	54ca      	strb	r2, [r1, r3]
	for(int i = 0; i < NUM_HC_CHANNEL; i++)
  400f9c:	3301      	adds	r3, #1
  400f9e:	2b04      	cmp	r3, #4
  400fa0:	d00b      	beq.n	400fba <pwm_request+0x3a>
		pwm_request_arr[i] = ((uint8_t *)( &( payload ) ))[i];
  400fa2:	f814 2b01 	ldrb.w	r2, [r4], #1
  400fa6:	54ca      	strb	r2, [r1, r3]
		if( pwm_request_arr[i] > max_duty_cycle ) pwm_request_arr[i] = max_duty_cycle;
  400fa8:	5cca      	ldrb	r2, [r1, r3]
  400faa:	7828      	ldrb	r0, [r5, #0]
  400fac:	b2d2      	uxtb	r2, r2
  400fae:	4282      	cmp	r2, r0
  400fb0:	d9ef      	bls.n	400f92 <pwm_request+0x12>
  400fb2:	782a      	ldrb	r2, [r5, #0]
  400fb4:	b2d2      	uxtb	r2, r2
  400fb6:	54ca      	strb	r2, [r1, r3]
  400fb8:	e7eb      	b.n	400f92 <pwm_request+0x12>
		}
	
}
  400fba:	b002      	add	sp, #8
  400fbc:	bc30      	pop	{r4, r5}
  400fbe:	4770      	bx	lr
  400fc0:	20000018 	.word	0x20000018
  400fc4:	20000014 	.word	0x20000014

00400fc8 <unused_id>:

void unused_id(uint64_t payload){
  400fc8:	4770      	bx	lr
	...

00400fcc <handle_CAN>:
void handle_CAN(can_mb_conf_t mailbox){
  400fcc:	b084      	sub	sp, #16
  400fce:	b570      	push	{r4, r5, r6, lr}
  400fd0:	ac04      	add	r4, sp, #16
  400fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	payload.u32[0] = mailbox.ul_datal;
  400fd6:	980a      	ldr	r0, [sp, #40]	; 0x28
	payload.u32[1] = mailbox.ul_datah;
  400fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
	recieve_handler_parse( (mailbox.ul_id | CAN_MID_MIDvA(mailbox.ul_fid) )& CAN_MID_MIDvA_Msk )( payload.u64 );
  400fda:	4c11      	ldr	r4, [pc, #68]	; (401020 <handle_CAN+0x54>)
  400fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400fde:	ea04 4283 	and.w	r2, r4, r3, lsl #18
  400fe2:	9b08      	ldr	r3, [sp, #32]
  400fe4:	431a      	orrs	r2, r3
  400fe6:	4022      	ands	r2, r4
		if(recieve_dispatch_table[i].can_id == id) return recieve_dispatch_table[i].callback;
  400fe8:	f1b2 6f8d 	cmp.w	r2, #73924608	; 0x4680000
  400fec:	d011      	beq.n	401012 <handle_CAN+0x46>
  400fee:	2301      	movs	r3, #1
  400ff0:	461c      	mov	r4, r3
  400ff2:	4e0c      	ldr	r6, [pc, #48]	; (401024 <handle_CAN+0x58>)
  400ff4:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
  400ff8:	42aa      	cmp	r2, r5
  400ffa:	d00b      	beq.n	401014 <handle_CAN+0x48>
	for(uint8_t i = 0; i < num_can_handlers; i++ ){
  400ffc:	3301      	adds	r3, #1
  400ffe:	b2db      	uxtb	r3, r3
  401000:	461c      	mov	r4, r3
  401002:	2b03      	cmp	r3, #3
  401004:	ddf6      	ble.n	400ff4 <handle_CAN+0x28>
	return unused_id;
  401006:	4b08      	ldr	r3, [pc, #32]	; (401028 <handle_CAN+0x5c>)
	recieve_handler_parse( (mailbox.ul_id | CAN_MID_MIDvA(mailbox.ul_fid) )& CAN_MID_MIDvA_Msk )( payload.u64 );
  401008:	4798      	blx	r3
}
  40100a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40100e:	b004      	add	sp, #16
  401010:	4770      	bx	lr
	for(uint8_t i = 0; i < num_can_handlers; i++ ){
  401012:	2400      	movs	r4, #0
		if(recieve_dispatch_table[i].can_id == id) return recieve_dispatch_table[i].callback;
  401014:	4b03      	ldr	r3, [pc, #12]	; (401024 <handle_CAN+0x58>)
  401016:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  40101a:	6863      	ldr	r3, [r4, #4]
  40101c:	e7f4      	b.n	401008 <handle_CAN+0x3c>
  40101e:	bf00      	nop
  401020:	1ffc0000 	.word	0x1ffc0000
  401024:	0040861c 	.word	0x0040861c
  401028:	00400fc9 	.word	0x00400fc9

0040102c <can_thread>:
	UNUSED(payload);
}

void can_thread(void* pvParameters){
  40102c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401030:	b086      	sub	sp, #24
	
		static volatile uint32_t status = 0;
		TickType_t xLastWakeTime;
		const TickType_t xFrequency = TASK_10_HZ;
		
		xLastWakeTime = xTaskGetTickCount();
  401032:	4b35      	ldr	r3, [pc, #212]	; (401108 <can_thread+0xdc>)
  401034:	4798      	blx	r3
  401036:	9005      	str	r0, [sp, #20]
			{
				
			g_recv_timeout_cnt += xFrequency;

			//check enable mailbox(M0)
			status = can_get_status(PDU_CAN);
  401038:	4d34      	ldr	r5, [pc, #208]	; (40110c <can_thread+0xe0>)
  40103a:	4c35      	ldr	r4, [pc, #212]	; (401110 <can_thread+0xe4>)
			//can_mailbox_read(PDU_CAN, &can_mailbox[0]);
			//if( status & GLOBAL_MAILBOX_MASK){
			status = can_mailbox_get_status(PDU_CAN, ctz(ENABLE_MB));
  40103c:	4e35      	ldr	r6, [pc, #212]	; (401114 <can_thread+0xe8>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40103e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 40112c <can_thread+0x100>
			if ((status & CAN_MSR_MRDY) == CAN_MSR_MRDY)
				{
#ifdef CAN_REC_THREAD_LED
				ioport_toggle_pin_level(CAN_REC_THREAD_LED);
#endif
				can_mailbox_read(PDU_CAN, &can_mailbox[ctz(ENABLE_MB)]);
  401042:	4f35      	ldr	r7, [pc, #212]	; (401118 <can_thread+0xec>)
				handle_CAN(can_mailbox[ctz(ENABLE_MB)]);
  401044:	f107 0810 	add.w	r8, r7, #16
  401048:	e013      	b.n	401072 <can_thread+0x46>
				}


			//check pwm mailbox(M1)
			status = can_mailbox_get_status(PDU_CAN,  ctz(PWM_MB));
  40104a:	2101      	movs	r1, #1
  40104c:	4628      	mov	r0, r5
  40104e:	47b0      	blx	r6
  401050:	6020      	str	r0, [r4, #0]
			if ((status & CAN_MSR_MRDY) == CAN_MSR_MRDY)
  401052:	6823      	ldr	r3, [r4, #0]
  401054:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401058:	d134      	bne.n	4010c4 <can_thread+0x98>
				can_mailbox_read(PDU_CAN, &can_mailbox[ctz(PWM_MB)]);
				handle_CAN(can_mailbox[ctz(PWM_MB)]);
				}
				
			//if new messages grab data from rest of mailboxes
			status = can_mailbox_get_status(PDU_CAN,  ctz(REC_MB));
  40105a:	2102      	movs	r1, #2
  40105c:	4628      	mov	r0, r5
  40105e:	47b0      	blx	r6
  401060:	6020      	str	r0, [r4, #0]
			if ((status & CAN_MSR_MRDY) == CAN_MSR_MRDY)
  401062:	6823      	ldr	r3, [r4, #0]
  401064:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401068:	d13d      	bne.n	4010e6 <can_thread+0xba>
			}
			

			
			// wait
			vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(xFrequency));
  40106a:	2164      	movs	r1, #100	; 0x64
  40106c:	a805      	add	r0, sp, #20
  40106e:	4b2b      	ldr	r3, [pc, #172]	; (40111c <can_thread+0xf0>)
  401070:	4798      	blx	r3
			g_recv_timeout_cnt += xFrequency;
  401072:	4a2b      	ldr	r2, [pc, #172]	; (401120 <can_thread+0xf4>)
  401074:	6813      	ldr	r3, [r2, #0]
  401076:	3364      	adds	r3, #100	; 0x64
  401078:	6013      	str	r3, [r2, #0]
			status = can_get_status(PDU_CAN);
  40107a:	4628      	mov	r0, r5
  40107c:	4b29      	ldr	r3, [pc, #164]	; (401124 <can_thread+0xf8>)
  40107e:	4798      	blx	r3
  401080:	6020      	str	r0, [r4, #0]
			status = can_mailbox_get_status(PDU_CAN, ctz(ENABLE_MB));
  401082:	2100      	movs	r1, #0
  401084:	4628      	mov	r0, r5
  401086:	47b0      	blx	r6
  401088:	6020      	str	r0, [r4, #0]
			if ((status & CAN_MSR_MRDY) == CAN_MSR_MRDY)
  40108a:	6823      	ldr	r3, [r4, #0]
  40108c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401090:	d0db      	beq.n	40104a <can_thread+0x1e>
  401092:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
  401096:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
  40109a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40109e:	bf14      	ite	ne
  4010a0:	f8c9 3034 	strne.w	r3, [r9, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4010a4:	f8c9 3030 	streq.w	r3, [r9, #48]	; 0x30
				can_mailbox_read(PDU_CAN, &can_mailbox[ctz(ENABLE_MB)]);
  4010a8:	4639      	mov	r1, r7
  4010aa:	4628      	mov	r0, r5
  4010ac:	4b1e      	ldr	r3, [pc, #120]	; (401128 <can_thread+0xfc>)
  4010ae:	4798      	blx	r3
				handle_CAN(can_mailbox[ctz(ENABLE_MB)]);
  4010b0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
  4010b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4010b8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  4010bc:	f8df a070 	ldr.w	sl, [pc, #112]	; 401130 <can_thread+0x104>
  4010c0:	47d0      	blx	sl
  4010c2:	e7c2      	b.n	40104a <can_thread+0x1e>
				can_mailbox_read(PDU_CAN, &can_mailbox[ctz(PWM_MB)]);
  4010c4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 401134 <can_thread+0x108>
  4010c8:	4651      	mov	r1, sl
  4010ca:	4628      	mov	r0, r5
  4010cc:	4b16      	ldr	r3, [pc, #88]	; (401128 <can_thread+0xfc>)
  4010ce:	4798      	blx	r3
				handle_CAN(can_mailbox[ctz(PWM_MB)]);
  4010d0:	f10a 0310 	add.w	r3, sl, #16
  4010d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4010d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4010da:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  4010de:	f8df a050 	ldr.w	sl, [pc, #80]	; 401130 <can_thread+0x104>
  4010e2:	47d0      	blx	sl
  4010e4:	e7b9      	b.n	40105a <can_thread+0x2e>
				can_mailbox_read(PDU_CAN, &can_mailbox[ctz(REC_MB)]);
  4010e6:	f8df a050 	ldr.w	sl, [pc, #80]	; 401138 <can_thread+0x10c>
  4010ea:	4651      	mov	r1, sl
  4010ec:	4628      	mov	r0, r5
  4010ee:	4b0e      	ldr	r3, [pc, #56]	; (401128 <can_thread+0xfc>)
  4010f0:	4798      	blx	r3
				handle_CAN(can_mailbox[ctz(REC_MB)]);
  4010f2:	f10a 0310 	add.w	r3, sl, #16
  4010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4010f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  4010fc:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  401100:	f8df a02c 	ldr.w	sl, [pc, #44]	; 401130 <can_thread+0x104>
  401104:	47d0      	blx	sl
  401106:	e7b0      	b.n	40106a <can_thread+0x3e>
  401108:	00403805 	.word	0x00403805
  40110c:	40010000 	.word	0x40010000
  401110:	20000a68 	.word	0x20000a68
  401114:	00402399 	.word	0x00402399
  401118:	2000c414 	.word	0x2000c414
  40111c:	00403a59 	.word	0x00403a59
  401120:	2000c390 	.word	0x2000c390
  401124:	00402395 	.word	0x00402395
  401128:	0040243d 	.word	0x0040243d
  40112c:	400e0e00 	.word	0x400e0e00
  401130:	00400fcd 	.word	0x00400fcd
  401134:	2000c434 	.word	0x2000c434
  401138:	2000c454 	.word	0x2000c454

0040113c <CAN0_Handler>:
/*
* Handler for generic interrupts from PDU_CAN
* PDU is connected directly to vehicle ECU that requests PDU updates
* Interrupt source is detected and then handled as needed
*/
void CAN_HANDLER(void){
  40113c:	b570      	push	{r4, r5, r6, lr}
	* Local status variable for use in interrupt handler
	* Used to hold/ and store result of determining source of the 
	* Triggering interrupt
	*/
	uint32_t status;
	status = can_get_status(PDU_CAN);				//get the entire status register
  40113e:	4821      	ldr	r0, [pc, #132]	; (4011c4 <CAN0_Handler+0x88>)
  401140:	4b21      	ldr	r3, [pc, #132]	; (4011c8 <CAN0_Handler+0x8c>)
  401142:	4798      	blx	r3
	
	
	/*
	* Interrupt Triggered by CAN bus off
	*/	
	if ( status & (CAN_SR_BOFF | CAN_SR_AERR) ){
  401144:	f010 6f81 	tst.w	r0, #67633152	; 0x4080000
  401148:	d100      	bne.n	40114c <CAN0_Handler+0x10>
  40114a:	bd70      	pop	{r4, r5, r6, pc}
		UBaseType_t uxSavedInterruptStatus;

		
		enable_mask = PDU_TIMEOUT_MASK;
  40114c:	4c1f      	ldr	r4, [pc, #124]	; (4011cc <CAN0_Handler+0x90>)
  40114e:	2600      	movs	r6, #0
  401150:	6026      	str	r6, [r4, #0]
		set_enable(enable_mask, PDU_ON_STATE);
  401152:	6820      	ldr	r0, [r4, #0]
  401154:	2101      	movs	r1, #1
  401156:	4d1e      	ldr	r5, [pc, #120]	; (4011d0 <CAN0_Handler+0x94>)
  401158:	47a8      	blx	r5
		//do this to ensure off request are serviced
		//TODO: someday refactor the port write code to make more sense
		set_enable(~enable_mask, PDU_OFF_STATE);
  40115a:	6820      	ldr	r0, [r4, #0]
  40115c:	4631      	mov	r1, r6
  40115e:	43c0      	mvns	r0, r0
  401160:	47a8      	blx	r5
		PDU.error_flag = true;
  401162:	2201      	movs	r2, #1
  401164:	4b1b      	ldr	r3, [pc, #108]	; (4011d4 <CAN0_Handler+0x98>)
  401166:	715a      	strb	r2, [r3, #5]
		
		
		can_init(PDU_CAN, ul_sysclk, PDU_CAN_BAUD);		
  401168:	4c16      	ldr	r4, [pc, #88]	; (4011c4 <CAN0_Handler+0x88>)
  40116a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40116e:	4b1a      	ldr	r3, [pc, #104]	; (4011d8 <CAN0_Handler+0x9c>)
  401170:	6819      	ldr	r1, [r3, #0]
  401172:	4620      	mov	r0, r4
  401174:	4b19      	ldr	r3, [pc, #100]	; (4011dc <CAN0_Handler+0xa0>)
  401176:	4798      	blx	r3
				
		/* Disable all CAN interrupts. */
		can_disable_interrupt(PDU_CAN, CAN_DISABLE_ALL_INTERRUPT_MASK);
  401178:	f04f 31ff 	mov.w	r1, #4294967295
  40117c:	4620      	mov	r0, r4
  40117e:	4b18      	ldr	r3, [pc, #96]	; (4011e0 <CAN0_Handler+0xa4>)
  401180:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401182:	f3ef 8611 	mrs	r6, BASEPRI
  401186:	f04f 0350 	mov.w	r3, #80	; 0x50
  40118a:	f383 8811 	msr	BASEPRI, r3
  40118e:	f3bf 8f6f 	isb	sy
  401192:	f3bf 8f4f 	dsb	sy
		uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
		can_enable_autobaud_listen_mode(PDU_CAN);
  401196:	4620      	mov	r0, r4
  401198:	4b12      	ldr	r3, [pc, #72]	; (4011e4 <CAN0_Handler+0xa8>)
  40119a:	4798      	blx	r3
		//__disable_irq();
		while( ( can_get_status(PDU_CAN) & PDU_ALL_ERR_MASK ) );
  40119c:	4625      	mov	r5, r4
  40119e:	4c0a      	ldr	r4, [pc, #40]	; (4011c8 <CAN0_Handler+0x8c>)
  4011a0:	4628      	mov	r0, r5
  4011a2:	47a0      	blx	r4
  4011a4:	f010 5ff8 	tst.w	r0, #520093696	; 0x1f000000
  4011a8:	d1fa      	bne.n	4011a0 <CAN0_Handler+0x64>
		can_disable_autobaud_listen_mode(PDU_CAN);
  4011aa:	4c06      	ldr	r4, [pc, #24]	; (4011c4 <CAN0_Handler+0x88>)
  4011ac:	4620      	mov	r0, r4
  4011ae:	4b0e      	ldr	r3, [pc, #56]	; (4011e8 <CAN0_Handler+0xac>)
  4011b0:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4011b2:	f386 8811 	msr	BASEPRI, r6
		//__enable_irq();
		taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
		can_enable_interrupt(PDU_CAN, CAN_IER_BOFF);
  4011b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4011ba:	4620      	mov	r0, r4
  4011bc:	4b0b      	ldr	r3, [pc, #44]	; (4011ec <CAN0_Handler+0xb0>)
  4011be:	4798      	blx	r3
		
	}
  4011c0:	e7c3      	b.n	40114a <CAN0_Handler+0xe>
  4011c2:	bf00      	nop
  4011c4:	40010000 	.word	0x40010000
  4011c8:	00402395 	.word	0x00402395
  4011cc:	2000c388 	.word	0x2000c388
  4011d0:	004001e9 	.word	0x004001e9
  4011d4:	2000c380 	.word	0x2000c380
  4011d8:	2000c398 	.word	0x2000c398
  4011dc:	00402521 	.word	0x00402521
  4011e0:	00402391 	.word	0x00402391
  4011e4:	00402383 	.word	0x00402383
  4011e8:	00402379 	.word	0x00402379
  4011ec:	0040238d 	.word	0x0040238d

004011f0 <output_state_machine>:
		// wait
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(xFrequency));
		}
}

state_request output_state_machine(output_data_t* output_channel, uint32_t chan_num, is_config_t channel_is_config){
  4011f0:	b082      	sub	sp, #8
  4011f2:	b410      	push	{r4}
  4011f4:	ac01      	add	r4, sp, #4
  4011f6:	e884 000c 	stmia.w	r4, {r2, r3}
  4011fa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	//init/off
	if(output_channel->state == CHANNEL_OFF){
  4011fe:	7a43      	ldrb	r3, [r0, #9]
  401200:	b9db      	cbnz	r3, 40123a <output_state_machine+0x4a>
		if(Tst_bits( enable_mask, 1<<chan_num ) & !Tst_bits( error_mask, 1<<chan_num )) return ON_REQUEST;
  401202:	2301      	movs	r3, #1
  401204:	fa03 f101 	lsl.w	r1, r3, r1
  401208:	4b2e      	ldr	r3, [pc, #184]	; (4012c4 <output_state_machine+0xd4>)
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	4c2e      	ldr	r4, [pc, #184]	; (4012c8 <output_state_machine+0xd8>)
  40120e:	6824      	ldr	r4, [r4, #0]
  401210:	4219      	tst	r1, r3
  401212:	d006      	beq.n	401222 <output_state_machine+0x32>
  401214:	4221      	tst	r1, r4
  401216:	d104      	bne.n	401222 <output_state_machine+0x32>
  401218:	2002      	movs	r0, #2
	else if(output_channel->state == CHANNEL_OPEN){
		if(output_channel->current < IS_OPEN_MIN_HC) return OFF_REQUEST;
		}
	
	return NO_REQUEST;
}
  40121a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40121e:	b002      	add	sp, #8
  401220:	4770      	bx	lr
		else if(output_channel->current > channel_is_config.fault_min) return FAULT_TRANSITION;
  401222:	7980      	ldrb	r0, [r0, #6]
  401224:	4282      	cmp	r2, r0
  401226:	d201      	bcs.n	40122c <output_state_machine+0x3c>
  401228:	2005      	movs	r0, #5
  40122a:	e7f6      	b.n	40121a <output_state_machine+0x2a>
		else if(output_channel->current > channel_is_config.open_load_min) return OPEN_TRANSITION;
  40122c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	return NO_REQUEST;
  401230:	4283      	cmp	r3, r0
  401232:	bf34      	ite	cc
  401234:	2004      	movcc	r0, #4
  401236:	2000      	movcs	r0, #0
  401238:	e7ef      	b.n	40121a <output_state_machine+0x2a>
	else if(output_channel->state == CHANNEL_ON){
  40123a:	2b01      	cmp	r3, #1
  40123c:	d008      	beq.n	401250 <output_state_machine+0x60>
	else if(output_channel->state == CHANNEL_OVER_CURRENT){
  40123e:	2b02      	cmp	r3, #2
  401240:	d021      	beq.n	401286 <output_state_machine+0x96>
	else if(output_channel->state == CHANNEL_FAULT){
  401242:	2b04      	cmp	r3, #4
  401244:	d02e      	beq.n	4012a4 <output_state_machine+0xb4>
		if(Tst_bits( enable_mask, 1<<chan_num ) & !Tst_bits( error_mask, 1<<chan_num )) return ON_REQUEST;
  401246:	2b03      	cmp	r3, #3
  401248:	bf14      	ite	ne
  40124a:	2000      	movne	r0, #0
  40124c:	2001      	moveq	r0, #1
  40124e:	e7e4      	b.n	40121a <output_state_machine+0x2a>
		if(!Tst_bits(enable_mask, 1<<chan_num)){
  401250:	4b1c      	ldr	r3, [pc, #112]	; (4012c4 <output_state_machine+0xd4>)
  401252:	681c      	ldr	r4, [r3, #0]
  401254:	2301      	movs	r3, #1
  401256:	408b      	lsls	r3, r1
  401258:	4223      	tst	r3, r4
  40125a:	d005      	beq.n	401268 <output_state_machine+0x78>
		else if(output_channel->current > channel_is_config.fault_min){
  40125c:	7983      	ldrb	r3, [r0, #6]
  40125e:	b29c      	uxth	r4, r3
  401260:	42a2      	cmp	r2, r4
  401262:	d205      	bcs.n	401270 <output_state_machine+0x80>
			return FAULT_TRANSITION;
  401264:	2005      	movs	r0, #5
  401266:	e7d8      	b.n	40121a <output_state_machine+0x2a>
			output_channel->overcurrent_time = 0;
  401268:	2300      	movs	r3, #0
  40126a:	6003      	str	r3, [r0, #0]
			return OFF_REQUEST;
  40126c:	2001      	movs	r0, #1
  40126e:	e7d4      	b.n	40121a <output_state_machine+0x2a>
		else if(output_channel->current				> config[chan_num].current_limit){
  401270:	4a16      	ldr	r2, [pc, #88]	; (4012cc <output_state_machine+0xdc>)
  401272:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  401276:	790a      	ldrb	r2, [r1, #4]
  401278:	429a      	cmp	r2, r3
  40127a:	d21e      	bcs.n	4012ba <output_state_machine+0xca>
			output_channel->overcurrent_time++;
  40127c:	6803      	ldr	r3, [r0, #0]
  40127e:	3301      	adds	r3, #1
  401280:	6003      	str	r3, [r0, #0]
	return NO_REQUEST;
  401282:	2000      	movs	r0, #0
  401284:	e7c9      	b.n	40121a <output_state_machine+0x2a>
		if(!Tst_bits(enable_mask, 1<<chan_num)) 			return OFF_REQUEST;
  401286:	2301      	movs	r3, #1
  401288:	fa03 f101 	lsl.w	r1, r3, r1
  40128c:	4b0d      	ldr	r3, [pc, #52]	; (4012c4 <output_state_machine+0xd4>)
  40128e:	681b      	ldr	r3, [r3, #0]
  401290:	4219      	tst	r1, r3
  401292:	d014      	beq.n	4012be <output_state_machine+0xce>
		else if(Tst_bits(soft_restart_mask, 1<<chan_num))	return ON_REQUEST;
  401294:	4b0e      	ldr	r3, [pc, #56]	; (4012d0 <output_state_machine+0xe0>)
  401296:	681b      	ldr	r3, [r3, #0]
  401298:	4019      	ands	r1, r3
	return NO_REQUEST;
  40129a:	2900      	cmp	r1, #0
  40129c:	bf14      	ite	ne
  40129e:	2002      	movne	r0, #2
  4012a0:	2000      	moveq	r0, #0
  4012a2:	e7ba      	b.n	40121a <output_state_machine+0x2a>
		if(Tst_bits(soft_restart_mask, 1<<chan_num)) return CLEAR_FAULT_TRANSITION;
  4012a4:	4b0a      	ldr	r3, [pc, #40]	; (4012d0 <output_state_machine+0xe0>)
  4012a6:	681a      	ldr	r2, [r3, #0]
  4012a8:	2301      	movs	r3, #1
  4012aa:	fa03 f101 	lsl.w	r1, r3, r1
  4012ae:	4011      	ands	r1, r2
	return NO_REQUEST;
  4012b0:	2900      	cmp	r1, #0
  4012b2:	bf14      	ite	ne
  4012b4:	2006      	movne	r0, #6
  4012b6:	2000      	moveq	r0, #0
  4012b8:	e7af      	b.n	40121a <output_state_machine+0x2a>
  4012ba:	2000      	movs	r0, #0
  4012bc:	e7ad      	b.n	40121a <output_state_machine+0x2a>
		if(!Tst_bits(enable_mask, 1<<chan_num)) 			return OFF_REQUEST;
  4012be:	2001      	movs	r0, #1
  4012c0:	e7ab      	b.n	40121a <output_state_machine+0x2a>
  4012c2:	bf00      	nop
  4012c4:	2000c388 	.word	0x2000c388
  4012c8:	2000c38c 	.word	0x2000c38c
  4012cc:	2000c854 	.word	0x2000c854
  4012d0:	2000c394 	.word	0x2000c394

004012d4 <get_is>:
 *	scale factor to get the desired significant digit, ie scale factor of 10 encodes 7.3 as 73 
 *	for CAN Bus transmitting
 *
 *	If the current conversion detects a fault returns uint8_t_MAX
 */
void get_is( Afec *const afec ,enum afec_channel_num pdu_channel, is_config_t channel_is_config, uint8_t* current ){	
  4012d4:	b082      	sub	sp, #8
  4012d6:	e88d 000c 	stmia.w	sp, {r2, r3}
	
	while(  !(afec_get_interrupt_status( afec ) & ( 1 << pdu_channel )));
  4012da:	2201      	movs	r2, #1
  4012dc:	408a      	lsls	r2, r1
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4012de:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4012e0:	421a      	tst	r2, r3
  4012e2:	d0fc      	beq.n	4012de <get_is+0xa>
	afec->AFEC_CSELR = afec_ch;
  4012e4:	6641      	str	r1, [r0, #100]	; 0x64
	return afec->AFEC_CDR;
  4012e6:	ed90 7a1a 	vldr	s14, [r0, #104]	; 0x68
	float conversion_result = afec_channel_get_value( afec, pdu_channel );
  4012ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	
	//transform AFEC result into mV
	conversion_result = conversion_result * AFEC_conversion_factor_mV;
  4012ee:	eddf 7a1a 	vldr	s15, [pc, #104]	; 401358 <get_is+0x84>
  4012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
	conversion_result = conversion_result - channel_is_config.offset;
  4012f6:	eddd 7a02 	vldr	s15, [sp, #8]
  4012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4012fe:	ee37 7a67 	vsub.f32	s14, s14, s15
	 //*  indication, this is either a short circuit event or fet is over temp
	 //*/
	//if ( conversion_result > IS_FAULT_MIN_HC) *current = UINT8_MAX; // should change this behaviour because this could also be a valid returned value after value is scaled
	
	//transform into number of mA
	conversion_result = conversion_result / channel_is_config.conversion_factor;
  401302:	eddd 7a01 	vldr	s15, [sp, #4]
  401306:	eef8 6a67 	vcvt.f32.u32	s13, s15
  40130a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	
	//multiply by differential ratio to find load A
	conversion_result = conversion_result * channel_is_config.follower_ratio;
  40130e:	ed9d 7a00 	vldr	s14, [sp]
  401312:	ee27 7a87 	vmul.f32	s14, s15, s14
	conversion_result = conversion_result * channel_is_config.scale_factor;
  401316:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40131a:	ee07 3a90 	vmov	s15, r3
  40131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401322:	ee67 7a87 	vmul.f32	s15, s15, s14
		
	//if the converted amperage is 0 or negative due to not perfect offset calibration
	conversion_result = max(0, conversion_result);
  401326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40132e:	d410      	bmi.n	401352 <get_is+0x7e>
	//clamp value to size of data structure
	conversion_result = min(UINT8_MAX+1, conversion_result);
  401330:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 40135c <get_is+0x88>
  401334:	eef4 7a47 	vcmp.f32	s15, s14
  401338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40133c:	bfc8      	it	gt
  40133e:	eef0 7a47 	vmovgt.f32	s15, s14
	/*
	 *	return the converted value
	 *	The value is multiplied by the desired scale factor
	 *	to transmit the desired significant digits
	 */
	(*current) = (uint8_t)conversion_result;
  401342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  401346:	ee17 3a90 	vmov	r3, s15
  40134a:	9a05      	ldr	r2, [sp, #20]
  40134c:	7013      	strb	r3, [r2, #0]
	}
  40134e:	b002      	add	sp, #8
  401350:	4770      	bx	lr
	conversion_result = max(0, conversion_result);
  401352:	eddf 7a03 	vldr	s15, [pc, #12]	; 401360 <get_is+0x8c>
  401356:	e7f4      	b.n	401342 <get_is+0x6e>
  401358:	3d4e4ce5 	.word	0x3d4e4ce5
  40135c:	43800000 	.word	0x43800000
	...

00401368 <get_fet_temp>:
	

/*
 *	Procedure: get_fet_temp
 */
void get_fet_temp( Afec *const afec ,enum afec_channel_num afec_channel, uint8_t* temp){	
  401368:	b530      	push	{r4, r5, lr}
  40136a:	b085      	sub	sp, #20
  40136c:	4614      	mov	r4, r2
	
	while(  !(afec_get_interrupt_status(afec) & (1 << afec_channel))  );
  40136e:	2201      	movs	r2, #1
  401370:	408a      	lsls	r2, r1
	return afec->AFEC_ISR;
  401372:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401374:	421a      	tst	r2, r3
  401376:	d0fc      	beq.n	401372 <get_fet_temp+0xa>
	afec->AFEC_CSELR = afec_ch;
  401378:	6641      	str	r1, [r0, #100]	; 0x64
	return afec->AFEC_CDR;
  40137a:	edd0 7a1a 	vldr	s15, [r0, #104]	; 0x68
	volatile float conversion_result = afec_channel_get_value(afec, afec_channel);
  40137e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  401382:	edcd 7a03 	vstr	s15, [sp, #12]
	volatile float tKelvin = 0.0;
  401386:	2300      	movs	r3, #0
  401388:	9302      	str	r3, [sp, #8]
	
	// Calculate thermistor R
	conversion_result = (( AFEC_DIGITAL_MAX / conversion_result ) - 1 ) * ( R_BALANCE);
  40138a:	ed9d 7a03 	vldr	s14, [sp, #12]
  40138e:	eddf 6a20 	vldr	s13, [pc, #128]	; 401410 <get_fet_temp+0xa8>
  401392:	eec6 7a87 	vdiv.f32	s15, s13, s14
  401396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40139a:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40139e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 401414 <get_fet_temp+0xac>
  4013a2:	ee67 7a87 	vmul.f32	s15, s15, s14
  4013a6:	edcd 7a03 	vstr	s15, [sp, #12]
	tKelvin = (BETA * ROOM_TEMP) / 
            (BETA + (ROOM_TEMP * log10f(conversion_result / T_NOMINAL)));		
  4013aa:	eddd 7a03 	vldr	s15, [sp, #12]
  4013ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4013b2:	ee16 0a90 	vmov	r0, s13
  4013b6:	4b18      	ldr	r3, [pc, #96]	; (401418 <get_fet_temp+0xb0>)
  4013b8:	4798      	blx	r3
  4013ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 40141c <get_fet_temp+0xb4>
  4013be:	ee07 0a10 	vmov	s14, r0
  4013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
  4013c6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 401420 <get_fet_temp+0xb8>
  4013ca:	ee77 7a87 	vadd.f32	s15, s15, s14
	tKelvin = (BETA * ROOM_TEMP) / 
  4013ce:	eddf 6a15 	vldr	s13, [pc, #84]	; 401424 <get_fet_temp+0xbc>
  4013d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  4013d6:	ed8d 7a02 	vstr	s14, [sp, #8]

	
	*temp = (uint8_t)tKelvin - 273.15;;
  4013da:	eddd 7a02 	vldr	s15, [sp, #8]
  4013de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4013e2:	edcd 7a01 	vstr	s15, [sp, #4]
  4013e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
  4013ea:	4b0f      	ldr	r3, [pc, #60]	; (401428 <get_fet_temp+0xc0>)
  4013ec:	4798      	blx	r3
  4013ee:	a306      	add	r3, pc, #24	; (adr r3, 401408 <get_fet_temp+0xa0>)
  4013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f4:	4d0d      	ldr	r5, [pc, #52]	; (40142c <get_fet_temp+0xc4>)
  4013f6:	47a8      	blx	r5
  4013f8:	4b0d      	ldr	r3, [pc, #52]	; (401430 <get_fet_temp+0xc8>)
  4013fa:	4798      	blx	r3
  4013fc:	7020      	strb	r0, [r4, #0]
	}
  4013fe:	b005      	add	sp, #20
  401400:	bd30      	pop	{r4, r5, pc}
  401402:	bf00      	nop
  401404:	f3af 8000 	nop.w
  401408:	66666666 	.word	0x66666666
  40140c:	40711266 	.word	0x40711266
  401410:	477ff000 	.word	0x477ff000
  401414:	461c4000 	.word	0x461c4000
  401418:	00404221 	.word	0x00404221
  40141c:	43950000 	.word	0x43950000
  401420:	45866000 	.word	0x45866000
  401424:	499c6bc0 	.word	0x499c6bc0
  401428:	004048ed 	.word	0x004048ed
  40142c:	00404651 	.word	0x00404651
  401430:	00404ddd 	.word	0x00404ddd

00401434 <get_chip_temp>:
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401434:	4b1e      	ldr	r3, [pc, #120]	; (4014b0 <get_chip_temp+0x7c>)
  401436:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40143a:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40143c:	2202      	movs	r2, #2
  40143e:	601a      	str	r2, [r3, #0]
	return afec->AFEC_ISR;
  401440:	461a      	mov	r2, r3
  401442:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
	float ul_temp;
	
	afec_channel_enable(AFEC0, AFEC_TEMPERATURE_SENSOR);
	afec_start_software_conversion( AFEC0 );
	while( !(afec_get_interrupt_status( AFEC0 ) & ( 1 << AFEC_TEMPERATURE_SENSOR)) );
  401444:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401448:	d0fb      	beq.n	401442 <get_chip_temp+0xe>
	afec->AFEC_CSELR = afec_ch;
  40144a:	4b19      	ldr	r3, [pc, #100]	; (4014b0 <get_chip_temp+0x7c>)
  40144c:	220f      	movs	r2, #15
  40144e:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  401450:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68

	ul_temp = afec_channel_get_value(AFEC0, AFEC_TEMPERATURE_SENSOR);	
  401454:	eef8 7a67 	vcvt.f32.u32	s15, s15
	
	ul_temp  = ul_temp * 3300 / (4095 * 16);// AFEC_conversion_factor;
  401458:	ed9f 7a16 	vldr	s14, [pc, #88]	; 4014b4 <get_chip_temp+0x80>
  40145c:	ee67 7a87 	vmul.f32	s15, s15, s14
  401460:	eddf 6a15 	vldr	s13, [pc, #84]	; 4014b8 <get_chip_temp+0x84>
  401464:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	/*
	* According to datasheet, The output voltage VT = 1.44V at 27C
	* and the temperature slope dVT/dT = 4.7 mV/C
	*/
	ul_temp =  (ul_temp - 1440)  * 100 / 470 + 27;
  401468:	eddf 7a14 	vldr	s15, [pc, #80]	; 4014bc <get_chip_temp+0x88>
  40146c:	ee37 7a67 	vsub.f32	s14, s14, s15
  401470:	eddf 7a13 	vldr	s15, [pc, #76]	; 4014c0 <get_chip_temp+0x8c>
  401474:	ee27 7a27 	vmul.f32	s14, s14, s15
  401478:	eddf 6a12 	vldr	s13, [pc, #72]	; 4014c4 <get_chip_temp+0x90>
  40147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
  401480:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
  401484:	ee77 7a87 	vadd.f32	s15, s15, s14
	
	//basically shit is fucked
	if( ul_temp > UINT8_MAX ) ul_temp = UINT8_MAX;
  401488:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 4014c8 <get_chip_temp+0x94>
  40148c:	eef4 7a47 	vcmp.f32	s15, s14
  401490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401494:	bfc8      	it	gt
  401496:	eef0 7a47 	vmovgt.f32	s15, s14
	
	*(temp) = (uint8_t)ul_temp;
  40149a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40149e:	ee17 3a90 	vmov	r3, s15
  4014a2:	7003      	strb	r3, [r0, #0]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4014a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4014a8:	4b01      	ldr	r3, [pc, #4]	; (4014b0 <get_chip_temp+0x7c>)
  4014aa:	619a      	str	r2, [r3, #24]
  4014ac:	4770      	bx	lr
  4014ae:	bf00      	nop
  4014b0:	400b0000 	.word	0x400b0000
  4014b4:	454e4000 	.word	0x454e4000
  4014b8:	477ff000 	.word	0x477ff000
  4014bc:	44b40000 	.word	0x44b40000
  4014c0:	42c80000 	.word	0x42c80000
  4014c4:	43eb0000 	.word	0x43eb0000
  4014c8:	437f0000 	.word	0x437f0000

004014cc <get_system_voltages>:
	afec_channel_disable(AFEC0, AFEC_TEMPERATURE_SENSOR);
}

void get_system_voltages(uint16_t* batt_volt, uint16_t* supply_volt){
  4014cc:	b084      	sub	sp, #16
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4014ce:	4b46      	ldr	r3, [pc, #280]	; (4015e8 <get_system_voltages+0x11c>)
  4014d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4014d4:	615a      	str	r2, [r3, #20]
  4014d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4014da:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  4014dc:	2202      	movs	r2, #2
  4014de:	601a      	str	r2, [r3, #0]
	return afec->AFEC_ISR;
  4014e0:	461a      	mov	r2, r3
  4014e2:	6b13      	ldr	r3, [r2, #48]	; 0x30


	afec_start_software_conversion( PDU_AFEC );
	//TODO: make this not hardcoded, this works becuase the Supply monitor channel number is higher
	// and all afec conversions are done in numerical order of enabled channels
	while( !(afec_get_interrupt_status( PDU_AFEC ) & ( (1 << SUPPLY_MONITOR) )) );
  4014e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4014e8:	d0fb      	beq.n	4014e2 <get_system_voltages+0x16>
	afec->AFEC_CSELR = afec_ch;
  4014ea:	4b3f      	ldr	r3, [pc, #252]	; (4015e8 <get_system_voltages+0x11c>)
  4014ec:	220d      	movs	r2, #13
  4014ee:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4014f0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68

	tmp_supply = afec_channel_get_value( PDU_AFEC, SUPPLY_MONITOR );
  4014f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4014f8:	edcd 7a02 	vstr	s15, [sp, #8]
	afec->AFEC_CSELR = afec_ch;
  4014fc:	220c      	movs	r2, #12
  4014fe:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  401500:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
	tmp_batt   = afec_channel_get_value( PDU_AFEC, BATT_MONITOR );
  401504:	eef8 7a67 	vcvt.f32.u32	s15, s15
  401508:	edcd 7a03 	vstr	s15, [sp, #12]

	tmp_supply 	= ( tmp_supply *  AFEC_conversion_factor_mV ) / AFEC_mV_to_V;
  40150c:	ed9d 7a02 	vldr	s14, [sp, #8]
  401510:	ed9f 6a36 	vldr	s12, [pc, #216]	; 4015ec <get_system_voltages+0x120>
  401514:	ee27 7a06 	vmul.f32	s14, s14, s12
  401518:	eddf 6a35 	vldr	s13, [pc, #212]	; 4015f0 <get_system_voltages+0x124>
  40151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
  401520:	edcd 7a02 	vstr	s15, [sp, #8]
	tmp_batt	= ( tmp_batt * AFEC_conversion_factor_mV ) / AFEC_mV_to_V;
  401524:	eddd 7a03 	vldr	s15, [sp, #12]
  401528:	ee67 7a86 	vmul.f32	s15, s15, s12
  40152c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  401530:	ed8d 7a03 	vstr	s14, [sp, #12]

	tmp_supply 	= ( tmp_supply * ( SUPPLY_MONITOR_R1 + SUPPLY_MONITOR_R2) ) / SUPPLY_MONITOR_R2;
  401534:	eddd 7a02 	vldr	s15, [sp, #8]
  401538:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 4015f4 <get_system_voltages+0x128>
  40153c:	ee67 7a87 	vmul.f32	s15, s15, s14
  401540:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 4015f8 <get_system_voltages+0x12c>
  401544:	eec7 6a87 	vdiv.f32	s13, s15, s14
  401548:	edcd 6a02 	vstr	s13, [sp, #8]
	tmp_batt 	= ( tmp_batt * ( BATTERY_MONITOR_R1 + BATTERY_MONITOR_R2) ) / BATTERY_MONITOR_R2;
  40154c:	eddd 7a03 	vldr	s15, [sp, #12]
  401550:	eddf 6a2a 	vldr	s13, [pc, #168]	; 4015fc <get_system_voltages+0x130>
  401554:	ee67 7aa6 	vmul.f32	s15, s15, s13
  401558:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40155c:	edcd 6a03 	vstr	s13, [sp, #12]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  401560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401564:	619a      	str	r2, [r3, #24]
  401566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40156a:	619a      	str	r2, [r3, #24]

	afec_channel_disable( PDU_AFEC, BATT_MONITOR );
	afec_channel_disable( PDU_AFEC, SUPPLY_MONITOR );


	*batt_volt		= min((uint16_t)(tmp_batt * VOLTAGE_SCALE_FACTOR ), UINT16_MAX);
  40156c:	eddd 7a03 	vldr	s15, [sp, #12]
  401570:	ed9f 7a23 	vldr	s14, [pc, #140]	; 401600 <get_system_voltages+0x134>
  401574:	ee67 7a87 	vmul.f32	s15, s15, s14
  401578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40157c:	edcd 7a01 	vstr	s15, [sp, #4]
  401580:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  401584:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401588:	4293      	cmp	r3, r2
  40158a:	d027      	beq.n	4015dc <get_system_voltages+0x110>
  40158c:	eddd 7a03 	vldr	s15, [sp, #12]
  401590:	ee67 7a87 	vmul.f32	s15, s15, s14
  401594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  401598:	edcd 7a01 	vstr	s15, [sp, #4]
  40159c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4015a0:	8003      	strh	r3, [r0, #0]
	*supply_volt	= min((uint16_t)(tmp_supply * VOLTAGE_SCALE_FACTOR ), UINT16_MAX);
  4015a2:	eddd 7a02 	vldr	s15, [sp, #8]
  4015a6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 401600 <get_system_voltages+0x134>
  4015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
  4015ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4015b2:	edcd 7a01 	vstr	s15, [sp, #4]
  4015b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4015ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4015be:	4293      	cmp	r3, r2
  4015c0:	d00f      	beq.n	4015e2 <get_system_voltages+0x116>
  4015c2:	eddd 7a02 	vldr	s15, [sp, #8]
  4015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
  4015ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4015ce:	edcd 7a01 	vstr	s15, [sp, #4]
  4015d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4015d6:	800b      	strh	r3, [r1, #0]
}
  4015d8:	b004      	add	sp, #16
  4015da:	4770      	bx	lr
	*batt_volt		= min((uint16_t)(tmp_batt * VOLTAGE_SCALE_FACTOR ), UINT16_MAX);
  4015dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4015e0:	e7de      	b.n	4015a0 <get_system_voltages+0xd4>
	*supply_volt	= min((uint16_t)(tmp_supply * VOLTAGE_SCALE_FACTOR ), UINT16_MAX);
  4015e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4015e6:	e7f6      	b.n	4015d6 <get_system_voltages+0x10a>
  4015e8:	400b0000 	.word	0x400b0000
  4015ec:	3d4e4ce5 	.word	0x3d4e4ce5
  4015f0:	447a0000 	.word	0x447a0000
  4015f4:	4612e000 	.word	0x4612e000
  4015f8:	4592e000 	.word	0x4592e000
  4015fc:	46a1b800 	.word	0x46a1b800
  401600:	42c80000 	.word	0x42c80000

00401604 <soft_restart>:


void soft_restart(pdu_enable_index channel_num, uint32_t latch_time)
{
  401604:	b538      	push	{r3, r4, r5, lr}
	//__disable_irq();
	if(channel_num <= NUM_HC_CHANNEL){
  401606:	2804      	cmp	r0, #4
  401608:	d80f      	bhi.n	40162a <soft_restart+0x26>
		ioport_set_port_level(PDU_ENABLE_PORT, (1<<channel_num), PDU_OFF_STATE );	
  40160a:	2401      	movs	r4, #1
  40160c:	4084      	lsls	r4, r0
		base->PIO_CODR = mask;
  40160e:	4d0c      	ldr	r5, [pc, #48]	; (401640 <soft_restart+0x3c>)
  401610:	636c      	str	r4, [r5, #52]	; 0x34

	/*
	 *	Delay to allow latch in powerfet to reset
	 */
	
	vTaskDelay(pdMS_TO_TICKS(latch_time));
  401612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401616:	fb00 f001 	mul.w	r0, r0, r1
  40161a:	490a      	ldr	r1, [pc, #40]	; (401644 <soft_restart+0x40>)
  40161c:	fba1 3000 	umull	r3, r0, r1, r0
  401620:	0980      	lsrs	r0, r0, #6
  401622:	4b09      	ldr	r3, [pc, #36]	; (401648 <soft_restart+0x44>)
  401624:	4798      	blx	r3
		base->PIO_SODR = mask;
  401626:	632c      	str	r4, [r5, #48]	; 0x30

	if(channel_num <= NUM_HC_CHANNEL){
		ioport_set_port_level(PDU_ENABLE_PORT, (1<<channel_num), PDU_ON_STATE  );
		}
	
}
  401628:	bd38      	pop	{r3, r4, r5, pc}
	vTaskDelay(pdMS_TO_TICKS(latch_time));
  40162a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40162e:	fb00 f001 	mul.w	r0, r0, r1
  401632:	4904      	ldr	r1, [pc, #16]	; (401644 <soft_restart+0x40>)
  401634:	fba1 3000 	umull	r3, r0, r1, r0
  401638:	0980      	lsrs	r0, r0, #6
  40163a:	4b03      	ldr	r3, [pc, #12]	; (401648 <soft_restart+0x44>)
  40163c:	4798      	blx	r3
  40163e:	bd38      	pop	{r3, r4, r5, pc}
  401640:	400e1400 	.word	0x400e1400
  401644:	10624dd3 	.word	0x10624dd3
  401648:	00403b05 	.word	0x00403b05

0040164c <HC_thread>:
void HC_thread(void* pvParameters){
  40164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401650:	b095      	sub	sp, #84	; 0x54
	pdu_enable_index channel_num = (uint32_t) pvParameters;
  401652:	b2c2      	uxtb	r2, r0
	is_config_t channel_is_config = {
  401654:	4bac      	ldr	r3, [pc, #688]	; (401908 <HC_thread+0x2bc>)
  401656:	930e      	str	r3, [sp, #56]	; 0x38
  401658:	23dc      	movs	r3, #220	; 0xdc
  40165a:	930f      	str	r3, [sp, #60]	; 0x3c
  40165c:	4614      	mov	r4, r2
		.offset				= PDU_AFEC_channel_offset[channel_num],
  40165e:	4bab      	ldr	r3, [pc, #684]	; (40190c <HC_thread+0x2c0>)
	is_config_t channel_is_config = {
  401660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401664:	9310      	str	r3, [sp, #64]	; 0x40
  401666:	f240 33cf 	movw	r3, #975	; 0x3cf
  40166a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  40166e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  401672:	230a      	movs	r3, #10
  401674:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	outputs[channel_num].state = CHANNEL_OFF;
  401678:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 401938 <HC_thread+0x2ec>
  40167c:	0055      	lsls	r5, r2, #1
  40167e:	18ae      	adds	r6, r5, r2
  401680:	eb08 0686 	add.w	r6, r8, r6, lsl #2
  401684:	2000      	movs	r0, #0
  401686:	7270      	strb	r0, [r6, #9]
	config[channel_num].current_limit = curr_limits[channel_num] * SCALE_FACTOR_HC;
  401688:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 401968 <HC_thread+0x31c>
  40168c:	00d7      	lsls	r7, r2, #3
  40168e:	eb0e 0107 	add.w	r1, lr, r7
  401692:	4b9f      	ldr	r3, [pc, #636]	; (401910 <HC_thread+0x2c4>)
  401694:	920a      	str	r2, [sp, #40]	; 0x28
  401696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40169a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40169e:	005b      	lsls	r3, r3, #1
  4016a0:	710b      	strb	r3, [r1, #4]
	config[channel_num].inrush_delay = INRUSH_AFEC_DELAY;
  4016a2:	2314      	movs	r3, #20
  4016a4:	f84e 3032 	str.w	r3, [lr, r2, lsl #3]
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
  4016a8:	4b9a      	ldr	r3, [pc, #616]	; (401914 <HC_thread+0x2c8>)
  4016aa:	4798      	blx	r3
  4016ac:	9013      	str	r0, [sp, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
  4016ae:	4b9a      	ldr	r3, [pc, #616]	; (401918 <HC_thread+0x2cc>)
  4016b0:	4798      	blx	r3
  4016b2:	900d      	str	r0, [sp, #52]	; 0x34
  4016b4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4016b6:	9105      	str	r1, [sp, #20]
  4016b8:	186b      	adds	r3, r5, r1
  4016ba:	009b      	lsls	r3, r3, #2
		get_is(IS_AFEC, HC_AFEC_channel_list[channel_num], channel_is_config, &(outputs[channel_num].current));
  4016bc:	1d9a      	adds	r2, r3, #6
  4016be:	4442      	add	r2, r8
  4016c0:	9206      	str	r2, [sp, #24]
		get_fet_temp(IS_AFEC, HC_temp_channel_list[channel_num], &(outputs[channel_num].temp));
  4016c2:	3308      	adds	r3, #8
  4016c4:	4443      	add	r3, r8
  4016c6:	9307      	str	r3, [sp, #28]
			pwm_channel_update_duty(PDU_PWM, &hc_pwm_channel[channel_num], hc_pwm_channel[channel_num].ul_duty);
  4016c8:	1a7f      	subs	r7, r7, r1
  4016ca:	4b94      	ldr	r3, [pc, #592]	; (40191c <HC_thread+0x2d0>)
  4016cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  4016d0:	9304      	str	r3, [sp, #16]
		state_request req = output_state_machine(&outputs[channel_num], channel_num, channel_is_config);
  4016d2:	9608      	str	r6, [sp, #32]
				Set_bits(error_mask, (1<<channel_num));
  4016d4:	2301      	movs	r3, #1
  4016d6:	408b      	lsls	r3, r1
  4016d8:	9309      	str	r3, [sp, #36]	; 0x24
				Clr_bits(error_mask, (1<<channel_num));
  4016da:	43db      	mvns	r3, r3
  4016dc:	930b      	str	r3, [sp, #44]	; 0x2c
		xSemaphoreTake(afec_semaphore, portMAX_DELAY );
  4016de:	f8df a28c 	ldr.w	sl, [pc, #652]	; 40196c <HC_thread+0x320>
		afec_channel_enable(IS_AFEC, HC_AFEC_channel_list[channel_num]);
  4016e2:	f8df b28c 	ldr.w	fp, [pc, #652]	; 401970 <HC_thread+0x324>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4016e6:	f64f 77ff 	movw	r7, #65535	; 0xffff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4016ea:	4d8d      	ldr	r5, [pc, #564]	; (401920 <HC_thread+0x2d4>)
		if ( hc_pwm_channel[channel_num].ul_duty != pwm_request_arr[channel_num] )
  4016ec:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
  4016f0:	4b8a      	ldr	r3, [pc, #552]	; (40191c <HC_thread+0x2d0>)
  4016f2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  4016f6:	46a1      	mov	r9, r4
  4016f8:	e03d      	b.n	401776 <HC_thread+0x12a>
				pwm_channel_enable(PWM, pwm_assignment[channel_num]);
  4016fa:	4b8a      	ldr	r3, [pc, #552]	; (401924 <HC_thread+0x2d8>)
  4016fc:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
  401700:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401704:	4b88      	ldr	r3, [pc, #544]	; (401928 <HC_thread+0x2dc>)
  401706:	4798      	blx	r3
				for(int i = 100; i > pwm_request_arr[channel_num]; i-=10){
  401708:	4b88      	ldr	r3, [pc, #544]	; (40192c <HC_thread+0x2e0>)
  40170a:	f813 3009 	ldrb.w	r3, [r3, r9]
  40170e:	b2db      	uxtb	r3, r3
  401710:	2b63      	cmp	r3, #99	; 0x63
  401712:	dc10      	bgt.n	401736 <HC_thread+0xea>
  401714:	2464      	movs	r4, #100	; 0x64
  401716:	4e85      	ldr	r6, [pc, #532]	; (40192c <HC_thread+0x2e0>)
					pwm_channel_update_duty(PDU_PWM, &hc_pwm_channel[channel_num], i);
  401718:	4622      	mov	r2, r4
  40171a:	9904      	ldr	r1, [sp, #16]
  40171c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401720:	4b83      	ldr	r3, [pc, #524]	; (401930 <HC_thread+0x2e4>)
  401722:	4798      	blx	r3
					vTaskDelay(pdMS_TO_TICKS(1));
  401724:	2001      	movs	r0, #1
  401726:	4b83      	ldr	r3, [pc, #524]	; (401934 <HC_thread+0x2e8>)
  401728:	4798      	blx	r3
				for(int i = 100; i > pwm_request_arr[channel_num]; i-=10){
  40172a:	3c0a      	subs	r4, #10
  40172c:	f816 3009 	ldrb.w	r3, [r6, r9]
  401730:	b2db      	uxtb	r3, r3
  401732:	42a3      	cmp	r3, r4
  401734:	dbf0      	blt.n	401718 <HC_thread+0xcc>
				pwm_channel_update_duty(PDU_PWM, &hc_pwm_channel[channel_num], hc_pwm_channel[channel_num].ul_duty);
  401736:	f8d8 200c 	ldr.w	r2, [r8, #12]
  40173a:	9904      	ldr	r1, [sp, #16]
  40173c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401740:	4b7b      	ldr	r3, [pc, #492]	; (401930 <HC_thread+0x2e4>)
  401742:	4798      	blx	r3
				outputs[channel_num].state = CHANNEL_ON;
  401744:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  401748:	4a7b      	ldr	r2, [pc, #492]	; (401938 <HC_thread+0x2ec>)
  40174a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40174e:	2201      	movs	r2, #1
  401750:	725a      	strb	r2, [r3, #9]
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
  401752:	2000      	movs	r0, #0
  401754:	4b6f      	ldr	r3, [pc, #444]	; (401914 <HC_thread+0x2c8>)
  401756:	4798      	blx	r3
  401758:	9013      	str	r0, [sp, #76]	; 0x4c
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40175a:	4b78      	ldr	r3, [pc, #480]	; (40193c <HC_thread+0x2f0>)
  40175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40175e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
		port->PIO_CODR = mask;
  401762:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401766:	4b75      	ldr	r3, [pc, #468]	; (40193c <HC_thread+0x2f0>)
  401768:	bf14      	ite	ne
  40176a:	635a      	strne	r2, [r3, #52]	; 0x34
		port->PIO_SODR = mask;
  40176c:	631a      	streq	r2, [r3, #48]	; 0x30
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(xFrequency));
  40176e:	2164      	movs	r1, #100	; 0x64
  401770:	a80d      	add	r0, sp, #52	; 0x34
  401772:	4b73      	ldr	r3, [pc, #460]	; (401940 <HC_thread+0x2f4>)
  401774:	4798      	blx	r3
		xSemaphoreTake(afec_semaphore, portMAX_DELAY );
  401776:	f04f 31ff 	mov.w	r1, #4294967295
  40177a:	f8da 0000 	ldr.w	r0, [sl]
  40177e:	4b71      	ldr	r3, [pc, #452]	; (401944 <HC_thread+0x2f8>)
  401780:	4798      	blx	r3
		afec_channel_enable(IS_AFEC, HC_AFEC_channel_list[channel_num]);
  401782:	f83b 2019 	ldrh.w	r2, [fp, r9, lsl #1]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  401786:	42ba      	cmp	r2, r7
  401788:	bf1a      	itte	ne
  40178a:	2301      	movne	r3, #1
  40178c:	4093      	lslne	r3, r2
  40178e:	463b      	moveq	r3, r7
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401790:	616b      	str	r3, [r5, #20]
		afec_channel_enable(IS_AFEC, HC_temp_channel_list[channel_num]);
  401792:	4b6d      	ldr	r3, [pc, #436]	; (401948 <HC_thread+0x2fc>)
  401794:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  401798:	42ba      	cmp	r2, r7
  40179a:	bf1a      	itte	ne
  40179c:	2301      	movne	r3, #1
  40179e:	4093      	lslne	r3, r2
  4017a0:	463b      	moveq	r3, r7
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4017a2:	616b      	str	r3, [r5, #20]
	afec->AFEC_CR = AFEC_CR_START;
  4017a4:	2302      	movs	r3, #2
  4017a6:	602b      	str	r3, [r5, #0]
		get_is(IS_AFEC, HC_AFEC_channel_list[channel_num], channel_is_config, &(outputs[channel_num].current));
  4017a8:	f83b 6019 	ldrh.w	r6, [fp, r9, lsl #1]
  4017ac:	9b06      	ldr	r3, [sp, #24]
  4017ae:	9303      	str	r3, [sp, #12]
  4017b0:	ab10      	add	r3, sp, #64	; 0x40
  4017b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4017b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  4017ba:	ab0e      	add	r3, sp, #56	; 0x38
  4017bc:	cb0c      	ldmia	r3, {r2, r3}
  4017be:	4631      	mov	r1, r6
  4017c0:	4628      	mov	r0, r5
  4017c2:	4c62      	ldr	r4, [pc, #392]	; (40194c <HC_thread+0x300>)
  4017c4:	47a0      	blx	r4
		get_fet_temp(IS_AFEC, HC_temp_channel_list[channel_num], &(outputs[channel_num].temp));
  4017c6:	4b60      	ldr	r3, [pc, #384]	; (401948 <HC_thread+0x2fc>)
  4017c8:	f833 4019 	ldrh.w	r4, [r3, r9, lsl #1]
  4017cc:	9a07      	ldr	r2, [sp, #28]
  4017ce:	4621      	mov	r1, r4
  4017d0:	4628      	mov	r0, r5
  4017d2:	4b5f      	ldr	r3, [pc, #380]	; (401950 <HC_thread+0x304>)
  4017d4:	4798      	blx	r3
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4017d6:	42be      	cmp	r6, r7
  4017d8:	bf1a      	itte	ne
  4017da:	2301      	movne	r3, #1
  4017dc:	fa03 f606 	lslne.w	r6, r3, r6
  4017e0:	463e      	moveq	r6, r7
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4017e2:	61ae      	str	r6, [r5, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4017e4:	42bc      	cmp	r4, r7
  4017e6:	bf1a      	itte	ne
  4017e8:	2301      	movne	r3, #1
  4017ea:	fa03 f404 	lslne.w	r4, r3, r4
  4017ee:	463c      	moveq	r4, r7
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4017f0:	61ac      	str	r4, [r5, #24]
		xSemaphoreGive(afec_semaphore);
  4017f2:	2300      	movs	r3, #0
  4017f4:	461a      	mov	r2, r3
  4017f6:	4619      	mov	r1, r3
  4017f8:	f8da 0000 	ldr.w	r0, [sl]
  4017fc:	4c55      	ldr	r4, [pc, #340]	; (401954 <HC_thread+0x308>)
  4017fe:	47a0      	blx	r4
		if ( hc_pwm_channel[channel_num].ul_duty != pwm_request_arr[channel_num] )
  401800:	4b4a      	ldr	r3, [pc, #296]	; (40192c <HC_thread+0x2e0>)
  401802:	f813 3009 	ldrb.w	r3, [r3, r9]
  401806:	b2db      	uxtb	r3, r3
  401808:	f8d8 200c 	ldr.w	r2, [r8, #12]
  40180c:	429a      	cmp	r2, r3
  40180e:	d00a      	beq.n	401826 <HC_thread+0x1da>
			hc_pwm_channel[channel_num].ul_duty = pwm_request_arr[channel_num];
  401810:	4b46      	ldr	r3, [pc, #280]	; (40192c <HC_thread+0x2e0>)
  401812:	f813 2009 	ldrb.w	r2, [r3, r9]
  401816:	b2d2      	uxtb	r2, r2
  401818:	f8c8 200c 	str.w	r2, [r8, #12]
			pwm_channel_update_duty(PDU_PWM, &hc_pwm_channel[channel_num], hc_pwm_channel[channel_num].ul_duty);
  40181c:	9904      	ldr	r1, [sp, #16]
  40181e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401822:	4b43      	ldr	r3, [pc, #268]	; (401930 <HC_thread+0x2e4>)
  401824:	4798      	blx	r3
		state_request req = output_state_machine(&outputs[channel_num], channel_num, channel_is_config);
  401826:	ab10      	add	r3, sp, #64	; 0x40
  401828:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40182c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  401830:	ab0e      	add	r3, sp, #56	; 0x38
  401832:	cb0c      	ldmia	r3, {r2, r3}
  401834:	9905      	ldr	r1, [sp, #20]
  401836:	9808      	ldr	r0, [sp, #32]
  401838:	4c47      	ldr	r4, [pc, #284]	; (401958 <HC_thread+0x30c>)
  40183a:	47a0      	blx	r4
		switch(req){
  40183c:	3801      	subs	r0, #1
  40183e:	2805      	cmp	r0, #5
  401840:	d887      	bhi.n	401752 <HC_thread+0x106>
  401842:	a301      	add	r3, pc, #4	; (adr r3, 401848 <HC_thread+0x1fc>)
  401844:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
  401848:	00401861 	.word	0x00401861
  40184c:	004016fb 	.word	0x004016fb
  401850:	00401885 	.word	0x00401885
  401854:	004018ad 	.word	0x004018ad
  401858:	004018bd 	.word	0x004018bd
  40185c:	004018e5 	.word	0x004018e5
				hc_pwm_channel[channel_num].ul_duty = PWM_STARTUP_DUTY_CYCLE;
  401860:	2305      	movs	r3, #5
  401862:	f8c8 300c 	str.w	r3, [r8, #12]
				pwm_channel_disable(PWM, pwm_assignment[channel_num]);
  401866:	4b2f      	ldr	r3, [pc, #188]	; (401924 <HC_thread+0x2d8>)
  401868:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
  40186c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401870:	4b3a      	ldr	r3, [pc, #232]	; (40195c <HC_thread+0x310>)
  401872:	4798      	blx	r3
				outputs[channel_num].state = CHANNEL_OFF;
  401874:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  401878:	4a2f      	ldr	r2, [pc, #188]	; (401938 <HC_thread+0x2ec>)
  40187a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40187e:	2200      	movs	r2, #0
  401880:	725a      	strb	r2, [r3, #9]
				break;
  401882:	e766      	b.n	401752 <HC_thread+0x106>
				pwm_channel_disable(PWM, pwm_assignment[channel_num]);
  401884:	4b27      	ldr	r3, [pc, #156]	; (401924 <HC_thread+0x2d8>)
  401886:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
  40188a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40188e:	4b33      	ldr	r3, [pc, #204]	; (40195c <HC_thread+0x310>)
  401890:	4798      	blx	r3
				Set_bits(error_mask, (1<<channel_num));
  401892:	4a33      	ldr	r2, [pc, #204]	; (401960 <HC_thread+0x314>)
  401894:	6813      	ldr	r3, [r2, #0]
  401896:	9909      	ldr	r1, [sp, #36]	; 0x24
  401898:	430b      	orrs	r3, r1
  40189a:	6013      	str	r3, [r2, #0]
				outputs[channel_num].state = CHANNEL_OVER_CURRENT;
  40189c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  4018a0:	4a25      	ldr	r2, [pc, #148]	; (401938 <HC_thread+0x2ec>)
  4018a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018a6:	2202      	movs	r2, #2
  4018a8:	725a      	strb	r2, [r3, #9]
				break;
  4018aa:	e752      	b.n	401752 <HC_thread+0x106>
				outputs[channel_num].state = CHANNEL_OPEN;
  4018ac:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  4018b0:	4a21      	ldr	r2, [pc, #132]	; (401938 <HC_thread+0x2ec>)
  4018b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018b6:	2203      	movs	r2, #3
  4018b8:	725a      	strb	r2, [r3, #9]
				break;
  4018ba:	e74a      	b.n	401752 <HC_thread+0x106>
				pwm_channel_disable(PWM, pwm_assignment[channel_num]);
  4018bc:	4b19      	ldr	r3, [pc, #100]	; (401924 <HC_thread+0x2d8>)
  4018be:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
  4018c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4018c6:	4b25      	ldr	r3, [pc, #148]	; (40195c <HC_thread+0x310>)
  4018c8:	4798      	blx	r3
				Set_bits(error_mask, (1<<channel_num));
  4018ca:	4a25      	ldr	r2, [pc, #148]	; (401960 <HC_thread+0x314>)
  4018cc:	6813      	ldr	r3, [r2, #0]
  4018ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4018d0:	430b      	orrs	r3, r1
  4018d2:	6013      	str	r3, [r2, #0]
				outputs[channel_num].state = CHANNEL_FAULT;
  4018d4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  4018d8:	4a17      	ldr	r2, [pc, #92]	; (401938 <HC_thread+0x2ec>)
  4018da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018de:	2204      	movs	r2, #4
  4018e0:	725a      	strb	r2, [r3, #9]
				break;
  4018e2:	e736      	b.n	401752 <HC_thread+0x106>
				outputs[channel_num].state = CHANNEL_CLEAR_FAULT;
  4018e4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  4018e8:	4a13      	ldr	r2, [pc, #76]	; (401938 <HC_thread+0x2ec>)
  4018ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018ee:	2205      	movs	r2, #5
  4018f0:	725a      	strb	r2, [r3, #9]
				soft_restart(channel_num, FAULT_LATCH_TIME_MS_HC);
  4018f2:	2155      	movs	r1, #85	; 0x55
  4018f4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4018f6:	4b1b      	ldr	r3, [pc, #108]	; (401964 <HC_thread+0x318>)
  4018f8:	4798      	blx	r3
				Clr_bits(error_mask, (1<<channel_num));
  4018fa:	4a19      	ldr	r2, [pc, #100]	; (401960 <HC_thread+0x314>)
  4018fc:	6813      	ldr	r3, [r2, #0]
  4018fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401900:	400b      	ands	r3, r1
  401902:	6013      	str	r3, [r2, #0]
				break;
  401904:	e725      	b.n	401752 <HC_thread+0x106>
  401906:	bf00      	nop
  401908:	41500000 	.word	0x41500000
  40190c:	00408654 	.word	0x00408654
  401910:	004086f8 	.word	0x004086f8
  401914:	00403d85 	.word	0x00403d85
  401918:	00403805 	.word	0x00403805
  40191c:	2000c770 	.word	0x2000c770
  401920:	400b0000 	.word	0x400b0000
  401924:	00408728 	.word	0x00408728
  401928:	0040282d 	.word	0x0040282d
  40192c:	20000018 	.word	0x20000018
  401930:	00402811 	.word	0x00402811
  401934:	00403b05 	.word	0x00403b05
  401938:	2000c5f0 	.word	0x2000c5f0
  40193c:	400e0e00 	.word	0x400e0e00
  401940:	00403a59 	.word	0x00403a59
  401944:	00403269 	.word	0x00403269
  401948:	00408644 	.word	0x00408644
  40194c:	004012d5 	.word	0x004012d5
  401950:	00401369 	.word	0x00401369
  401954:	00403075 	.word	0x00403075
  401958:	004011f1 	.word	0x004011f1
  40195c:	00402837 	.word	0x00402837
  401960:	2000c38c 	.word	0x2000c38c
  401964:	00401605 	.word	0x00401605
  401968:	2000c854 	.word	0x2000c854
  40196c:	2000c850 	.word	0x2000c850
  401970:	0040863c 	.word	0x0040863c

00401974 <LC_thread>:
void LC_thread(void* pvParameters){
  401974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401978:	b095      	sub	sp, #84	; 0x54
	pdu_enable_index channel_num = (uint32_t) pvParameters;
  40197a:	fa5f f880 	uxtb.w	r8, r0
  40197e:	46c2      	mov	sl, r8
	pdu_enable_index channel_index = (channel_num - NUM_HC_CHANNEL) / 2;
  401980:	f1a8 0304 	sub.w	r3, r8, #4
  401984:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  401988:	105b      	asrs	r3, r3, #1
  40198a:	9305      	str	r3, [sp, #20]
	is_config_t channel_is_config = {
  40198c:	4b9a      	ldr	r3, [pc, #616]	; (401bf8 <LC_thread+0x284>)
  40198e:	930e      	str	r3, [sp, #56]	; 0x38
  401990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401994:	930f      	str	r3, [sp, #60]	; 0x3c
		.offset				= PDU_AFEC_channel_offset[channel_num],
  401996:	4b99      	ldr	r3, [pc, #612]	; (401bfc <LC_thread+0x288>)
	is_config_t channel_is_config = {
  401998:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  40199c:	9310      	str	r3, [sp, #64]	; 0x40
  40199e:	2397      	movs	r3, #151	; 0x97
  4019a0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  4019a4:	2344      	movs	r3, #68	; 0x44
  4019a6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  4019aa:	2305      	movs	r3, #5
  4019ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	outputs[channel_num].state = CHANNEL_OFF;
  4019b0:	4d93      	ldr	r5, [pc, #588]	; (401c00 <LC_thread+0x28c>)
  4019b2:	ea4f 0648 	mov.w	r6, r8, lsl #1
  4019b6:	eb06 0408 	add.w	r4, r6, r8
  4019ba:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  4019be:	2000      	movs	r0, #0
  4019c0:	7260      	strb	r0, [r4, #9]
	outputs[channel_num].current = 0xAA;
  4019c2:	23aa      	movs	r3, #170	; 0xaa
  4019c4:	71a3      	strb	r3, [r4, #6]
	config[channel_num].current_limit = curr_limits[channel_num] * SCALE_FACTOR_LC;
  4019c6:	4a8f      	ldr	r2, [pc, #572]	; (401c04 <LC_thread+0x290>)
  4019c8:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
  4019cc:	4b8e      	ldr	r3, [pc, #568]	; (401c08 <LC_thread+0x294>)
  4019ce:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4019d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4019d6:	710b      	strb	r3, [r1, #4]
	config[channel_num].inrush_delay = INRUSH_AFEC_DELAY;	
  4019d8:	2314      	movs	r3, #20
  4019da:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
  4019de:	4b8b      	ldr	r3, [pc, #556]	; (401c0c <LC_thread+0x298>)
  4019e0:	4798      	blx	r3
  4019e2:	9013      	str	r0, [sp, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
  4019e4:	4b8a      	ldr	r3, [pc, #552]	; (401c10 <LC_thread+0x29c>)
  4019e6:	4798      	blx	r3
  4019e8:	900d      	str	r0, [sp, #52]	; 0x34
  4019ea:	f8cd 801c 	str.w	r8, [sp, #28]
			get_is( LA_AFEC, LC_AFEC_channel_list[channel_index], channel_is_config, &(outputs[channel_num].current) );			
  4019ee:	1da3      	adds	r3, r4, #6
  4019f0:	9308      	str	r3, [sp, #32]
		state_request req = output_state_machine(&outputs[channel_num], channel_num, channel_is_config);
  4019f2:	9406      	str	r4, [sp, #24]
				Set_bits(error_mask, (1<<channel_num));
  4019f4:	2301      	movs	r3, #1
  4019f6:	fa03 f308 	lsl.w	r3, r3, r8
  4019fa:	930a      	str	r3, [sp, #40]	; 0x28
				Clr_bits(error_mask, (1<<channel_num));
  4019fc:	43db      	mvns	r3, r3
  4019fe:	930b      	str	r3, [sp, #44]	; 0x2c
		xSemaphoreTake(afec2_semaphore, portMAX_DELAY );
  401a00:	4f84      	ldr	r7, [pc, #528]	; (401c14 <LC_thread+0x2a0>)
				outputs[channel_num].state = CHANNEL_CLEAR_FAULT;
  401a02:	46a3      	mov	fp, r4
  401a04:	e02b      	b.n	401a5e <LC_thread+0xea>
		switch(req){
  401a06:	2405      	movs	r4, #5
					ioport_set_pin_level(PDU_iopins[channel_num], PDU_ON_STATE);
  401a08:	4b83      	ldr	r3, [pc, #524]	; (401c18 <LC_thread+0x2a4>)
  401a0a:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
	return pin >> 5;
  401a0e:	fa26 f504 	lsr.w	r5, r6, r4
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a12:	f505 1500 	add.w	r5, r5, #2097152	; 0x200000
  401a16:	f205 7507 	addw	r5, r5, #1799	; 0x707
  401a1a:	026d      	lsls	r5, r5, #9
	return 1U << (pin & 0x1F);
  401a1c:	f006 061f 	and.w	r6, r6, #31
  401a20:	2301      	movs	r3, #1
  401a22:	fa03 f606 	lsl.w	r6, r3, r6
					vTaskDelay(pdMS_TO_TICKS(PRECHARGE_TIME));
  401a26:	f8df 9220 	ldr.w	r9, [pc, #544]	; 401c48 <LC_thread+0x2d4>
  401a2a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  401a2e:	46b0      	mov	r8, r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a30:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
  401a34:	2005      	movs	r0, #5
  401a36:	47c8      	blx	r9
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401a38:	636e      	str	r6, [r5, #52]	; 0x34
  401a3a:	3c01      	subs	r4, #1
				for(U8 attempt = 0; attempt < PRECHARGE_ATTEMPTS; attempt++){
  401a3c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  401a40:	d1f6      	bne.n	401a30 <LC_thread+0xbc>
  401a42:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a46:	632e      	str	r6, [r5, #48]	; 0x30
				outputs[channel_num].state = CHANNEL_ON;
  401a48:	2301      	movs	r3, #1
  401a4a:	f88b 3009 	strb.w	r3, [fp, #9]
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
  401a4e:	2000      	movs	r0, #0
  401a50:	4b6e      	ldr	r3, [pc, #440]	; (401c0c <LC_thread+0x298>)
  401a52:	4798      	blx	r3
  401a54:	9013      	str	r0, [sp, #76]	; 0x4c
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(xFrequency));
  401a56:	2164      	movs	r1, #100	; 0x64
  401a58:	a80d      	add	r0, sp, #52	; 0x34
  401a5a:	4b70      	ldr	r3, [pc, #448]	; (401c1c <LC_thread+0x2a8>)
  401a5c:	4798      	blx	r3
		xSemaphoreTake(afec2_semaphore, portMAX_DELAY );
  401a5e:	f04f 31ff 	mov.w	r1, #4294967295
  401a62:	6838      	ldr	r0, [r7, #0]
  401a64:	4b6e      	ldr	r3, [pc, #440]	; (401c20 <LC_thread+0x2ac>)
  401a66:	4798      	blx	r3
  401a68:	f89d 2014 	ldrb.w	r2, [sp, #20]
		ioport_set_pin_level(PDU_DSEL_iopins[channel_index], channel_num % 2 ? PDU_ON_STATE : PDU_OFF_STATE);
  401a6c:	4b6d      	ldr	r3, [pc, #436]	; (401c24 <LC_thread+0x2b0>)
  401a6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	return pin >> 5;
  401a72:	094b      	lsrs	r3, r1, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401a78:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401a7c:	025b      	lsls	r3, r3, #9
	if (level) {
  401a7e:	f018 0f01 	tst.w	r8, #1
	return 1U << (pin & 0x1F);
  401a82:	f001 011f 	and.w	r1, r1, #31
  401a86:	f04f 0001 	mov.w	r0, #1
  401a8a:	fa00 f101 	lsl.w	r1, r0, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a8e:	bf14      	ite	ne
  401a90:	6319      	strne	r1, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401a92:	6359      	streq	r1, [r3, #52]	; 0x34
		if( ioport_get_pin_level(PDU_DEN_iopins[channel_index]) ){
  401a94:	4b64      	ldr	r3, [pc, #400]	; (401c28 <LC_thread+0x2b4>)
  401a96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	return pin >> 5;
  401a9a:	094b      	lsrs	r3, r1, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401aa0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401aa4:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401aa6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  401aa8:	f001 011f 	and.w	r1, r1, #31
  401aac:	2301      	movs	r3, #1
  401aae:	fa03 f101 	lsl.w	r1, r3, r1
  401ab2:	4201      	tst	r1, r0
  401ab4:	d029      	beq.n	401b0a <LC_thread+0x196>
			afec_channel_enable(LA_AFEC, LC_AFEC_channel_list[channel_index]);
  401ab6:	4b5d      	ldr	r3, [pc, #372]	; (401c2c <LC_thread+0x2b8>)
  401ab8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  401abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401ac0:	4299      	cmp	r1, r3
  401ac2:	bf1a      	itte	ne
  401ac4:	2301      	movne	r3, #1
  401ac6:	408b      	lslne	r3, r1
  401ac8:	f64f 73ff 	movweq	r3, #65535	; 0xffff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  401acc:	4d58      	ldr	r5, [pc, #352]	; (401c30 <LC_thread+0x2bc>)
  401ace:	616b      	str	r3, [r5, #20]
	afec->AFEC_CR = AFEC_CR_START;
  401ad0:	2302      	movs	r3, #2
  401ad2:	602b      	str	r3, [r5, #0]
			get_is( LA_AFEC, LC_AFEC_channel_list[channel_index], channel_is_config, &(outputs[channel_num].current) );			
  401ad4:	4b55      	ldr	r3, [pc, #340]	; (401c2c <LC_thread+0x2b8>)
  401ad6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  401ada:	9b08      	ldr	r3, [sp, #32]
  401adc:	9303      	str	r3, [sp, #12]
  401ade:	ab10      	add	r3, sp, #64	; 0x40
  401ae0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  401ae4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  401ae8:	ab0e      	add	r3, sp, #56	; 0x38
  401aea:	cb0c      	ldmia	r3, {r2, r3}
  401aec:	4621      	mov	r1, r4
  401aee:	4628      	mov	r0, r5
  401af0:	4d50      	ldr	r5, [pc, #320]	; (401c34 <LC_thread+0x2c0>)
  401af2:	47a8      	blx	r5
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  401af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401af8:	429c      	cmp	r4, r3
  401afa:	bf1a      	itte	ne
  401afc:	2301      	movne	r3, #1
  401afe:	fa03 f404 	lslne.w	r4, r3, r4
  401b02:	f64f 74ff 	movweq	r4, #65535	; 0xffff
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  401b06:	4b4a      	ldr	r3, [pc, #296]	; (401c30 <LC_thread+0x2bc>)
  401b08:	619c      	str	r4, [r3, #24]
		xSemaphoreGive(afec2_semaphore);
  401b0a:	2300      	movs	r3, #0
  401b0c:	461a      	mov	r2, r3
  401b0e:	4619      	mov	r1, r3
  401b10:	6838      	ldr	r0, [r7, #0]
  401b12:	4c49      	ldr	r4, [pc, #292]	; (401c38 <LC_thread+0x2c4>)
  401b14:	47a0      	blx	r4
		state_request req = output_state_machine(&outputs[channel_num], channel_num, channel_is_config);
  401b16:	ab10      	add	r3, sp, #64	; 0x40
  401b18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  401b1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  401b20:	ab0e      	add	r3, sp, #56	; 0x38
  401b22:	cb0c      	ldmia	r3, {r2, r3}
  401b24:	9907      	ldr	r1, [sp, #28]
  401b26:	9806      	ldr	r0, [sp, #24]
  401b28:	4c44      	ldr	r4, [pc, #272]	; (401c3c <LC_thread+0x2c8>)
  401b2a:	47a0      	blx	r4
		switch(req){
  401b2c:	3801      	subs	r0, #1
  401b2e:	2805      	cmp	r0, #5
  401b30:	d88d      	bhi.n	401a4e <LC_thread+0xda>
  401b32:	a301      	add	r3, pc, #4	; (adr r3, 401b38 <LC_thread+0x1c4>)
  401b34:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
  401b38:	00401b51 	.word	0x00401b51
  401b3c:	00401a07 	.word	0x00401a07
  401b40:	00401b77 	.word	0x00401b77
  401b44:	00401ba7 	.word	0x00401ba7
  401b48:	00401baf 	.word	0x00401baf
  401b4c:	00401bdf 	.word	0x00401bdf
				ioport_set_pin_level(PDU_iopins[channel_num], PDU_OFF_STATE);
  401b50:	4b31      	ldr	r3, [pc, #196]	; (401c18 <LC_thread+0x2a4>)
  401b52:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
	return pin >> 5;
  401b56:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b5c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b60:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  401b62:	f002 021f 	and.w	r2, r2, #31
  401b66:	2101      	movs	r1, #1
  401b68:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b6c:	635a      	str	r2, [r3, #52]	; 0x34
				outputs[channel_num].state = CHANNEL_OFF;
  401b6e:	2300      	movs	r3, #0
  401b70:	f88b 3009 	strb.w	r3, [fp, #9]
				break;
  401b74:	e76b      	b.n	401a4e <LC_thread+0xda>
				ioport_set_pin_level(PDU_iopins[channel_num], PDU_OFF_STATE);
  401b76:	4b28      	ldr	r3, [pc, #160]	; (401c18 <LC_thread+0x2a4>)
  401b78:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
	return pin >> 5;
  401b7c:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b82:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b86:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  401b88:	f002 021f 	and.w	r2, r2, #31
  401b8c:	2101      	movs	r1, #1
  401b8e:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b92:	635a      	str	r2, [r3, #52]	; 0x34
				Set_bits(error_mask, (1<<channel_num));
  401b94:	4a2a      	ldr	r2, [pc, #168]	; (401c40 <LC_thread+0x2cc>)
  401b96:	6813      	ldr	r3, [r2, #0]
  401b98:	990a      	ldr	r1, [sp, #40]	; 0x28
  401b9a:	430b      	orrs	r3, r1
  401b9c:	6013      	str	r3, [r2, #0]
				outputs[channel_num].state = CHANNEL_OVER_CURRENT;
  401b9e:	2302      	movs	r3, #2
  401ba0:	f88b 3009 	strb.w	r3, [fp, #9]
				break;
  401ba4:	e753      	b.n	401a4e <LC_thread+0xda>
				outputs[channel_num].state = CHANNEL_OPEN;
  401ba6:	2303      	movs	r3, #3
  401ba8:	f88b 3009 	strb.w	r3, [fp, #9]
				break;
  401bac:	e74f      	b.n	401a4e <LC_thread+0xda>
				ioport_set_pin_level(PDU_iopins[channel_num], PDU_OFF_STATE);
  401bae:	4b1a      	ldr	r3, [pc, #104]	; (401c18 <LC_thread+0x2a4>)
  401bb0:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
	return pin >> 5;
  401bb4:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bb6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401bba:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401bbe:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  401bc0:	f002 021f 	and.w	r2, r2, #31
  401bc4:	2101      	movs	r1, #1
  401bc6:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401bca:	635a      	str	r2, [r3, #52]	; 0x34
				Set_bits(error_mask, (1<<channel_num));
  401bcc:	4a1c      	ldr	r2, [pc, #112]	; (401c40 <LC_thread+0x2cc>)
  401bce:	6813      	ldr	r3, [r2, #0]
  401bd0:	990a      	ldr	r1, [sp, #40]	; 0x28
  401bd2:	430b      	orrs	r3, r1
  401bd4:	6013      	str	r3, [r2, #0]
				outputs[channel_num].state = CHANNEL_FAULT;
  401bd6:	2304      	movs	r3, #4
  401bd8:	f88b 3009 	strb.w	r3, [fp, #9]
				break;
  401bdc:	e737      	b.n	401a4e <LC_thread+0xda>
				outputs[channel_num].state = CHANNEL_CLEAR_FAULT;
  401bde:	2305      	movs	r3, #5
  401be0:	f88b 3009 	strb.w	r3, [fp, #9]
				soft_restart(channel_num, FAULT_LATCH_TIME_MS_LC);
  401be4:	2164      	movs	r1, #100	; 0x64
  401be6:	4640      	mov	r0, r8
  401be8:	4b16      	ldr	r3, [pc, #88]	; (401c44 <LC_thread+0x2d0>)
  401bea:	4798      	blx	r3
				Clr_bits(error_mask, (1<<channel_num));
  401bec:	4a14      	ldr	r2, [pc, #80]	; (401c40 <LC_thread+0x2cc>)
  401bee:	6813      	ldr	r3, [r2, #0]
  401bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401bf2:	400b      	ands	r3, r1
  401bf4:	6013      	str	r3, [r2, #0]
				break;
  401bf6:	e72a      	b.n	401a4e <LC_thread+0xda>
  401bf8:	40b00000 	.word	0x40b00000
  401bfc:	00408654 	.word	0x00408654
  401c00:	2000c5f0 	.word	0x2000c5f0
  401c04:	2000c854 	.word	0x2000c854
  401c08:	004086f8 	.word	0x004086f8
  401c0c:	00403d85 	.word	0x00403d85
  401c10:	00403805 	.word	0x00403805
  401c14:	2000c5e8 	.word	0x2000c5e8
  401c18:	004086c4 	.word	0x004086c4
  401c1c:	00403a59 	.word	0x00403a59
  401c20:	00403269 	.word	0x00403269
  401c24:	004086a4 	.word	0x004086a4
  401c28:	00408684 	.word	0x00408684
  401c2c:	0040864c 	.word	0x0040864c
  401c30:	400b4000 	.word	0x400b4000
  401c34:	004012d5 	.word	0x004012d5
  401c38:	00403075 	.word	0x00403075
  401c3c:	004011f1 	.word	0x004011f1
  401c40:	2000c38c 	.word	0x2000c38c
  401c44:	00401605 	.word	0x00401605
  401c48:	00403b05 	.word	0x00403b05
  401c4c:	00000000 	.word	0x00000000

00401c50 <transmit_status>:
*
* CAN mailboxes and CAN bus should be first initialized by init
* This function will just load new data into mailbox and start 
* transmission to ECU and data logger
*/
void transmit_status(void* pvParameters){
  401c50:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401c54:	b082      	sub	sp, #8
	
	UNUSED(pvParameters);
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TASK_20_HZ;
	xLastWakeTime = xTaskGetTickCount();
  401c56:	4b4c      	ldr	r3, [pc, #304]	; (401d88 <transmit_status+0x138>)
  401c58:	4798      	blx	r3
  401c5a:	9001      	str	r0, [sp, #4]

	uint8_t byte_index	= 0;
	uint8_t block_index	= 0;
  401c5c:	2600      	movs	r6, #0
	uint8_t byte_index	= 0;
  401c5e:	4634      	mov	r4, r6
			byte_index +=8;
			block_index++;
			}
			
		else{
			can_mailbox[PDU_STATUS_TX_MB].ul_datal = 0;
  401c60:	4d4a      	ldr	r5, [pc, #296]	; (401d8c <transmit_status+0x13c>)
			can_mailbox[PDU_STATUS_TX_MB].ul_datal |= state_three;
			LSB0W(can_mailbox[PDU_STATUS_TX_MB].ul_datah) = PDU.total_curr;
			LSB1W(can_mailbox[PDU_STATUS_TX_MB].ul_datah) = PDU.rail_voltage_3_3 /2;
						
			can_mailbox[PDU_STATUS_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;
			can_mailbox_write(PDU_CAN, &can_mailbox[PDU_STATUS_TX_MB]);
  401c62:	f105 0b60 	add.w	fp, r5, #96	; 0x60
  401c66:	e04a      	b.n	401cfe <transmit_status+0xae>
  401c68:	3301      	adds	r3, #1
			for( uint8_t index = 0; index < 4; index++){
  401c6a:	2b04      	cmp	r3, #4
  401c6c:	d00d      	beq.n	401c8a <transmit_status+0x3a>
				if( Tst_bits(enable_mask, ( 1 << (index + byte_index) ) ) ) can_mailbox[PDU_STATUS_TX_MB].ul_datal |= (1<< (8 *index));
  401c6e:	f8de 8000 	ldr.w	r8, [lr]
  401c72:	18e2      	adds	r2, r4, r3
  401c74:	fa07 f202 	lsl.w	r2, r7, r2
  401c78:	ea12 0f08 	tst.w	r2, r8
  401c7c:	d0f4      	beq.n	401c68 <transmit_status+0x18>
  401c7e:	00da      	lsls	r2, r3, #3
  401c80:	fa07 f202 	lsl.w	r2, r7, r2
  401c84:	4310      	orrs	r0, r2
  401c86:	46e1      	mov	r9, ip
  401c88:	e7ee      	b.n	401c68 <transmit_status+0x18>
  401c8a:	f1b9 0f00 	cmp.w	r9, #0
  401c8e:	d108      	bne.n	401ca2 <transmit_status+0x52>
  401c90:	1d0a      	adds	r2, r1, #4
  401c92:	2300      	movs	r3, #0
  401c94:	4698      	mov	r8, r3
  401c96:	469e      	mov	lr, r3
				if( Tst_bits(enable_mask, ( 1 << (index + byte_index) ) ) ) can_mailbox[PDU_STATUS_TX_MB].ul_datah |= (1<< (8 * (index - 4 )));
  401c98:	f8df c118 	ldr.w	ip, [pc, #280]	; 401db4 <transmit_status+0x164>
  401c9c:	2701      	movs	r7, #1
  401c9e:	46b9      	mov	r9, r7
  401ca0:	e005      	b.n	401cae <transmit_status+0x5e>
  401ca2:	67a8      	str	r0, [r5, #120]	; 0x78
  401ca4:	e7f4      	b.n	401c90 <transmit_status+0x40>
  401ca6:	3201      	adds	r2, #1
  401ca8:	3308      	adds	r3, #8
			for( uint8_t index = 4; index < 8; index++){
  401caa:	2b20      	cmp	r3, #32
  401cac:	d00b      	beq.n	401cc6 <transmit_status+0x76>
				if( Tst_bits(enable_mask, ( 1 << (index + byte_index) ) ) ) can_mailbox[PDU_STATUS_TX_MB].ul_datah |= (1<< (8 * (index - 4 )));
  401cae:	f8dc 1000 	ldr.w	r1, [ip]
  401cb2:	fa07 f002 	lsl.w	r0, r7, r2
  401cb6:	4208      	tst	r0, r1
  401cb8:	d0f5      	beq.n	401ca6 <transmit_status+0x56>
  401cba:	fa07 f103 	lsl.w	r1, r7, r3
  401cbe:	ea4e 0e01 	orr.w	lr, lr, r1
  401cc2:	46c8      	mov	r8, r9
  401cc4:	e7ef      	b.n	401ca6 <transmit_status+0x56>
  401cc6:	f1b8 0f00 	cmp.w	r8, #0
  401cca:	d125      	bne.n	401d18 <transmit_status+0xc8>
			can_mailbox[PDU_STATUS_TX_MB].ul_datal |= state_id[block_index];
  401ccc:	4b30      	ldr	r3, [pc, #192]	; (401d90 <transmit_status+0x140>)
  401cce:	5d9a      	ldrb	r2, [r3, r6]
  401cd0:	6fab      	ldr	r3, [r5, #120]	; 0x78
  401cd2:	4313      	orrs	r3, r2
  401cd4:	67ab      	str	r3, [r5, #120]	; 0x78
			can_mailbox[PDU_STATUS_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;
  401cd6:	2308      	movs	r3, #8
  401cd8:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
			can_mailbox_write(PDU_CAN, &can_mailbox[PDU_STATUS_TX_MB]);
  401cdc:	4f2d      	ldr	r7, [pc, #180]	; (401d94 <transmit_status+0x144>)
  401cde:	4659      	mov	r1, fp
  401ce0:	4638      	mov	r0, r7
  401ce2:	4b2d      	ldr	r3, [pc, #180]	; (401d98 <transmit_status+0x148>)
  401ce4:	4798      	blx	r3
			can_mailbox_send_transfer_cmd(PDU_CAN, &can_mailbox[PDU_STATUS_TX_MB]); 
  401ce6:	4659      	mov	r1, fp
  401ce8:	4638      	mov	r0, r7
  401cea:	4b2c      	ldr	r3, [pc, #176]	; (401d9c <transmit_status+0x14c>)
  401cec:	4798      	blx	r3
			byte_index +=8;
  401cee:	3408      	adds	r4, #8
  401cf0:	b2e4      	uxtb	r4, r4
			block_index++;
  401cf2:	3601      	adds	r6, #1
  401cf4:	b2f6      	uxtb	r6, r6
			byte_index = 0;
			block_index = 0;
			}

		// wait
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( xFrequency ));
  401cf6:	2132      	movs	r1, #50	; 0x32
  401cf8:	a801      	add	r0, sp, #4
  401cfa:	4b29      	ldr	r3, [pc, #164]	; (401da0 <transmit_status+0x150>)
  401cfc:	4798      	blx	r3
		if( block_index < PDU_TX_STATUS_CNT){
  401cfe:	2e02      	cmp	r6, #2
  401d00:	d80d      	bhi.n	401d1e <transmit_status+0xce>
			can_mailbox[PDU_STATUS_TX_MB].ul_datal = 0;
  401d02:	2000      	movs	r0, #0
  401d04:	67a8      	str	r0, [r5, #120]	; 0x78
			can_mailbox[PDU_STATUS_TX_MB].ul_datah = 0;
  401d06:	67e8      	str	r0, [r5, #124]	; 0x7c
  401d08:	4603      	mov	r3, r0
  401d0a:	4681      	mov	r9, r0
				if( Tst_bits(enable_mask, ( 1 << (index + byte_index) ) ) ) can_mailbox[PDU_STATUS_TX_MB].ul_datal |= (1<< (8 *index));
  401d0c:	4621      	mov	r1, r4
  401d0e:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 401db4 <transmit_status+0x164>
  401d12:	2701      	movs	r7, #1
  401d14:	46bc      	mov	ip, r7
  401d16:	e7aa      	b.n	401c6e <transmit_status+0x1e>
  401d18:	f8c5 e07c 	str.w	lr, [r5, #124]	; 0x7c
  401d1c:	e7d6      	b.n	401ccc <transmit_status+0x7c>
			can_mailbox[PDU_STATUS_TX_MB].ul_datal = 0;
  401d1e:	2400      	movs	r4, #0
  401d20:	67ac      	str	r4, [r5, #120]	; 0x78
			can_mailbox[PDU_STATUS_TX_MB].ul_datah = 0;
  401d22:	67ec      	str	r4, [r5, #124]	; 0x7c
			LSB1W(can_mailbox[PDU_STATUS_TX_MB].ul_datal) = PDU.chip_temp;
  401d24:	4e1f      	ldr	r6, [pc, #124]	; (401da4 <transmit_status+0x154>)
  401d26:	7933      	ldrb	r3, [r6, #4]
  401d28:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
			LSB2W(can_mailbox[PDU_STATUS_TX_MB].ul_datal) = (uint8_t)( PDU.batt_volt / ( VOLTAGE_SCALE_FACTOR * 0.1216 ) );
  401d2c:	8830      	ldrh	r0, [r6, #0]
  401d2e:	4b1e      	ldr	r3, [pc, #120]	; (401da8 <transmit_status+0x158>)
  401d30:	4798      	blx	r3
  401d32:	a313      	add	r3, pc, #76	; (adr r3, 401d80 <transmit_status+0x130>)
  401d34:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d38:	4f1c      	ldr	r7, [pc, #112]	; (401dac <transmit_status+0x15c>)
  401d3a:	47b8      	blx	r7
  401d3c:	4b1c      	ldr	r3, [pc, #112]	; (401db0 <transmit_status+0x160>)
  401d3e:	4798      	blx	r3
  401d40:	f885 007a 	strb.w	r0, [r5, #122]	; 0x7a
			LSB3W(can_mailbox[PDU_STATUS_TX_MB].ul_datal) = PDU.error_flag;
  401d44:	7973      	ldrb	r3, [r6, #5]
  401d46:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
			can_mailbox[PDU_STATUS_TX_MB].ul_datal |= state_three;
  401d4a:	6fab      	ldr	r3, [r5, #120]	; 0x78
  401d4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401d50:	67ab      	str	r3, [r5, #120]	; 0x78
			LSB0W(can_mailbox[PDU_STATUS_TX_MB].ul_datah) = PDU.total_curr;
  401d52:	79b3      	ldrb	r3, [r6, #6]
  401d54:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
			LSB1W(can_mailbox[PDU_STATUS_TX_MB].ul_datah) = PDU.rail_voltage_3_3 /2;
  401d58:	8873      	ldrh	r3, [r6, #2]
  401d5a:	085b      	lsrs	r3, r3, #1
  401d5c:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
			can_mailbox[PDU_STATUS_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;
  401d60:	2308      	movs	r3, #8
  401d62:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
			can_mailbox_write(PDU_CAN, &can_mailbox[PDU_STATUS_TX_MB]);
  401d66:	4e0b      	ldr	r6, [pc, #44]	; (401d94 <transmit_status+0x144>)
  401d68:	4659      	mov	r1, fp
  401d6a:	4630      	mov	r0, r6
  401d6c:	4b0a      	ldr	r3, [pc, #40]	; (401d98 <transmit_status+0x148>)
  401d6e:	4798      	blx	r3
			can_mailbox_send_transfer_cmd(PDU_CAN, &can_mailbox[PDU_STATUS_TX_MB]);
  401d70:	4659      	mov	r1, fp
  401d72:	4630      	mov	r0, r6
  401d74:	4b09      	ldr	r3, [pc, #36]	; (401d9c <transmit_status+0x14c>)
  401d76:	4798      	blx	r3
			block_index = 0;
  401d78:	4626      	mov	r6, r4
  401d7a:	e7bc      	b.n	401cf6 <transmit_status+0xa6>
  401d7c:	f3af 8000 	nop.w
  401d80:	851eb852 	.word	0x851eb852
  401d84:	402851eb 	.word	0x402851eb
  401d88:	00403805 	.word	0x00403805
  401d8c:	2000c414 	.word	0x2000c414
  401d90:	00408748 	.word	0x00408748
  401d94:	40010000 	.word	0x40010000
  401d98:	00402495 	.word	0x00402495
  401d9c:	004023a3 	.word	0x004023a3
  401da0:	00403a59 	.word	0x00403a59
  401da4:	2000c380 	.word	0x2000c380
  401da8:	004048ed 	.word	0x004048ed
  401dac:	00404c0d 	.word	0x00404c0d
  401db0:	00404ddd 	.word	0x00404ddd
  401db4:	2000c388 	.word	0x2000c388

00401db8 <transmit_output_current>:
		}
	}
	
	
void transmit_output_current(void* pvParameters){
  401db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401dbc:	b083      	sub	sp, #12
	
	UNUSED(pvParameters);
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TASK_20_HZ;
	xLastWakeTime = xTaskGetTickCount();
  401dbe:	4b2e      	ldr	r3, [pc, #184]	; (401e78 <transmit_output_current+0xc0>)
  401dc0:	4798      	blx	r3
  401dc2:	9001      	str	r0, [sp, #4]

	uint8_t block_index	= 0;
  401dc4:	2400      	movs	r4, #0
		*	Send out the current measurements to datalogger and ECU
		*	Messages are sent in message with ID of Base Address + 1
		*	7 measurements are sent per message with compound ID in byte 0
		*	all messages send max data length
		*/	
		can_mailbox[PDU_AMP_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;	
  401dc6:	4d2d      	ldr	r5, [pc, #180]	; (401e7c <transmit_output_current+0xc4>)
  401dc8:	f04f 0608 	mov.w	r6, #8
		if ( block_index < NUM_PDU_CHANNEL / 7 + 1)
			{
			LSB0W(can_mailbox[PDU_AMP_TX_MB].ul_datal) = block_index;
			LSB1W(can_mailbox[PDU_AMP_TX_MB].ul_datal) = outputs[ (block_index * 7) + 0].current;
  401dcc:	4f2c      	ldr	r7, [pc, #176]	; (401e80 <transmit_output_current+0xc8>)
			LSB0W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 3].current;
			LSB1W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 4].current;
			LSB2W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 5].current;
			LSB3W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 6].current;
			
			can_mailbox_write(PDU_CAN, &can_mailbox[PDU_AMP_TX_MB]);
  401dce:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 401e90 <transmit_output_current+0xd8>
  401dd2:	e04a      	b.n	401e6a <transmit_output_current+0xb2>
			LSB0W(can_mailbox[PDU_AMP_TX_MB].ul_datal) = block_index;
  401dd4:	f885 4098 	strb.w	r4, [r5, #152]	; 0x98
			LSB1W(can_mailbox[PDU_AMP_TX_MB].ul_datal) = outputs[ (block_index * 7) + 0].current;
  401dd8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  401ddc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401de0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
  401de4:	7992      	ldrb	r2, [r2, #6]
  401de6:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
			LSB2W(can_mailbox[PDU_AMP_TX_MB].ul_datal) = outputs[ (block_index * 7) + 1].current;
  401dea:	1c5a      	adds	r2, r3, #1
  401dec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401df0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
  401df4:	7992      	ldrb	r2, [r2, #6]
  401df6:	f885 209a 	strb.w	r2, [r5, #154]	; 0x9a
			LSB3W(can_mailbox[PDU_AMP_TX_MB].ul_datal) = outputs[ (block_index * 7) + 2].current;
  401dfa:	1c9a      	adds	r2, r3, #2
  401dfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401e00:	eb07 0282 	add.w	r2, r7, r2, lsl #2
  401e04:	7992      	ldrb	r2, [r2, #6]
  401e06:	f885 209b 	strb.w	r2, [r5, #155]	; 0x9b
			LSB0W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 3].current;
  401e0a:	1cda      	adds	r2, r3, #3
  401e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401e10:	eb07 0282 	add.w	r2, r7, r2, lsl #2
  401e14:	7992      	ldrb	r2, [r2, #6]
  401e16:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
			LSB1W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 4].current;
  401e1a:	1d1a      	adds	r2, r3, #4
  401e1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401e20:	eb07 0282 	add.w	r2, r7, r2, lsl #2
  401e24:	7992      	ldrb	r2, [r2, #6]
  401e26:	f885 209d 	strb.w	r2, [r5, #157]	; 0x9d
			LSB2W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 5].current;
  401e2a:	1d5a      	adds	r2, r3, #5
  401e2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401e30:	eb07 0282 	add.w	r2, r7, r2, lsl #2
  401e34:	7992      	ldrb	r2, [r2, #6]
  401e36:	f885 209e 	strb.w	r2, [r5, #158]	; 0x9e
			LSB3W(can_mailbox[PDU_AMP_TX_MB].ul_datah) = outputs[ (block_index * 7) + 6].current;
  401e3a:	3306      	adds	r3, #6
  401e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401e40:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401e44:	799b      	ldrb	r3, [r3, #6]
  401e46:	f885 309f 	strb.w	r3, [r5, #159]	; 0x9f
			can_mailbox_write(PDU_CAN, &can_mailbox[PDU_AMP_TX_MB]);
  401e4a:	f105 0980 	add.w	r9, r5, #128	; 0x80
  401e4e:	4649      	mov	r1, r9
  401e50:	4640      	mov	r0, r8
  401e52:	4b0c      	ldr	r3, [pc, #48]	; (401e84 <transmit_output_current+0xcc>)
  401e54:	4798      	blx	r3
			can_mailbox_send_transfer_cmd(PDU_CAN, &can_mailbox[PDU_AMP_TX_MB]);
  401e56:	4649      	mov	r1, r9
  401e58:	4640      	mov	r0, r8
  401e5a:	4b0b      	ldr	r3, [pc, #44]	; (401e88 <transmit_output_current+0xd0>)
  401e5c:	4798      	blx	r3
			
			block_index++;
  401e5e:	3401      	adds	r4, #1
  401e60:	b2e4      	uxtb	r4, r4
			block_index = 0;
		}
		
		
		// wait
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( xFrequency ));
  401e62:	2132      	movs	r1, #50	; 0x32
  401e64:	a801      	add	r0, sp, #4
  401e66:	4b09      	ldr	r3, [pc, #36]	; (401e8c <transmit_output_current+0xd4>)
  401e68:	4798      	blx	r3
		can_mailbox[PDU_AMP_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;	
  401e6a:	f885 6086 	strb.w	r6, [r5, #134]	; 0x86
		if ( block_index < NUM_PDU_CHANNEL / 7 + 1)
  401e6e:	2c01      	cmp	r4, #1
  401e70:	d9b0      	bls.n	401dd4 <transmit_output_current+0x1c>
			block_index = 0;
  401e72:	2400      	movs	r4, #0
  401e74:	e7f5      	b.n	401e62 <transmit_output_current+0xaa>
  401e76:	bf00      	nop
  401e78:	00403805 	.word	0x00403805
  401e7c:	2000c414 	.word	0x2000c414
  401e80:	2000c5f0 	.word	0x2000c5f0
  401e84:	00402495 	.word	0x00402495
  401e88:	004023a3 	.word	0x004023a3
  401e8c:	00403a59 	.word	0x00403a59
  401e90:	40010000 	.word	0x40010000

00401e94 <transmit_output_state>:
		// wait
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( xFrequency ));
		}
	}

void transmit_output_state(void* pvParameters){
  401e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e98:	b082      	sub	sp, #8
	
	UNUSED(pvParameters);
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TASK_20_HZ;
	xLastWakeTime = xTaskGetTickCount();
  401e9a:	4b33      	ldr	r3, [pc, #204]	; (401f68 <transmit_output_state+0xd4>)
  401e9c:	4798      	blx	r3
  401e9e:	9001      	str	r0, [sp, #4]

	uint8_t block_index	= 0;
  401ea0:	2400      	movs	r4, #0
	for(;;){
		
		/*
		* Send the PDU message block containing output states
		*/
		can_mailbox[PDU_OUTPUT_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;
  401ea2:	4d32      	ldr	r5, [pc, #200]	; (401f6c <transmit_output_state+0xd8>)
  401ea4:	f04f 0708 	mov.w	r7, #8
		if ( block_index < NUM_PDU_CHANNEL / 7 + 1 )
			{
			LSB0W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datal) = outputs[ (block_index * 8) + 0].state | PDU_status_id[block_index];
  401ea8:	4e31      	ldr	r6, [pc, #196]	; (401f70 <transmit_output_state+0xdc>)
  401eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 401f80 <transmit_output_state+0xec>
  401eae:	e054      	b.n	401f5a <transmit_output_state+0xc6>
  401eb0:	00e3      	lsls	r3, r4, #3
  401eb2:	eb03 1204 	add.w	r2, r3, r4, lsl #4
  401eb6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401eba:	7a52      	ldrb	r2, [r2, #9]
  401ebc:	f818 1004 	ldrb.w	r1, [r8, r4]
  401ec0:	430a      	orrs	r2, r1
  401ec2:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			LSB1W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datal) = outputs[ (block_index * 8) + 1].state;
  401ec6:	1c5a      	adds	r2, r3, #1
  401ec8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401ecc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401ed0:	7a52      	ldrb	r2, [r2, #9]
  401ed2:	f885 20f9 	strb.w	r2, [r5, #249]	; 0xf9
			LSB2W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datal) = outputs[ (block_index * 8) + 2].state;
  401ed6:	1c9a      	adds	r2, r3, #2
  401ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401edc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401ee0:	7a52      	ldrb	r2, [r2, #9]
  401ee2:	f885 20fa 	strb.w	r2, [r5, #250]	; 0xfa
			LSB3W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datal) = outputs[ (block_index * 8) + 3].state;
  401ee6:	1cda      	adds	r2, r3, #3
  401ee8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401eec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401ef0:	7a52      	ldrb	r2, [r2, #9]
  401ef2:	f885 20fb 	strb.w	r2, [r5, #251]	; 0xfb

			LSB0W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datah) = outputs[ (block_index * 8) + 4].state;
  401ef6:	1d1a      	adds	r2, r3, #4
  401ef8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401efc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401f00:	7a52      	ldrb	r2, [r2, #9]
  401f02:	f885 20fc 	strb.w	r2, [r5, #252]	; 0xfc
			LSB1W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datah) = outputs[ (block_index * 8) + 5].state;
  401f06:	1d5a      	adds	r2, r3, #5
  401f08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401f0c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401f10:	7a52      	ldrb	r2, [r2, #9]
  401f12:	f885 20fd 	strb.w	r2, [r5, #253]	; 0xfd
			LSB2W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datah) = outputs[ (block_index * 8) + 6].state;
  401f16:	1d9a      	adds	r2, r3, #6
  401f18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401f1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  401f20:	7a52      	ldrb	r2, [r2, #9]
  401f22:	f885 20fe 	strb.w	r2, [r5, #254]	; 0xfe
			LSB3W(can_mailbox[PDU_OUTPUT_TX_MB].ul_datah) = outputs[ (block_index * 8) + 7].state;
  401f26:	3307      	adds	r3, #7
  401f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401f2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  401f30:	7a5b      	ldrb	r3, [r3, #9]
  401f32:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
				
			can_mailbox_write(PDU_CAN, &can_mailbox[PDU_OUTPUT_TX_MB]);
  401f36:	f105 0ae0 	add.w	sl, r5, #224	; 0xe0
  401f3a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401f84 <transmit_output_state+0xf0>
  401f3e:	4651      	mov	r1, sl
  401f40:	4648      	mov	r0, r9
  401f42:	4b0c      	ldr	r3, [pc, #48]	; (401f74 <transmit_output_state+0xe0>)
  401f44:	4798      	blx	r3
			can_mailbox_send_transfer_cmd(PDU_CAN, &can_mailbox[PDU_OUTPUT_TX_MB]);
  401f46:	4651      	mov	r1, sl
  401f48:	4648      	mov	r0, r9
  401f4a:	4b0b      	ldr	r3, [pc, #44]	; (401f78 <transmit_output_state+0xe4>)
  401f4c:	4798      	blx	r3
				
			block_index++;
  401f4e:	3401      	adds	r4, #1
  401f50:	b2e4      	uxtb	r4, r4
			block_index = 0;
		}
		
		
		// wait
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( xFrequency ));
  401f52:	2132      	movs	r1, #50	; 0x32
  401f54:	a801      	add	r0, sp, #4
  401f56:	4b09      	ldr	r3, [pc, #36]	; (401f7c <transmit_output_state+0xe8>)
  401f58:	4798      	blx	r3
		can_mailbox[PDU_OUTPUT_TX_MB].uc_length = MAX_CAN_FRAME_DATA_LEN;
  401f5a:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		if ( block_index < NUM_PDU_CHANNEL / 7 + 1 )
  401f5e:	2c01      	cmp	r4, #1
  401f60:	d9a6      	bls.n	401eb0 <transmit_output_state+0x1c>
			block_index = 0;
  401f62:	2400      	movs	r4, #0
  401f64:	e7f5      	b.n	401f52 <transmit_output_state+0xbe>
  401f66:	bf00      	nop
  401f68:	00403805 	.word	0x00403805
  401f6c:	2000c414 	.word	0x2000c414
  401f70:	2000c5f0 	.word	0x2000c5f0
  401f74:	00402495 	.word	0x00402495
  401f78:	004023a3 	.word	0x004023a3
  401f7c:	00403a59 	.word	0x00403a59
  401f80:	004086f4 	.word	0x004086f4
  401f84:	40010000 	.word	0x40010000

00401f88 <ECU_timeout_callback>:
* Even though this function is pretty simple right now, we
* want it as a placeholder incase we need more complicated logic
*/
void ECU_timeout_callback(void){
	
	enable_mask = PDU_TIMEOUT_MASK;
  401f88:	2200      	movs	r2, #0
  401f8a:	4b03      	ldr	r3, [pc, #12]	; (401f98 <ECU_timeout_callback+0x10>)
  401f8c:	601a      	str	r2, [r3, #0]
	PDU.error_flag = true;
  401f8e:	2201      	movs	r2, #1
  401f90:	4b02      	ldr	r3, [pc, #8]	; (401f9c <ECU_timeout_callback+0x14>)
  401f92:	715a      	strb	r2, [r3, #5]
  401f94:	4770      	bx	lr
  401f96:	bf00      	nop
  401f98:	2000c388 	.word	0x2000c388
  401f9c:	2000c380 	.word	0x2000c380

00401fa0 <system_task>:
void system_task(void* pvParameters){
  401fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401fa4:	b082      	sub	sp, #8
	xLastWakeTime = xTaskGetTickCount();
  401fa6:	4b3c      	ldr	r3, [pc, #240]	; (402098 <system_task+0xf8>)
  401fa8:	4798      	blx	r3
  401faa:	9001      	str	r0, [sp, #4]
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401fac:	4c3b      	ldr	r4, [pc, #236]	; (40209c <system_task+0xfc>)
		if(g_recv_timeout_cnt > CAN_TIMEOUT_LIMIT){
  401fae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 4020d8 <system_task+0x138>
			ECU_timeout_callback();
  401fb2:	f8df 8128 	ldr.w	r8, [pc, #296]	; 4020dc <system_task+0x13c>
		get_system_voltages(&PDU.batt_volt, &PDU.rail_voltage_3_3);
  401fb6:	4e3a      	ldr	r6, [pc, #232]	; (4020a0 <system_task+0x100>)
  401fb8:	1eb5      	subs	r5, r6, #2
		get_chip_temp(&PDU.chip_temp);
  401fba:	1d2f      	adds	r7, r5, #4
  401fbc:	e038      	b.n	402030 <system_task+0x90>
			ECU_timeout_callback();
  401fbe:	47c0      	blx	r8
  401fc0:	e043      	b.n	40204a <system_task+0xaa>
			vTaskSuspendAll();
  401fc2:	4b38      	ldr	r3, [pc, #224]	; (4020a4 <system_task+0x104>)
  401fc4:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401fc6:	b672      	cpsid	i
			all_off();
  401fc8:	4b37      	ldr	r3, [pc, #220]	; (4020a8 <system_task+0x108>)
  401fca:	4798      	blx	r3
			for(U8 i =0; i < NUM_HC_CHANNEL; i++){pwm_channel_disable(PDU_PWM, pwm_assignment[i]);}
  401fcc:	2100      	movs	r1, #0
  401fce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401fd2:	4c36      	ldr	r4, [pc, #216]	; (4020ac <system_task+0x10c>)
  401fd4:	47a0      	blx	r4
  401fd6:	2101      	movs	r1, #1
  401fd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401fdc:	47a0      	blx	r4
  401fde:	2102      	movs	r1, #2
  401fe0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401fe4:	47a0      	blx	r4
  401fe6:	2103      	movs	r1, #3
  401fe8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401fec:	47a0      	blx	r4
  401fee:	e7fe      	b.n	401fee <system_task+0x4e>
				if( PDU.batt_volt < ( pwm_voltage_levels[voltage] * VOLTAGE_SCALE_FACTOR )){
  401ff0:	4b2f      	ldr	r3, [pc, #188]	; (4020b0 <system_task+0x110>)
  401ff2:	f8b3 e000 	ldrh.w	lr, [r3]
  401ff6:	f5be 7f48 	cmp.w	lr, #800	; 0x320
  401ffa:	db0e      	blt.n	40201a <system_task+0x7a>
  401ffc:	482d      	ldr	r0, [pc, #180]	; (4020b4 <system_task+0x114>)
  401ffe:	2301      	movs	r3, #1
  402000:	f04f 0c64 	mov.w	ip, #100	; 0x64
  402004:	4619      	mov	r1, r3
  402006:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40200a:	fb0c f202 	mul.w	r2, ip, r2
  40200e:	4572      	cmp	r2, lr
  402010:	dc04      	bgt.n	40201c <system_task+0x7c>
  402012:	3301      	adds	r3, #1
			for(uint8_t voltage = 0; voltage < NUM_VOLTAGE_LVL; voltage++){
  402014:	2b07      	cmp	r3, #7
  402016:	d1f5      	bne.n	402004 <system_task+0x64>
  402018:	e036      	b.n	402088 <system_task+0xe8>
				if( PDU.batt_volt < ( pwm_voltage_levels[voltage] * VOLTAGE_SCALE_FACTOR )){
  40201a:	2100      	movs	r1, #0
					 max_duty_cycle = pwm_staturation_limits[voltage];
  40201c:	4b26      	ldr	r3, [pc, #152]	; (4020b8 <system_task+0x118>)
  40201e:	5c5a      	ldrb	r2, [r3, r1]
  402020:	4b26      	ldr	r3, [pc, #152]	; (4020bc <system_task+0x11c>)
  402022:	701a      	strb	r2, [r3, #0]
					 break;
  402024:	e030      	b.n	402088 <system_task+0xe8>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( xFrequency ));
  402026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40202a:	a801      	add	r0, sp, #4
  40202c:	4b24      	ldr	r3, [pc, #144]	; (4020c0 <system_task+0x120>)
  40202e:	4798      	blx	r3
  402030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402032:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
		port->PIO_CODR = mask;
  402036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40203a:	bf14      	ite	ne
  40203c:	6363      	strne	r3, [r4, #52]	; 0x34
		port->PIO_SODR = mask;
  40203e:	6323      	streq	r3, [r4, #48]	; 0x30
		if(g_recv_timeout_cnt > CAN_TIMEOUT_LIMIT){
  402040:	f8d9 3000 	ldr.w	r3, [r9]
  402044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402048:	d8b9      	bhi.n	401fbe <system_task+0x1e>
		if(PDU.chip_temp > PDU_OVERTEMP){
  40204a:	4b19      	ldr	r3, [pc, #100]	; (4020b0 <system_task+0x110>)
  40204c:	791b      	ldrb	r3, [r3, #4]
  40204e:	2b4b      	cmp	r3, #75	; 0x4b
  402050:	d8b7      	bhi.n	401fc2 <system_task+0x22>
		xSemaphoreTake(afec_semaphore, portMAX_DELAY);
  402052:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4020e0 <system_task+0x140>
  402056:	f04f 31ff 	mov.w	r1, #4294967295
  40205a:	f8da 0000 	ldr.w	r0, [sl]
  40205e:	4b19      	ldr	r3, [pc, #100]	; (4020c4 <system_task+0x124>)
  402060:	4798      	blx	r3
		get_system_voltages(&PDU.batt_volt, &PDU.rail_voltage_3_3);
  402062:	4631      	mov	r1, r6
  402064:	4628      	mov	r0, r5
  402066:	4b18      	ldr	r3, [pc, #96]	; (4020c8 <system_task+0x128>)
  402068:	4798      	blx	r3
		get_chip_temp(&PDU.chip_temp);
  40206a:	4638      	mov	r0, r7
  40206c:	4b17      	ldr	r3, [pc, #92]	; (4020cc <system_task+0x12c>)
  40206e:	4798      	blx	r3
		xSemaphoreGive( afec_semaphore );
  402070:	2300      	movs	r3, #0
  402072:	461a      	mov	r2, r3
  402074:	4619      	mov	r1, r3
  402076:	f8da 0000 	ldr.w	r0, [sl]
  40207a:	f8df a068 	ldr.w	sl, [pc, #104]	; 4020e4 <system_task+0x144>
  40207e:	47d0      	blx	sl
		if(vehicle.eng_status == true){
  402080:	4b13      	ldr	r3, [pc, #76]	; (4020d0 <system_task+0x130>)
  402082:	79db      	ldrb	r3, [r3, #7]
  402084:	2b01      	cmp	r3, #1
  402086:	d0b3      	beq.n	401ff0 <system_task+0x50>
		if(error_mask){
  402088:	4b12      	ldr	r3, [pc, #72]	; (4020d4 <system_task+0x134>)
  40208a:	681b      	ldr	r3, [r3, #0]
  40208c:	2b00      	cmp	r3, #0
  40208e:	d0ca      	beq.n	402026 <system_task+0x86>
			PDU.error_flag = true;
  402090:	2201      	movs	r2, #1
  402092:	4b07      	ldr	r3, [pc, #28]	; (4020b0 <system_task+0x110>)
  402094:	715a      	strb	r2, [r3, #5]
  402096:	e7c6      	b.n	402026 <system_task+0x86>
  402098:	00403805 	.word	0x00403805
  40209c:	400e0e00 	.word	0x400e0e00
  4020a0:	2000c382 	.word	0x2000c382
  4020a4:	004037f5 	.word	0x004037f5
  4020a8:	00400165 	.word	0x00400165
  4020ac:	00402837 	.word	0x00402837
  4020b0:	2000c380 	.word	0x2000c380
  4020b4:	00408740 	.word	0x00408740
  4020b8:	00408738 	.word	0x00408738
  4020bc:	20000014 	.word	0x20000014
  4020c0:	00403a59 	.word	0x00403a59
  4020c4:	00403269 	.word	0x00403269
  4020c8:	004014cd 	.word	0x004014cd
  4020cc:	00401435 	.word	0x00401435
  4020d0:	2000c39c 	.word	0x2000c39c
  4020d4:	2000c38c 	.word	0x2000c38c
  4020d8:	2000c390 	.word	0x2000c390
  4020dc:	00401f89 	.word	0x00401f89
  4020e0:	2000c850 	.word	0x2000c850
  4020e4:	00403075 	.word	0x00403075

004020e8 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4020e8:	b570      	push	{r4, r5, r6, lr}
  4020ea:	b082      	sub	sp, #8
	return afec->AFEC_ISR;
  4020ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4020ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4020f0:	4013      	ands	r3, r2
  4020f2:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4020f4:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4020f6:	4d21      	ldr	r5, [pc, #132]	; (40217c <afec_process_callback+0x94>)
  4020f8:	42a8      	cmp	r0, r5
  4020fa:	bf14      	ite	ne
  4020fc:	2500      	movne	r5, #0
  4020fe:	2501      	moveq	r5, #1
  402100:	006e      	lsls	r6, r5, #1
  402102:	442e      	add	r6, r5
  402104:	e00b      	b.n	40211e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  402106:	2c14      	cmp	r4, #20
  402108:	d824      	bhi.n	402154 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40210a:	9a01      	ldr	r2, [sp, #4]
  40210c:	f104 0108 	add.w	r1, r4, #8
  402110:	2301      	movs	r3, #1
  402112:	408b      	lsls	r3, r1
  402114:	4213      	tst	r3, r2
  402116:	d113      	bne.n	402140 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  402118:	3401      	adds	r4, #1
  40211a:	2c17      	cmp	r4, #23
  40211c:	d02b      	beq.n	402176 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40211e:	2c0f      	cmp	r4, #15
  402120:	d8f1      	bhi.n	402106 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  402122:	9a01      	ldr	r2, [sp, #4]
  402124:	2301      	movs	r3, #1
  402126:	40a3      	lsls	r3, r4
  402128:	4213      	tst	r3, r2
  40212a:	d0f5      	beq.n	402118 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40212c:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  402130:	4423      	add	r3, r4
  402132:	4a13      	ldr	r2, [pc, #76]	; (402180 <afec_process_callback+0x98>)
  402134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402138:	2b00      	cmp	r3, #0
  40213a:	d0ed      	beq.n	402118 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40213c:	4798      	blx	r3
  40213e:	e7eb      	b.n	402118 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  402140:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  402144:	4423      	add	r3, r4
  402146:	4a0e      	ldr	r2, [pc, #56]	; (402180 <afec_process_callback+0x98>)
  402148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40214c:	2b00      	cmp	r3, #0
  40214e:	d0e3      	beq.n	402118 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  402150:	4798      	blx	r3
  402152:	e7e1      	b.n	402118 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  402154:	9a01      	ldr	r2, [sp, #4]
  402156:	f104 0109 	add.w	r1, r4, #9
  40215a:	2301      	movs	r3, #1
  40215c:	408b      	lsls	r3, r1
  40215e:	4213      	tst	r3, r2
  402160:	d0da      	beq.n	402118 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  402162:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  402166:	4423      	add	r3, r4
  402168:	4a05      	ldr	r2, [pc, #20]	; (402180 <afec_process_callback+0x98>)
  40216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40216e:	2b00      	cmp	r3, #0
  402170:	d0d2      	beq.n	402118 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  402172:	4798      	blx	r3
  402174:	e7d0      	b.n	402118 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  402176:	b002      	add	sp, #8
  402178:	bd70      	pop	{r4, r5, r6, pc}
  40217a:	bf00      	nop
  40217c:	400b4000 	.word	0x400b4000
  402180:	2000c524 	.word	0x2000c524

00402184 <afec_ch_set_config>:
{
  402184:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  402186:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  402188:	2301      	movs	r3, #1
  40218a:	408b      	lsls	r3, r1
  40218c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  402190:	7815      	ldrb	r5, [r2, #0]
  402192:	2d00      	cmp	r5, #0
  402194:	bf08      	it	eq
  402196:	2300      	moveq	r3, #0
  402198:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40219a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40219c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40219e:	004b      	lsls	r3, r1, #1
  4021a0:	2103      	movs	r1, #3
  4021a2:	4099      	lsls	r1, r3
  4021a4:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4021a8:	7851      	ldrb	r1, [r2, #1]
  4021aa:	4099      	lsls	r1, r3
  4021ac:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4021ae:	6541      	str	r1, [r0, #84]	; 0x54
}
  4021b0:	bc30      	pop	{r4, r5}
  4021b2:	4770      	bx	lr

004021b4 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4021b4:	784b      	ldrb	r3, [r1, #1]
  4021b6:	780a      	ldrb	r2, [r1, #0]
  4021b8:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4021ba:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4021bc:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4021be:	884b      	ldrh	r3, [r1, #2]
  4021c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4021c4:	6743      	str	r3, [r0, #116]	; 0x74
  4021c6:	4770      	bx	lr

004021c8 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4021c8:	2200      	movs	r2, #0
  4021ca:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4021cc:	4b08      	ldr	r3, [pc, #32]	; (4021f0 <afec_get_config_defaults+0x28>)
  4021ce:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4021d0:	4b08      	ldr	r3, [pc, #32]	; (4021f4 <afec_get_config_defaults+0x2c>)
  4021d2:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4021d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4021d8:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  4021da:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  4021dc:	2302      	movs	r3, #2
  4021de:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  4021e0:	2301      	movs	r3, #1
  4021e2:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  4021e4:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  4021e6:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  4021e8:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  4021ea:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  4021ec:	7683      	strb	r3, [r0, #26]
  4021ee:	4770      	bx	lr
  4021f0:	068e7780 	.word	0x068e7780
  4021f4:	005b8d80 	.word	0x005b8d80

004021f8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4021f8:	2300      	movs	r3, #0
  4021fa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4021fc:	2301      	movs	r3, #1
  4021fe:	7043      	strb	r3, [r0, #1]
  402200:	4770      	bx	lr

00402202 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  402202:	2300      	movs	r3, #0
  402204:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  402206:	2320      	movs	r3, #32
  402208:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  40220a:	23ff      	movs	r3, #255	; 0xff
  40220c:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40220e:	f640 73ff 	movw	r3, #4095	; 0xfff
  402212:	8083      	strh	r3, [r0, #4]
  402214:	4770      	bx	lr
	...

00402218 <afec_init>:
	return afec->AFEC_ISR;
  402218:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40221a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40221e:	d001      	beq.n	402224 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  402220:	2019      	movs	r0, #25
  402222:	4770      	bx	lr
{
  402224:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  402226:	2301      	movs	r3, #1
  402228:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40222a:	7dcb      	ldrb	r3, [r1, #23]
  40222c:	2b00      	cmp	r3, #0
  40222e:	bf14      	ite	ne
  402230:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  402234:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  402236:	7d8b      	ldrb	r3, [r1, #22]
  402238:	2b00      	cmp	r3, #0
  40223a:	bf14      	ite	ne
  40223c:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  402240:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  402242:	7d0b      	ldrb	r3, [r1, #20]
  402244:	061b      	lsls	r3, r3, #24
  402246:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40224a:	690a      	ldr	r2, [r1, #16]
  40224c:	68ce      	ldr	r6, [r1, #12]
  40224e:	4332      	orrs	r2, r6
  402250:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  402252:	7d4a      	ldrb	r2, [r1, #21]
  402254:	0712      	lsls	r2, r2, #28
  402256:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40225a:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  40225c:	688a      	ldr	r2, [r1, #8]
  40225e:	0056      	lsls	r6, r2, #1
  402260:	684a      	ldr	r2, [r1, #4]
  402262:	fbb2 f2f6 	udiv	r2, r2, r6
  402266:	3a01      	subs	r2, #1
  402268:	0212      	lsls	r2, r2, #8
  40226a:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40226c:	4313      	orrs	r3, r2
  40226e:	432b      	orrs	r3, r5
  402270:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  402272:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  402274:	7e0b      	ldrb	r3, [r1, #24]
  402276:	2b00      	cmp	r3, #0
  402278:	bf14      	ite	ne
  40227a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40227e:	2300      	moveq	r3, #0
  402280:	680a      	ldr	r2, [r1, #0]
  402282:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  402284:	7e4a      	ldrb	r2, [r1, #25]
  402286:	2a00      	cmp	r2, #0
  402288:	bf14      	ite	ne
  40228a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40228e:	2200      	moveq	r2, #0
			(config->resolution) |
  402290:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  402292:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  402294:	7e8b      	ldrb	r3, [r1, #26]
  402296:	021b      	lsls	r3, r3, #8
  402298:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40229c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4022a0:	4b0e      	ldr	r3, [pc, #56]	; (4022dc <afec_init+0xc4>)
  4022a2:	4298      	cmp	r0, r3
  4022a4:	d005      	beq.n	4022b2 <afec_init+0x9a>
	if(afec == AFEC1) {
  4022a6:	4b0e      	ldr	r3, [pc, #56]	; (4022e0 <afec_init+0xc8>)
  4022a8:	4298      	cmp	r0, r3
  4022aa:	d00c      	beq.n	4022c6 <afec_init+0xae>
	return STATUS_OK;
  4022ac:	2000      	movs	r0, #0
}
  4022ae:	bc70      	pop	{r4, r5, r6}
  4022b0:	4770      	bx	lr
  4022b2:	4b0c      	ldr	r3, [pc, #48]	; (4022e4 <afec_init+0xcc>)
  4022b4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  4022b8:	2200      	movs	r2, #0
  4022ba:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4022be:	428b      	cmp	r3, r1
  4022c0:	d1fb      	bne.n	4022ba <afec_init+0xa2>
	return STATUS_OK;
  4022c2:	2000      	movs	r0, #0
  4022c4:	e7f3      	b.n	4022ae <afec_init+0x96>
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <afec_init+0xd0>)
  4022c8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  4022cc:	2200      	movs	r2, #0
  4022ce:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4022d2:	428b      	cmp	r3, r1
  4022d4:	d1fb      	bne.n	4022ce <afec_init+0xb6>
	return STATUS_OK;
  4022d6:	2000      	movs	r0, #0
  4022d8:	e7e9      	b.n	4022ae <afec_init+0x96>
  4022da:	bf00      	nop
  4022dc:	400b0000 	.word	0x400b0000
  4022e0:	400b4000 	.word	0x400b4000
  4022e4:	2000c520 	.word	0x2000c520
  4022e8:	2000c57c 	.word	0x2000c57c

004022ec <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4022ec:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4022ee:	4802      	ldr	r0, [pc, #8]	; (4022f8 <AFEC0_Handler+0xc>)
  4022f0:	4b02      	ldr	r3, [pc, #8]	; (4022fc <AFEC0_Handler+0x10>)
  4022f2:	4798      	blx	r3
  4022f4:	bd08      	pop	{r3, pc}
  4022f6:	bf00      	nop
  4022f8:	400b0000 	.word	0x400b0000
  4022fc:	004020e9 	.word	0x004020e9

00402300 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  402300:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  402302:	4802      	ldr	r0, [pc, #8]	; (40230c <AFEC1_Handler+0xc>)
  402304:	4b02      	ldr	r3, [pc, #8]	; (402310 <AFEC1_Handler+0x10>)
  402306:	4798      	blx	r3
  402308:	bd08      	pop	{r3, pc}
  40230a:	bf00      	nop
  40230c:	400b4000 	.word	0x400b4000
  402310:	004020e9 	.word	0x004020e9

00402314 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  402314:	b500      	push	{lr}
  402316:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  402318:	4b13      	ldr	r3, [pc, #76]	; (402368 <afec_enable+0x54>)
  40231a:	4298      	cmp	r0, r3
  40231c:	bf0c      	ite	eq
  40231e:	201f      	moveq	r0, #31
  402320:	201e      	movne	r0, #30
  402322:	4b12      	ldr	r3, [pc, #72]	; (40236c <afec_enable+0x58>)
  402324:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  402326:	4b12      	ldr	r3, [pc, #72]	; (402370 <afec_enable+0x5c>)
  402328:	789b      	ldrb	r3, [r3, #2]
  40232a:	2bff      	cmp	r3, #255	; 0xff
  40232c:	d01a      	beq.n	402364 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40232e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402332:	fab3 f383 	clz	r3, r3
  402336:	095b      	lsrs	r3, r3, #5
  402338:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40233a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40233c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402340:	2200      	movs	r2, #0
  402342:	4b0c      	ldr	r3, [pc, #48]	; (402374 <afec_enable+0x60>)
  402344:	701a      	strb	r2, [r3, #0]
	return flags;
  402346:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  402348:	4a09      	ldr	r2, [pc, #36]	; (402370 <afec_enable+0x5c>)
  40234a:	7893      	ldrb	r3, [r2, #2]
  40234c:	3301      	adds	r3, #1
  40234e:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402350:	b129      	cbz	r1, 40235e <afec_enable+0x4a>
		cpu_irq_enable();
  402352:	2201      	movs	r2, #1
  402354:	4b07      	ldr	r3, [pc, #28]	; (402374 <afec_enable+0x60>)
  402356:	701a      	strb	r2, [r3, #0]
  402358:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40235c:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40235e:	b003      	add	sp, #12
  402360:	f85d fb04 	ldr.w	pc, [sp], #4
  402364:	e7fe      	b.n	402364 <afec_enable+0x50>
  402366:	bf00      	nop
  402368:	400b4000 	.word	0x400b4000
  40236c:	004006c1 	.word	0x004006c1
  402370:	2000c51c 	.word	0x2000c51c
  402374:	2000000a 	.word	0x2000000a

00402378 <can_disable_autobaud_listen_mode>:
  402378:	6803      	ldr	r3, [r0, #0]
  40237a:	f023 0304 	bic.w	r3, r3, #4
  40237e:	6003      	str	r3, [r0, #0]
  402380:	4770      	bx	lr

00402382 <can_enable_autobaud_listen_mode>:
  402382:	6803      	ldr	r3, [r0, #0]
  402384:	f043 0304 	orr.w	r3, r3, #4
  402388:	6003      	str	r3, [r0, #0]
  40238a:	4770      	bx	lr

0040238c <can_enable_interrupt>:
  40238c:	6041      	str	r1, [r0, #4]
  40238e:	4770      	bx	lr

00402390 <can_disable_interrupt>:
  402390:	6081      	str	r1, [r0, #8]
  402392:	4770      	bx	lr

00402394 <can_get_status>:
  402394:	6900      	ldr	r0, [r0, #16]
  402396:	4770      	bx	lr

00402398 <can_mailbox_get_status>:
  402398:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  40239c:	f8d1 0210 	ldr.w	r0, [r1, #528]	; 0x210
  4023a0:	4770      	bx	lr

004023a2 <can_mailbox_send_transfer_cmd>:
  4023a2:	780a      	ldrb	r2, [r1, #0]
  4023a4:	798b      	ldrb	r3, [r1, #6]
  4023a6:	041b      	lsls	r3, r3, #16
  4023a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4023ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4023b0:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  4023b4:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  4023b8:	4770      	bx	lr

004023ba <can_mailbox_init>:
  4023ba:	680b      	ldr	r3, [r1, #0]
  4023bc:	790a      	ldrb	r2, [r1, #4]
  4023be:	b31a      	cbz	r2, 402408 <can_mailbox_init+0x4e>
  4023c0:	b430      	push	{r4, r5}
  4023c2:	b2db      	uxtb	r3, r3
  4023c4:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4023c8:	f8d2 4200 	ldr.w	r4, [r2, #512]	; 0x200
  4023cc:	79cd      	ldrb	r5, [r1, #7]
  4023ce:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
  4023d2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4023d6:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
  4023da:	794c      	ldrb	r4, [r1, #5]
  4023dc:	b32c      	cbz	r4, 40242a <can_mailbox_init+0x70>
  4023de:	68cc      	ldr	r4, [r1, #12]
  4023e0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4023e4:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
  4023e8:	690c      	ldr	r4, [r1, #16]
  4023ea:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4023ee:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
  4023f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  4023f6:	7909      	ldrb	r1, [r1, #4]
  4023f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
  4023fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  402400:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  402404:	bc30      	pop	{r4, r5}
  402406:	4770      	bx	lr
  402408:	b2db      	uxtb	r3, r3
  40240a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40240e:	2300      	movs	r3, #0
  402410:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  402414:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  402418:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
  40241c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  402420:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
  402424:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  402428:	4770      	bx	lr
  40242a:	68cc      	ldr	r4, [r1, #12]
  40242c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
  402430:	690c      	ldr	r4, [r1, #16]
  402432:	eb00 1343 	add.w	r3, r0, r3, lsl #5
  402436:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
  40243a:	e7da      	b.n	4023f2 <can_mailbox_init+0x38>

0040243c <can_mailbox_read>:
  40243c:	b570      	push	{r4, r5, r6, lr}
  40243e:	688b      	ldr	r3, [r1, #8]
  402440:	f003 72c0 	and.w	r2, r3, #25165824	; 0x1800000
  402444:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
  402448:	bf14      	ite	ne
  40244a:	2500      	movne	r5, #0
  40244c:	2502      	moveq	r5, #2
  40244e:	780a      	ldrb	r2, [r1, #0]
  402450:	eb00 1642 	add.w	r6, r0, r2, lsl #5
  402454:	f8d6 420c 	ldr.w	r4, [r6, #524]	; 0x20c
  402458:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
  40245c:	614c      	str	r4, [r1, #20]
  40245e:	f3c3 4303 	ubfx	r3, r3, #16, #4
  402462:	718b      	strb	r3, [r1, #6]
  402464:	f8d6 4214 	ldr.w	r4, [r6, #532]	; 0x214
  402468:	618c      	str	r4, [r1, #24]
  40246a:	2b04      	cmp	r3, #4
  40246c:	d902      	bls.n	402474 <can_mailbox_read+0x38>
  40246e:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
  402472:	61cb      	str	r3, [r1, #28]
  402474:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  402478:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
  40247c:	608b      	str	r3, [r1, #8]
  40247e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402482:	bf18      	it	ne
  402484:	f045 0504 	orrne.w	r5, r5, #4
  402488:	4b01      	ldr	r3, [pc, #4]	; (402490 <can_mailbox_read+0x54>)
  40248a:	4798      	blx	r3
  40248c:	4628      	mov	r0, r5
  40248e:	bd70      	pop	{r4, r5, r6, pc}
  402490:	004023a3 	.word	0x004023a3

00402494 <can_mailbox_write>:
  402494:	780b      	ldrb	r3, [r1, #0]
  402496:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  40249a:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
  40249e:	608a      	str	r2, [r1, #8]
  4024a0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
  4024a4:	d028      	beq.n	4024f8 <can_mailbox_write+0x64>
  4024a6:	b410      	push	{r4}
  4024a8:	794a      	ldrb	r2, [r1, #5]
  4024aa:	b1fa      	cbz	r2, 4024ec <can_mailbox_write+0x58>
  4024ac:	690a      	ldr	r2, [r1, #16]
  4024ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4024b2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4024b6:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  4024ba:	698c      	ldr	r4, [r1, #24]
  4024bc:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4024c0:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
  4024c4:	798a      	ldrb	r2, [r1, #6]
  4024c6:	2a04      	cmp	r2, #4
  4024c8:	d904      	bls.n	4024d4 <can_mailbox_write+0x40>
  4024ca:	69cc      	ldr	r4, [r1, #28]
  4024cc:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4024d0:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
  4024d4:	798a      	ldrb	r2, [r1, #6]
  4024d6:	0412      	lsls	r2, r2, #16
  4024d8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4024dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4024e0:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
  4024e4:	2000      	movs	r0, #0
  4024e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024ea:	4770      	bx	lr
  4024ec:	690c      	ldr	r4, [r1, #16]
  4024ee:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4024f2:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
  4024f6:	e7e0      	b.n	4024ba <can_mailbox_write+0x26>
  4024f8:	2001      	movs	r0, #1
  4024fa:	4770      	bx	lr

004024fc <can_reset_all_mailbox>:
  4024fc:	b570      	push	{r4, r5, r6, lr}
  4024fe:	b088      	sub	sp, #32
  402500:	4606      	mov	r6, r0
  402502:	2400      	movs	r4, #0
  402504:	f88d 4004 	strb.w	r4, [sp, #4]
  402508:	4d04      	ldr	r5, [pc, #16]	; (40251c <can_reset_all_mailbox+0x20>)
  40250a:	9400      	str	r4, [sp, #0]
  40250c:	4669      	mov	r1, sp
  40250e:	4630      	mov	r0, r6
  402510:	47a8      	blx	r5
  402512:	3401      	adds	r4, #1
  402514:	2c08      	cmp	r4, #8
  402516:	d1f8      	bne.n	40250a <can_reset_all_mailbox+0xe>
  402518:	b008      	add	sp, #32
  40251a:	bd70      	pop	{r4, r5, r6, pc}
  40251c:	004023bb 	.word	0x004023bb

00402520 <can_init>:
  402520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402522:	f246 13a8 	movw	r3, #25000	; 0x61a8
  402526:	fb03 f402 	mul.w	r4, r3, r2
  40252a:	190b      	adds	r3, r1, r4
  40252c:	3b01      	subs	r3, #1
  40252e:	fbb3 f3f4 	udiv	r3, r3, r4
  402532:	2b80      	cmp	r3, #128	; 0x80
  402534:	d866      	bhi.n	402604 <can_init+0xe4>
  402536:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
  40253a:	fb04 f402 	mul.w	r4, r4, r2
  40253e:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
  402542:	d861      	bhi.n	402608 <can_init+0xe8>
  402544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402548:	fb03 f202 	mul.w	r2, r3, r2
  40254c:	2708      	movs	r7, #8
  40254e:	f04f 36ff 	mov.w	r6, #4294967295
  402552:	463b      	mov	r3, r7
  402554:	e004      	b.n	402560 <can_init+0x40>
  402556:	3301      	adds	r3, #1
  402558:	b2db      	uxtb	r3, r3
  40255a:	4414      	add	r4, r2
  40255c:	2b1a      	cmp	r3, #26
  40255e:	d00c      	beq.n	40257a <can_init+0x5a>
  402560:	fbb1 f5f4 	udiv	r5, r1, r4
  402564:	2d80      	cmp	r5, #128	; 0x80
  402566:	d8f6      	bhi.n	402556 <can_init+0x36>
  402568:	fb04 1515 	mls	r5, r4, r5, r1
  40256c:	42b5      	cmp	r5, r6
  40256e:	d2f2      	bcs.n	402556 <can_init+0x36>
  402570:	b115      	cbz	r5, 402578 <can_init+0x58>
  402572:	462e      	mov	r6, r5
  402574:	461f      	mov	r7, r3
  402576:	e7ee      	b.n	402556 <can_init+0x36>
  402578:	461f      	mov	r7, r3
  40257a:	fb02 f207 	mul.w	r2, r2, r7
  40257e:	fbb1 f1f2 	udiv	r1, r1, r2
  402582:	b2cb      	uxtb	r3, r1
  402584:	2b01      	cmp	r3, #1
  402586:	d941      	bls.n	40260c <can_init+0xec>
  402588:	4604      	mov	r4, r0
  40258a:	f1a7 0208 	sub.w	r2, r7, #8
  40258e:	6803      	ldr	r3, [r0, #0]
  402590:	f023 0301 	bic.w	r3, r3, #1
  402594:	6003      	str	r3, [r0, #0]
  402596:	4d1e      	ldr	r5, [pc, #120]	; (402610 <can_init+0xf0>)
  402598:	0056      	lsls	r6, r2, #1
  40259a:	18b7      	adds	r7, r6, r2
  40259c:	eb05 0747 	add.w	r7, r5, r7, lsl #1
  4025a0:	78bb      	ldrb	r3, [r7, #2]
  4025a2:	3b01      	subs	r3, #1
  4025a4:	011b      	lsls	r3, r3, #4
  4025a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025aa:	7878      	ldrb	r0, [r7, #1]
  4025ac:	3801      	subs	r0, #1
  4025ae:	0200      	lsls	r0, r0, #8
  4025b0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  4025b4:	4303      	orrs	r3, r0
  4025b6:	78f8      	ldrb	r0, [r7, #3]
  4025b8:	3801      	subs	r0, #1
  4025ba:	f000 0007 	and.w	r0, r0, #7
  4025be:	4303      	orrs	r3, r0
  4025c0:	793a      	ldrb	r2, [r7, #4]
  4025c2:	3a01      	subs	r2, #1
  4025c4:	0312      	lsls	r2, r2, #12
  4025c6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
  4025ca:	4313      	orrs	r3, r2
  4025cc:	b2ca      	uxtb	r2, r1
  4025ce:	3a01      	subs	r2, #1
  4025d0:	0412      	lsls	r2, r2, #16
  4025d2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  4025d6:	4313      	orrs	r3, r2
  4025d8:	6163      	str	r3, [r4, #20]
  4025da:	4620      	mov	r0, r4
  4025dc:	4b0d      	ldr	r3, [pc, #52]	; (402614 <can_init+0xf4>)
  4025de:	4798      	blx	r3
  4025e0:	6823      	ldr	r3, [r4, #0]
  4025e2:	f043 0301 	orr.w	r3, r3, #1
  4025e6:	6023      	str	r3, [r4, #0]
  4025e8:	2300      	movs	r3, #0
  4025ea:	490b      	ldr	r1, [pc, #44]	; (402618 <can_init+0xf8>)
  4025ec:	6922      	ldr	r2, [r4, #16]
  4025ee:	3301      	adds	r3, #1
  4025f0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
  4025f4:	d101      	bne.n	4025fa <can_init+0xda>
  4025f6:	428b      	cmp	r3, r1
  4025f8:	d1f8      	bne.n	4025ec <can_init+0xcc>
  4025fa:	4807      	ldr	r0, [pc, #28]	; (402618 <can_init+0xf8>)
  4025fc:	1a18      	subs	r0, r3, r0
  4025fe:	bf18      	it	ne
  402600:	2001      	movne	r0, #1
  402602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402604:	2000      	movs	r0, #0
  402606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402608:	2000      	movs	r0, #0
  40260a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40260c:	2000      	movs	r0, #0
  40260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402610:	00408750 	.word	0x00408750
  402614:	004024fd 	.word	0x004024fd
  402618:	000186a0 	.word	0x000186a0

0040261c <pwm_clocks_generate>:
  40261c:	b4f0      	push	{r4, r5, r6, r7}
  40261e:	b08c      	sub	sp, #48	; 0x30
  402620:	4607      	mov	r7, r0
  402622:	460e      	mov	r6, r1
  402624:	ac01      	add	r4, sp, #4
  402626:	4d11      	ldr	r5, [pc, #68]	; (40266c <pwm_clocks_generate+0x50>)
  402628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40262a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40262c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40262e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  402638:	aa01      	add	r2, sp, #4
  40263a:	2300      	movs	r3, #0
  40263c:	f852 0b04 	ldr.w	r0, [r2], #4
  402640:	fbb6 f0f0 	udiv	r0, r6, r0
  402644:	fbb0 f0f7 	udiv	r0, r0, r7
  402648:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40264c:	d907      	bls.n	40265e <pwm_clocks_generate+0x42>
  40264e:	3301      	adds	r3, #1
  402650:	2b0b      	cmp	r3, #11
  402652:	d1f3      	bne.n	40263c <pwm_clocks_generate+0x20>
  402654:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402658:	b00c      	add	sp, #48	; 0x30
  40265a:	bcf0      	pop	{r4, r5, r6, r7}
  40265c:	4770      	bx	lr
  40265e:	2b0a      	cmp	r3, #10
  402660:	bf94      	ite	ls
  402662:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
  402666:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  40266a:	e7f5      	b.n	402658 <pwm_clocks_generate+0x3c>
  40266c:	004087bc 	.word	0x004087bc

00402670 <pwm_init>:
  402670:	b570      	push	{r4, r5, r6, lr}
  402672:	4606      	mov	r6, r0
  402674:	460d      	mov	r5, r1
  402676:	680c      	ldr	r4, [r1, #0]
  402678:	b144      	cbz	r4, 40268c <pwm_init+0x1c>
  40267a:	6889      	ldr	r1, [r1, #8]
  40267c:	4620      	mov	r0, r4
  40267e:	4b0c      	ldr	r3, [pc, #48]	; (4026b0 <pwm_init+0x40>)
  402680:	4798      	blx	r3
  402682:	4604      	mov	r4, r0
  402684:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402688:	4298      	cmp	r0, r3
  40268a:	d00c      	beq.n	4026a6 <pwm_init+0x36>
  40268c:	6868      	ldr	r0, [r5, #4]
  40268e:	b140      	cbz	r0, 4026a2 <pwm_init+0x32>
  402690:	68a9      	ldr	r1, [r5, #8]
  402692:	4b07      	ldr	r3, [pc, #28]	; (4026b0 <pwm_init+0x40>)
  402694:	4798      	blx	r3
  402696:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40269a:	4298      	cmp	r0, r3
  40269c:	d005      	beq.n	4026aa <pwm_init+0x3a>
  40269e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
  4026a2:	6034      	str	r4, [r6, #0]
  4026a4:	2400      	movs	r4, #0
  4026a6:	4620      	mov	r0, r4
  4026a8:	bd70      	pop	{r4, r5, r6, pc}
  4026aa:	4604      	mov	r4, r0
  4026ac:	e7fb      	b.n	4026a6 <pwm_init+0x36>
  4026ae:	bf00      	nop
  4026b0:	0040261d 	.word	0x0040261d

004026b4 <pwm_channel_init>:
  4026b4:	b470      	push	{r4, r5, r6}
  4026b6:	680a      	ldr	r2, [r1, #0]
  4026b8:	684b      	ldr	r3, [r1, #4]
  4026ba:	f003 030f 	and.w	r3, r3, #15
  4026be:	8a8c      	ldrh	r4, [r1, #20]
  4026c0:	4323      	orrs	r3, r4
  4026c2:	890c      	ldrh	r4, [r1, #8]
  4026c4:	4323      	orrs	r3, r4
  4026c6:	7a8c      	ldrb	r4, [r1, #10]
  4026c8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
  4026cc:	7d8c      	ldrb	r4, [r1, #22]
  4026ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4026d2:	7dcc      	ldrb	r4, [r1, #23]
  4026d4:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  4026d8:	7e0c      	ldrb	r4, [r1, #24]
  4026da:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4026de:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  4026e2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  4026e6:	68cb      	ldr	r3, [r1, #12]
  4026e8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
  4026ec:	690b      	ldr	r3, [r1, #16]
  4026ee:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  4026f2:	7d8b      	ldrb	r3, [r1, #22]
  4026f4:	b13b      	cbz	r3, 402706 <pwm_channel_init+0x52>
  4026f6:	8b8c      	ldrh	r4, [r1, #28]
  4026f8:	8b4b      	ldrh	r3, [r1, #26]
  4026fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4026fe:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  402702:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  402706:	6c85      	ldr	r5, [r0, #72]	; 0x48
  402708:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  40270c:	4093      	lsls	r3, r2
  40270e:	43db      	mvns	r3, r3
  402710:	401d      	ands	r5, r3
  402712:	7fcc      	ldrb	r4, [r1, #31]
  402714:	fa04 f602 	lsl.w	r6, r4, r2
  402718:	7f8c      	ldrb	r4, [r1, #30]
  40271a:	4094      	lsls	r4, r2
  40271c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  402720:	432c      	orrs	r4, r5
  402722:	6484      	str	r4, [r0, #72]	; 0x48
  402724:	6c44      	ldr	r4, [r0, #68]	; 0x44
  402726:	4023      	ands	r3, r4
  402728:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  40272c:	fa04 f502 	lsl.w	r5, r4, r2
  402730:	f891 4020 	ldrb.w	r4, [r1, #32]
  402734:	4094      	lsls	r4, r2
  402736:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40273a:	4323      	orrs	r3, r4
  40273c:	6443      	str	r3, [r0, #68]	; 0x44
  40273e:	2301      	movs	r3, #1
  402740:	4093      	lsls	r3, r2
  402742:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  402746:	2c00      	cmp	r4, #0
  402748:	d04c      	beq.n	4027e4 <pwm_channel_init+0x130>
  40274a:	6a04      	ldr	r4, [r0, #32]
  40274c:	431c      	orrs	r4, r3
  40274e:	6204      	str	r4, [r0, #32]
  402750:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  402754:	2c02      	cmp	r4, #2
  402756:	d04a      	beq.n	4027ee <pwm_channel_init+0x13a>
  402758:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  40275c:	43dc      	mvns	r4, r3
  40275e:	4025      	ands	r5, r4
  402760:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
  402764:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  402768:	2d01      	cmp	r5, #1
  40276a:	bf07      	ittee	eq
  40276c:	6e84      	ldreq	r4, [r0, #104]	; 0x68
  40276e:	431c      	orreq	r4, r3
  402770:	6e85      	ldrne	r5, [r0, #104]	; 0x68
  402772:	402c      	andne	r4, r5
  402774:	6684      	str	r4, [r0, #104]	; 0x68
  402776:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40277a:	2c02      	cmp	r4, #2
  40277c:	d03d      	beq.n	4027fa <pwm_channel_init+0x146>
  40277e:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  402782:	041b      	lsls	r3, r3, #16
  402784:	43dc      	mvns	r4, r3
  402786:	4025      	ands	r5, r4
  402788:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
  40278c:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  402790:	2d01      	cmp	r5, #1
  402792:	d039      	beq.n	402808 <pwm_channel_init+0x154>
  402794:	6e83      	ldr	r3, [r0, #104]	; 0x68
  402796:	401c      	ands	r4, r3
  402798:	6684      	str	r4, [r0, #104]	; 0x68
  40279a:	00d2      	lsls	r2, r2, #3
  40279c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  40279e:	23ff      	movs	r3, #255	; 0xff
  4027a0:	4093      	lsls	r3, r2
  4027a2:	ea24 0403 	bic.w	r4, r4, r3
  4027a6:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  4027aa:	fa03 f202 	lsl.w	r2, r3, r2
  4027ae:	4322      	orrs	r2, r4
  4027b0:	66c2      	str	r2, [r0, #108]	; 0x6c
  4027b2:	680a      	ldr	r2, [r1, #0]
  4027b4:	b952      	cbnz	r2, 4027cc <pwm_channel_init+0x118>
  4027b6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  4027ba:	2b01      	cmp	r3, #1
  4027bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4027be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4027c2:	bf08      	it	eq
  4027c4:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
  4027c8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  4027cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4027ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4027d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4027d4:	430b      	orrs	r3, r1
  4027d6:	3220      	adds	r2, #32
  4027d8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  4027dc:	6043      	str	r3, [r0, #4]
  4027de:	2000      	movs	r0, #0
  4027e0:	bc70      	pop	{r4, r5, r6}
  4027e2:	4770      	bx	lr
  4027e4:	6a04      	ldr	r4, [r0, #32]
  4027e6:	ea24 0403 	bic.w	r4, r4, r3
  4027ea:	6204      	str	r4, [r0, #32]
  4027ec:	e7b0      	b.n	402750 <pwm_channel_init+0x9c>
  4027ee:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4027f2:	431c      	orrs	r4, r3
  4027f4:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  4027f8:	e7bd      	b.n	402776 <pwm_channel_init+0xc2>
  4027fa:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4027fe:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  402802:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  402806:	e7c8      	b.n	40279a <pwm_channel_init+0xe6>
  402808:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40280a:	4323      	orrs	r3, r4
  40280c:	6683      	str	r3, [r0, #104]	; 0x68
  40280e:	e7c4      	b.n	40279a <pwm_channel_init+0xe6>

00402810 <pwm_channel_update_duty>:
  402810:	690b      	ldr	r3, [r1, #16]
  402812:	4293      	cmp	r3, r2
  402814:	d202      	bcs.n	40281c <pwm_channel_update_duty+0xc>
  402816:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40281a:	4770      	bx	lr
  40281c:	680b      	ldr	r3, [r1, #0]
  40281e:	60ca      	str	r2, [r1, #12]
  402820:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  402824:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
  402828:	2000      	movs	r0, #0
  40282a:	4770      	bx	lr

0040282c <pwm_channel_enable>:
  40282c:	2301      	movs	r3, #1
  40282e:	fa03 f101 	lsl.w	r1, r3, r1
  402832:	6041      	str	r1, [r0, #4]
  402834:	4770      	bx	lr

00402836 <pwm_channel_disable>:
  402836:	2301      	movs	r3, #1
  402838:	fa03 f101 	lsl.w	r1, r3, r1
  40283c:	6081      	str	r1, [r0, #8]
  40283e:	4770      	bx	lr

00402840 <pwm_channel_enable_interrupt>:
  402840:	3210      	adds	r2, #16
  402842:	2301      	movs	r3, #1
  402844:	fa03 f202 	lsl.w	r2, r3, r2
  402848:	fa03 f101 	lsl.w	r1, r3, r1
  40284c:	430a      	orrs	r2, r1
  40284e:	6102      	str	r2, [r0, #16]
  402850:	4770      	bx	lr

00402852 <pwm_channel_disable_interrupt>:
  402852:	3210      	adds	r2, #16
  402854:	2301      	movs	r3, #1
  402856:	fa03 f202 	lsl.w	r2, r3, r2
  40285a:	fa03 f101 	lsl.w	r1, r3, r1
  40285e:	430a      	orrs	r2, r1
  402860:	6142      	str	r2, [r0, #20]
  402862:	4770      	bx	lr

00402864 <_read>:
  402864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402868:	b980      	cbnz	r0, 40288c <_read+0x28>
  40286a:	460c      	mov	r4, r1
  40286c:	4690      	mov	r8, r2
  40286e:	2a00      	cmp	r2, #0
  402870:	dd0f      	ble.n	402892 <_read+0x2e>
  402872:	188f      	adds	r7, r1, r2
  402874:	4e08      	ldr	r6, [pc, #32]	; (402898 <_read+0x34>)
  402876:	4d09      	ldr	r5, [pc, #36]	; (40289c <_read+0x38>)
  402878:	6830      	ldr	r0, [r6, #0]
  40287a:	4621      	mov	r1, r4
  40287c:	682b      	ldr	r3, [r5, #0]
  40287e:	4798      	blx	r3
  402880:	3401      	adds	r4, #1
  402882:	42bc      	cmp	r4, r7
  402884:	d1f8      	bne.n	402878 <_read+0x14>
  402886:	4640      	mov	r0, r8
  402888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40288c:	f04f 38ff 	mov.w	r8, #4294967295
  402890:	e7f9      	b.n	402886 <_read+0x22>
  402892:	4680      	mov	r8, r0
  402894:	e7f7      	b.n	402886 <_read+0x22>
  402896:	bf00      	nop
  402898:	2000c5e4 	.word	0x2000c5e4
  40289c:	2000c5dc 	.word	0x2000c5dc

004028a0 <_write>:
  4028a0:	3801      	subs	r0, #1
  4028a2:	2802      	cmp	r0, #2
  4028a4:	d815      	bhi.n	4028d2 <_write+0x32>
  4028a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4028aa:	460e      	mov	r6, r1
  4028ac:	4614      	mov	r4, r2
  4028ae:	b19a      	cbz	r2, 4028d8 <_write+0x38>
  4028b0:	460d      	mov	r5, r1
  4028b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4028ec <_write+0x4c>
  4028b6:	4f0c      	ldr	r7, [pc, #48]	; (4028e8 <_write+0x48>)
  4028b8:	f8d8 0000 	ldr.w	r0, [r8]
  4028bc:	f815 1b01 	ldrb.w	r1, [r5], #1
  4028c0:	683b      	ldr	r3, [r7, #0]
  4028c2:	4798      	blx	r3
  4028c4:	2800      	cmp	r0, #0
  4028c6:	db0a      	blt.n	4028de <_write+0x3e>
  4028c8:	1ba8      	subs	r0, r5, r6
  4028ca:	3c01      	subs	r4, #1
  4028cc:	d1f4      	bne.n	4028b8 <_write+0x18>
  4028ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028d2:	f04f 30ff 	mov.w	r0, #4294967295
  4028d6:	4770      	bx	lr
  4028d8:	4610      	mov	r0, r2
  4028da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028de:	f04f 30ff 	mov.w	r0, #4294967295
  4028e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028e6:	bf00      	nop
  4028e8:	2000c5e0 	.word	0x2000c5e0
  4028ec:	2000c5e4 	.word	0x2000c5e4

004028f0 <uart_init>:
  4028f0:	b410      	push	{r4}
  4028f2:	23ac      	movs	r3, #172	; 0xac
  4028f4:	6003      	str	r3, [r0, #0]
  4028f6:	680b      	ldr	r3, [r1, #0]
  4028f8:	684a      	ldr	r2, [r1, #4]
  4028fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4028fe:	091b      	lsrs	r3, r3, #4
  402900:	1e5c      	subs	r4, r3, #1
  402902:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402906:	4294      	cmp	r4, r2
  402908:	d80c      	bhi.n	402924 <uart_init+0x34>
  40290a:	6203      	str	r3, [r0, #32]
  40290c:	688b      	ldr	r3, [r1, #8]
  40290e:	6043      	str	r3, [r0, #4]
  402910:	f240 2302 	movw	r3, #514	; 0x202
  402914:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  402918:	2350      	movs	r3, #80	; 0x50
  40291a:	6003      	str	r3, [r0, #0]
  40291c:	2000      	movs	r0, #0
  40291e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402922:	4770      	bx	lr
  402924:	2001      	movs	r0, #1
  402926:	e7fa      	b.n	40291e <uart_init+0x2e>

00402928 <uart_write>:
  402928:	6943      	ldr	r3, [r0, #20]
  40292a:	f013 0f02 	tst.w	r3, #2
  40292e:	bf1a      	itte	ne
  402930:	61c1      	strne	r1, [r0, #28]
  402932:	2000      	movne	r0, #0
  402934:	2001      	moveq	r0, #1
  402936:	4770      	bx	lr

00402938 <uart_read>:
  402938:	6943      	ldr	r3, [r0, #20]
  40293a:	f013 0f01 	tst.w	r3, #1
  40293e:	bf1d      	ittte	ne
  402940:	6983      	ldrne	r3, [r0, #24]
  402942:	700b      	strbne	r3, [r1, #0]
  402944:	2000      	movne	r0, #0
  402946:	2001      	moveq	r0, #1
  402948:	4770      	bx	lr

0040294a <usart_write>:
  40294a:	6943      	ldr	r3, [r0, #20]
  40294c:	f013 0f02 	tst.w	r3, #2
  402950:	bf1d      	ittte	ne
  402952:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402956:	61c1      	strne	r1, [r0, #28]
  402958:	2000      	movne	r0, #0
  40295a:	2001      	moveq	r0, #1
  40295c:	4770      	bx	lr

0040295e <usart_read>:
  40295e:	6943      	ldr	r3, [r0, #20]
  402960:	f013 0f01 	tst.w	r3, #1
  402964:	d005      	beq.n	402972 <usart_read+0x14>
  402966:	6983      	ldr	r3, [r0, #24]
  402968:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40296c:	600b      	str	r3, [r1, #0]
  40296e:	2000      	movs	r0, #0
  402970:	4770      	bx	lr
  402972:	2001      	movs	r0, #1
  402974:	4770      	bx	lr

00402976 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402976:	f100 0308 	add.w	r3, r0, #8
  40297a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40297c:	f04f 32ff 	mov.w	r2, #4294967295
  402980:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402982:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402984:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  402986:	2300      	movs	r3, #0
  402988:	6003      	str	r3, [r0, #0]
  40298a:	4770      	bx	lr

0040298c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40298c:	2300      	movs	r3, #0
  40298e:	6103      	str	r3, [r0, #16]
  402990:	4770      	bx	lr

00402992 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  402992:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  402994:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  402996:	689a      	ldr	r2, [r3, #8]
  402998:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40299a:	689a      	ldr	r2, [r3, #8]
  40299c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40299e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4029a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4029a2:	6803      	ldr	r3, [r0, #0]
  4029a4:	3301      	adds	r3, #1
  4029a6:	6003      	str	r3, [r0, #0]
  4029a8:	4770      	bx	lr

004029aa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4029aa:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4029ac:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4029ae:	f1b5 3fff 	cmp.w	r5, #4294967295
  4029b2:	d002      	beq.n	4029ba <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4029b4:	f100 0208 	add.w	r2, r0, #8
  4029b8:	e002      	b.n	4029c0 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4029ba:	6902      	ldr	r2, [r0, #16]
  4029bc:	e004      	b.n	4029c8 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4029be:	461a      	mov	r2, r3
  4029c0:	6853      	ldr	r3, [r2, #4]
  4029c2:	681c      	ldr	r4, [r3, #0]
  4029c4:	42a5      	cmp	r5, r4
  4029c6:	d2fa      	bcs.n	4029be <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4029c8:	6853      	ldr	r3, [r2, #4]
  4029ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4029cc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4029ce:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4029d0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4029d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4029d4:	6803      	ldr	r3, [r0, #0]
  4029d6:	3301      	adds	r3, #1
  4029d8:	6003      	str	r3, [r0, #0]
}
  4029da:	bc30      	pop	{r4, r5}
  4029dc:	4770      	bx	lr

004029de <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4029de:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4029e0:	6842      	ldr	r2, [r0, #4]
  4029e2:	6881      	ldr	r1, [r0, #8]
  4029e4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4029e6:	6882      	ldr	r2, [r0, #8]
  4029e8:	6841      	ldr	r1, [r0, #4]
  4029ea:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4029ec:	685a      	ldr	r2, [r3, #4]
  4029ee:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4029f0:	bf04      	itt	eq
  4029f2:	6882      	ldreq	r2, [r0, #8]
  4029f4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4029f6:	2200      	movs	r2, #0
  4029f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4029fa:	681a      	ldr	r2, [r3, #0]
  4029fc:	3a01      	subs	r2, #1
  4029fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  402a00:	6818      	ldr	r0, [r3, #0]
}
  402a02:	4770      	bx	lr

00402a04 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  402a04:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  402a06:	2300      	movs	r3, #0
  402a08:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  402a0a:	4b0d      	ldr	r3, [pc, #52]	; (402a40 <prvTaskExitError+0x3c>)
  402a0c:	681b      	ldr	r3, [r3, #0]
  402a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a12:	d008      	beq.n	402a26 <prvTaskExitError+0x22>
	__asm volatile
  402a14:	f04f 0350 	mov.w	r3, #80	; 0x50
  402a18:	f383 8811 	msr	BASEPRI, r3
  402a1c:	f3bf 8f6f 	isb	sy
  402a20:	f3bf 8f4f 	dsb	sy
  402a24:	e7fe      	b.n	402a24 <prvTaskExitError+0x20>
  402a26:	f04f 0350 	mov.w	r3, #80	; 0x50
  402a2a:	f383 8811 	msr	BASEPRI, r3
  402a2e:	f3bf 8f6f 	isb	sy
  402a32:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  402a36:	9b01      	ldr	r3, [sp, #4]
  402a38:	2b00      	cmp	r3, #0
  402a3a:	d0fc      	beq.n	402a36 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  402a3c:	b002      	add	sp, #8
  402a3e:	4770      	bx	lr
  402a40:	20000010 	.word	0x20000010

00402a44 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  402a44:	4808      	ldr	r0, [pc, #32]	; (402a68 <prvPortStartFirstTask+0x24>)
  402a46:	6800      	ldr	r0, [r0, #0]
  402a48:	6800      	ldr	r0, [r0, #0]
  402a4a:	f380 8808 	msr	MSP, r0
  402a4e:	f04f 0000 	mov.w	r0, #0
  402a52:	f380 8814 	msr	CONTROL, r0
  402a56:	b662      	cpsie	i
  402a58:	b661      	cpsie	f
  402a5a:	f3bf 8f4f 	dsb	sy
  402a5e:	f3bf 8f6f 	isb	sy
  402a62:	df00      	svc	0
  402a64:	bf00      	nop
  402a66:	0000      	.short	0x0000
  402a68:	e000ed08 	.word	0xe000ed08

00402a6c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  402a6c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 402a7c <vPortEnableVFP+0x10>
  402a70:	6801      	ldr	r1, [r0, #0]
  402a72:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402a76:	6001      	str	r1, [r0, #0]
  402a78:	4770      	bx	lr
  402a7a:	0000      	.short	0x0000
  402a7c:	e000ed88 	.word	0xe000ed88

00402a80 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  402a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402a84:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  402a88:	f021 0101 	bic.w	r1, r1, #1
  402a8c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  402a90:	4b05      	ldr	r3, [pc, #20]	; (402aa8 <pxPortInitialiseStack+0x28>)
  402a92:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  402a96:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  402a9a:	f06f 0302 	mvn.w	r3, #2
  402a9e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  402aa2:	3844      	subs	r0, #68	; 0x44
  402aa4:	4770      	bx	lr
  402aa6:	bf00      	nop
  402aa8:	00402a05 	.word	0x00402a05
  402aac:	00000000 	.word	0x00000000

00402ab0 <SVC_Handler>:
	__asm volatile (
  402ab0:	4b07      	ldr	r3, [pc, #28]	; (402ad0 <pxCurrentTCBConst2>)
  402ab2:	6819      	ldr	r1, [r3, #0]
  402ab4:	6808      	ldr	r0, [r1, #0]
  402ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402aba:	f380 8809 	msr	PSP, r0
  402abe:	f3bf 8f6f 	isb	sy
  402ac2:	f04f 0000 	mov.w	r0, #0
  402ac6:	f380 8811 	msr	BASEPRI, r0
  402aca:	4770      	bx	lr
  402acc:	f3af 8000 	nop.w

00402ad0 <pxCurrentTCBConst2>:
  402ad0:	2000c27c 	.word	0x2000c27c

00402ad4 <vPortEnterCritical>:
  402ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
  402ad8:	f383 8811 	msr	BASEPRI, r3
  402adc:	f3bf 8f6f 	isb	sy
  402ae0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
  402ae4:	4a0a      	ldr	r2, [pc, #40]	; (402b10 <vPortEnterCritical+0x3c>)
  402ae6:	6813      	ldr	r3, [r2, #0]
  402ae8:	3301      	adds	r3, #1
  402aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  402aec:	2b01      	cmp	r3, #1
  402aee:	d10d      	bne.n	402b0c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402af0:	4b08      	ldr	r3, [pc, #32]	; (402b14 <vPortEnterCritical+0x40>)
  402af2:	681b      	ldr	r3, [r3, #0]
  402af4:	f013 0fff 	tst.w	r3, #255	; 0xff
  402af8:	d008      	beq.n	402b0c <vPortEnterCritical+0x38>
  402afa:	f04f 0350 	mov.w	r3, #80	; 0x50
  402afe:	f383 8811 	msr	BASEPRI, r3
  402b02:	f3bf 8f6f 	isb	sy
  402b06:	f3bf 8f4f 	dsb	sy
  402b0a:	e7fe      	b.n	402b0a <vPortEnterCritical+0x36>
  402b0c:	4770      	bx	lr
  402b0e:	bf00      	nop
  402b10:	20000010 	.word	0x20000010
  402b14:	e000ed04 	.word	0xe000ed04

00402b18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402b18:	4b09      	ldr	r3, [pc, #36]	; (402b40 <vPortExitCritical+0x28>)
  402b1a:	681b      	ldr	r3, [r3, #0]
  402b1c:	b943      	cbnz	r3, 402b30 <vPortExitCritical+0x18>
  402b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
  402b22:	f383 8811 	msr	BASEPRI, r3
  402b26:	f3bf 8f6f 	isb	sy
  402b2a:	f3bf 8f4f 	dsb	sy
  402b2e:	e7fe      	b.n	402b2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
  402b30:	3b01      	subs	r3, #1
  402b32:	4a03      	ldr	r2, [pc, #12]	; (402b40 <vPortExitCritical+0x28>)
  402b34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402b36:	b90b      	cbnz	r3, 402b3c <vPortExitCritical+0x24>
	__asm volatile
  402b38:	f383 8811 	msr	BASEPRI, r3
  402b3c:	4770      	bx	lr
  402b3e:	bf00      	nop
  402b40:	20000010 	.word	0x20000010
	...

00402b50 <PendSV_Handler>:
	__asm volatile
  402b50:	f3ef 8009 	mrs	r0, PSP
  402b54:	f3bf 8f6f 	isb	sy
  402b58:	4b15      	ldr	r3, [pc, #84]	; (402bb0 <pxCurrentTCBConst>)
  402b5a:	681a      	ldr	r2, [r3, #0]
  402b5c:	f01e 0f10 	tst.w	lr, #16
  402b60:	bf08      	it	eq
  402b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  402b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b6a:	6010      	str	r0, [r2, #0]
  402b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
  402b70:	f04f 0050 	mov.w	r0, #80	; 0x50
  402b74:	f380 8811 	msr	BASEPRI, r0
  402b78:	f3bf 8f4f 	dsb	sy
  402b7c:	f3bf 8f6f 	isb	sy
  402b80:	f000 ffec 	bl	403b5c <vTaskSwitchContext>
  402b84:	f04f 0000 	mov.w	r0, #0
  402b88:	f380 8811 	msr	BASEPRI, r0
  402b8c:	bc09      	pop	{r0, r3}
  402b8e:	6819      	ldr	r1, [r3, #0]
  402b90:	6808      	ldr	r0, [r1, #0]
  402b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b96:	f01e 0f10 	tst.w	lr, #16
  402b9a:	bf08      	it	eq
  402b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  402ba0:	f380 8809 	msr	PSP, r0
  402ba4:	f3bf 8f6f 	isb	sy
  402ba8:	4770      	bx	lr
  402baa:	bf00      	nop
  402bac:	f3af 8000 	nop.w

00402bb0 <pxCurrentTCBConst>:
  402bb0:	2000c27c 	.word	0x2000c27c

00402bb4 <SysTick_Handler>:
{
  402bb4:	b508      	push	{r3, lr}
	__asm volatile
  402bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
  402bba:	f383 8811 	msr	BASEPRI, r3
  402bbe:	f3bf 8f6f 	isb	sy
  402bc2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
  402bc6:	4b05      	ldr	r3, [pc, #20]	; (402bdc <SysTick_Handler+0x28>)
  402bc8:	4798      	blx	r3
  402bca:	b118      	cbz	r0, 402bd4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  402bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402bd0:	4b03      	ldr	r3, [pc, #12]	; (402be0 <SysTick_Handler+0x2c>)
  402bd2:	601a      	str	r2, [r3, #0]
	__asm volatile
  402bd4:	2300      	movs	r3, #0
  402bd6:	f383 8811 	msr	BASEPRI, r3
  402bda:	bd08      	pop	{r3, pc}
  402bdc:	00403811 	.word	0x00403811
  402be0:	e000ed04 	.word	0xe000ed04

00402be4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  402be4:	4b05      	ldr	r3, [pc, #20]	; (402bfc <vPortSetupTimerInterrupt+0x18>)
  402be6:	2200      	movs	r2, #0
  402be8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  402bea:	4905      	ldr	r1, [pc, #20]	; (402c00 <vPortSetupTimerInterrupt+0x1c>)
  402bec:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  402bee:	4905      	ldr	r1, [pc, #20]	; (402c04 <vPortSetupTimerInterrupt+0x20>)
  402bf0:	4a05      	ldr	r2, [pc, #20]	; (402c08 <vPortSetupTimerInterrupt+0x24>)
  402bf2:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  402bf4:	2207      	movs	r2, #7
  402bf6:	601a      	str	r2, [r3, #0]
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	e000e010 	.word	0xe000e010
  402c00:	e000e018 	.word	0xe000e018
  402c04:	0001adaf 	.word	0x0001adaf
  402c08:	e000e014 	.word	0xe000e014

00402c0c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  402c0c:	4b3c      	ldr	r3, [pc, #240]	; (402d00 <xPortStartScheduler+0xf4>)
  402c0e:	681a      	ldr	r2, [r3, #0]
  402c10:	4b3c      	ldr	r3, [pc, #240]	; (402d04 <xPortStartScheduler+0xf8>)
  402c12:	429a      	cmp	r2, r3
  402c14:	d108      	bne.n	402c28 <xPortStartScheduler+0x1c>
	__asm volatile
  402c16:	f04f 0350 	mov.w	r3, #80	; 0x50
  402c1a:	f383 8811 	msr	BASEPRI, r3
  402c1e:	f3bf 8f6f 	isb	sy
  402c22:	f3bf 8f4f 	dsb	sy
  402c26:	e7fe      	b.n	402c26 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  402c28:	4b35      	ldr	r3, [pc, #212]	; (402d00 <xPortStartScheduler+0xf4>)
  402c2a:	681a      	ldr	r2, [r3, #0]
  402c2c:	4b36      	ldr	r3, [pc, #216]	; (402d08 <xPortStartScheduler+0xfc>)
  402c2e:	429a      	cmp	r2, r3
  402c30:	d108      	bne.n	402c44 <xPortStartScheduler+0x38>
  402c32:	f04f 0350 	mov.w	r3, #80	; 0x50
  402c36:	f383 8811 	msr	BASEPRI, r3
  402c3a:	f3bf 8f6f 	isb	sy
  402c3e:	f3bf 8f4f 	dsb	sy
  402c42:	e7fe      	b.n	402c42 <xPortStartScheduler+0x36>
{
  402c44:	b510      	push	{r4, lr}
  402c46:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402c48:	4b30      	ldr	r3, [pc, #192]	; (402d0c <xPortStartScheduler+0x100>)
  402c4a:	781a      	ldrb	r2, [r3, #0]
  402c4c:	b2d2      	uxtb	r2, r2
  402c4e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402c50:	22ff      	movs	r2, #255	; 0xff
  402c52:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402c54:	781b      	ldrb	r3, [r3, #0]
  402c56:	b2db      	uxtb	r3, r3
  402c58:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402c5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
  402c64:	4a2a      	ldr	r2, [pc, #168]	; (402d10 <xPortStartScheduler+0x104>)
  402c66:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402c68:	2207      	movs	r2, #7
  402c6a:	4b2a      	ldr	r3, [pc, #168]	; (402d14 <xPortStartScheduler+0x108>)
  402c6c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402c6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402c72:	f013 0f80 	tst.w	r3, #128	; 0x80
  402c76:	d012      	beq.n	402c9e <xPortStartScheduler+0x92>
  402c78:	2306      	movs	r3, #6
  402c7a:	e000      	b.n	402c7e <xPortStartScheduler+0x72>
  402c7c:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402c7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  402c82:	0052      	lsls	r2, r2, #1
  402c84:	b2d2      	uxtb	r2, r2
  402c86:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402c8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  402c8e:	1e59      	subs	r1, r3, #1
  402c90:	f012 0f80 	tst.w	r2, #128	; 0x80
  402c94:	d1f2      	bne.n	402c7c <xPortStartScheduler+0x70>
  402c96:	4a1f      	ldr	r2, [pc, #124]	; (402d14 <xPortStartScheduler+0x108>)
  402c98:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  402c9a:	2b03      	cmp	r3, #3
  402c9c:	d008      	beq.n	402cb0 <xPortStartScheduler+0xa4>
  402c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
  402ca2:	f383 8811 	msr	BASEPRI, r3
  402ca6:	f3bf 8f6f 	isb	sy
  402caa:	f3bf 8f4f 	dsb	sy
  402cae:	e7fe      	b.n	402cae <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402cb0:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402cb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402cb6:	4a17      	ldr	r2, [pc, #92]	; (402d14 <xPortStartScheduler+0x108>)
  402cb8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  402cba:	9b01      	ldr	r3, [sp, #4]
  402cbc:	b2db      	uxtb	r3, r3
  402cbe:	4a13      	ldr	r2, [pc, #76]	; (402d0c <xPortStartScheduler+0x100>)
  402cc0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  402cc2:	4b15      	ldr	r3, [pc, #84]	; (402d18 <xPortStartScheduler+0x10c>)
  402cc4:	681a      	ldr	r2, [r3, #0]
  402cc6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  402cca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  402ccc:	681a      	ldr	r2, [r3, #0]
  402cce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  402cd2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  402cd4:	4b11      	ldr	r3, [pc, #68]	; (402d1c <xPortStartScheduler+0x110>)
  402cd6:	4798      	blx	r3
	uxCriticalNesting = 0;
  402cd8:	2400      	movs	r4, #0
  402cda:	4b11      	ldr	r3, [pc, #68]	; (402d20 <xPortStartScheduler+0x114>)
  402cdc:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  402cde:	4b11      	ldr	r3, [pc, #68]	; (402d24 <xPortStartScheduler+0x118>)
  402ce0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  402ce2:	4a11      	ldr	r2, [pc, #68]	; (402d28 <xPortStartScheduler+0x11c>)
  402ce4:	6813      	ldr	r3, [r2, #0]
  402ce6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  402cea:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  402cec:	4b0f      	ldr	r3, [pc, #60]	; (402d2c <xPortStartScheduler+0x120>)
  402cee:	4798      	blx	r3
	vTaskSwitchContext();
  402cf0:	4b0f      	ldr	r3, [pc, #60]	; (402d30 <xPortStartScheduler+0x124>)
  402cf2:	4798      	blx	r3
	prvTaskExitError();
  402cf4:	4b0f      	ldr	r3, [pc, #60]	; (402d34 <xPortStartScheduler+0x128>)
  402cf6:	4798      	blx	r3
}
  402cf8:	4620      	mov	r0, r4
  402cfa:	b002      	add	sp, #8
  402cfc:	bd10      	pop	{r4, pc}
  402cfe:	bf00      	nop
  402d00:	e000ed00 	.word	0xe000ed00
  402d04:	410fc271 	.word	0x410fc271
  402d08:	410fc270 	.word	0x410fc270
  402d0c:	e000e400 	.word	0xe000e400
  402d10:	20000a6c 	.word	0x20000a6c
  402d14:	20000a70 	.word	0x20000a70
  402d18:	e000ed20 	.word	0xe000ed20
  402d1c:	00402be5 	.word	0x00402be5
  402d20:	20000010 	.word	0x20000010
  402d24:	00402a6d 	.word	0x00402a6d
  402d28:	e000ef34 	.word	0xe000ef34
  402d2c:	00402a45 	.word	0x00402a45
  402d30:	00403b5d 	.word	0x00403b5d
  402d34:	00402a05 	.word	0x00402a05

00402d38 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402d38:	b538      	push	{r3, r4, r5, lr}
  402d3a:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  402d3c:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  402d40:	bf1c      	itt	ne
  402d42:	f020 0407 	bicne.w	r4, r0, #7
  402d46:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
  402d48:	4b11      	ldr	r3, [pc, #68]	; (402d90 <pvPortMalloc+0x58>)
  402d4a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  402d4c:	4b11      	ldr	r3, [pc, #68]	; (402d94 <pvPortMalloc+0x5c>)
  402d4e:	681b      	ldr	r3, [r3, #0]
  402d50:	b193      	cbz	r3, 402d78 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  402d52:	4b11      	ldr	r3, [pc, #68]	; (402d98 <pvPortMalloc+0x60>)
  402d54:	681b      	ldr	r3, [r3, #0]
  402d56:	441c      	add	r4, r3
  402d58:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  402d5c:	4294      	cmp	r4, r2
  402d5e:	d811      	bhi.n	402d84 <pvPortMalloc+0x4c>
  402d60:	42a3      	cmp	r3, r4
  402d62:	d20f      	bcs.n	402d84 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  402d64:	4a0b      	ldr	r2, [pc, #44]	; (402d94 <pvPortMalloc+0x5c>)
  402d66:	6815      	ldr	r5, [r2, #0]
  402d68:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  402d6a:	4b0b      	ldr	r3, [pc, #44]	; (402d98 <pvPortMalloc+0x60>)
  402d6c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  402d6e:	4b0b      	ldr	r3, [pc, #44]	; (402d9c <pvPortMalloc+0x64>)
  402d70:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  402d72:	b14d      	cbz	r5, 402d88 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  402d74:	4628      	mov	r0, r5
  402d76:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  402d78:	4b09      	ldr	r3, [pc, #36]	; (402da0 <pvPortMalloc+0x68>)
  402d7a:	f023 0307 	bic.w	r3, r3, #7
  402d7e:	4a05      	ldr	r2, [pc, #20]	; (402d94 <pvPortMalloc+0x5c>)
  402d80:	6013      	str	r3, [r2, #0]
  402d82:	e7e6      	b.n	402d52 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  402d84:	4b05      	ldr	r3, [pc, #20]	; (402d9c <pvPortMalloc+0x64>)
  402d86:	4798      	blx	r3
			vApplicationMallocFailedHook();
  402d88:	4b06      	ldr	r3, [pc, #24]	; (402da4 <pvPortMalloc+0x6c>)
  402d8a:	4798      	blx	r3
  402d8c:	2500      	movs	r5, #0
	return pvReturn;
  402d8e:	e7f1      	b.n	402d74 <pvPortMalloc+0x3c>
  402d90:	004037f5 	.word	0x004037f5
  402d94:	20000a74 	.word	0x20000a74
  402d98:	2000c278 	.word	0x2000c278
  402d9c:	00403945 	.word	0x00403945
  402da0:	20000a80 	.word	0x20000a80
  402da4:	00404133 	.word	0x00404133

00402da8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  402da8:	b140      	cbz	r0, 402dbc <vPortFree+0x14>
  402daa:	f04f 0350 	mov.w	r3, #80	; 0x50
  402dae:	f383 8811 	msr	BASEPRI, r3
  402db2:	f3bf 8f6f 	isb	sy
  402db6:	f3bf 8f4f 	dsb	sy
  402dba:	e7fe      	b.n	402dba <vPortFree+0x12>
  402dbc:	4770      	bx	lr
	...

00402dc0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  402dc0:	b510      	push	{r4, lr}
  402dc2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  402dc4:	4b04      	ldr	r3, [pc, #16]	; (402dd8 <prvIsQueueEmpty+0x18>)
  402dc6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402dc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  402dca:	4b04      	ldr	r3, [pc, #16]	; (402ddc <prvIsQueueEmpty+0x1c>)
  402dcc:	4798      	blx	r3

	return xReturn;
}
  402dce:	fab4 f084 	clz	r0, r4
  402dd2:	0940      	lsrs	r0, r0, #5
  402dd4:	bd10      	pop	{r4, pc}
  402dd6:	bf00      	nop
  402dd8:	00402ad5 	.word	0x00402ad5
  402ddc:	00402b19 	.word	0x00402b19

00402de0 <prvCopyDataToQueue>:
{
  402de0:	b570      	push	{r4, r5, r6, lr}
  402de2:	4604      	mov	r4, r0
  402de4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  402de6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  402de8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402dea:	b952      	cbnz	r2, 402e02 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402dec:	6803      	ldr	r3, [r0, #0]
  402dee:	2b00      	cmp	r3, #0
  402df0:	d12a      	bne.n	402e48 <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402df2:	6840      	ldr	r0, [r0, #4]
  402df4:	4b18      	ldr	r3, [pc, #96]	; (402e58 <prvCopyDataToQueue+0x78>)
  402df6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  402df8:	2300      	movs	r3, #0
  402dfa:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  402dfc:	3501      	adds	r5, #1
  402dfe:	63a5      	str	r5, [r4, #56]	; 0x38
}
  402e00:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  402e02:	b96e      	cbnz	r6, 402e20 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  402e04:	6880      	ldr	r0, [r0, #8]
  402e06:	4b15      	ldr	r3, [pc, #84]	; (402e5c <prvCopyDataToQueue+0x7c>)
  402e08:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  402e0a:	68a3      	ldr	r3, [r4, #8]
  402e0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402e0e:	4413      	add	r3, r2
  402e10:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402e12:	6862      	ldr	r2, [r4, #4]
  402e14:	4293      	cmp	r3, r2
  402e16:	d319      	bcc.n	402e4c <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402e18:	6823      	ldr	r3, [r4, #0]
  402e1a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  402e1c:	2000      	movs	r0, #0
  402e1e:	e7ed      	b.n	402dfc <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e20:	68c0      	ldr	r0, [r0, #12]
  402e22:	4b0e      	ldr	r3, [pc, #56]	; (402e5c <prvCopyDataToQueue+0x7c>)
  402e24:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  402e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402e28:	425b      	negs	r3, r3
  402e2a:	68e2      	ldr	r2, [r4, #12]
  402e2c:	441a      	add	r2, r3
  402e2e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402e30:	6821      	ldr	r1, [r4, #0]
  402e32:	428a      	cmp	r2, r1
  402e34:	d202      	bcs.n	402e3c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  402e36:	6862      	ldr	r2, [r4, #4]
  402e38:	4413      	add	r3, r2
  402e3a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  402e3c:	2e02      	cmp	r6, #2
  402e3e:	d107      	bne.n	402e50 <prvCopyDataToQueue+0x70>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  402e40:	b145      	cbz	r5, 402e54 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
  402e42:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  402e44:	2000      	movs	r0, #0
  402e46:	e7d9      	b.n	402dfc <prvCopyDataToQueue+0x1c>
  402e48:	2000      	movs	r0, #0
  402e4a:	e7d7      	b.n	402dfc <prvCopyDataToQueue+0x1c>
  402e4c:	2000      	movs	r0, #0
  402e4e:	e7d5      	b.n	402dfc <prvCopyDataToQueue+0x1c>
  402e50:	2000      	movs	r0, #0
  402e52:	e7d3      	b.n	402dfc <prvCopyDataToQueue+0x1c>
  402e54:	2000      	movs	r0, #0
  402e56:	e7d1      	b.n	402dfc <prvCopyDataToQueue+0x1c>
  402e58:	00403e71 	.word	0x00403e71
  402e5c:	00405515 	.word	0x00405515

00402e60 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402e60:	b570      	push	{r4, r5, r6, lr}
  402e62:	b082      	sub	sp, #8
  402e64:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  402e66:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402e68:	b164      	cbz	r4, 402e84 <prvNotifyQueueSetContainer+0x24>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402e6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402e6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402e6e:	429a      	cmp	r2, r3
  402e70:	d311      	bcc.n	402e96 <prvNotifyQueueSetContainer+0x36>
  402e72:	f04f 0350 	mov.w	r3, #80	; 0x50
  402e76:	f383 8811 	msr	BASEPRI, r3
  402e7a:	f3bf 8f6f 	isb	sy
  402e7e:	f3bf 8f4f 	dsb	sy
  402e82:	e7fe      	b.n	402e82 <prvNotifyQueueSetContainer+0x22>
  402e84:	f04f 0350 	mov.w	r3, #80	; 0x50
  402e88:	f383 8811 	msr	BASEPRI, r3
  402e8c:	f3bf 8f6f 	isb	sy
  402e90:	f3bf 8f4f 	dsb	sy
  402e94:	e7fe      	b.n	402e94 <prvNotifyQueueSetContainer+0x34>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  402e96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402e98:	4293      	cmp	r3, r2
  402e9a:	d803      	bhi.n	402ea4 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn = pdFALSE;
  402e9c:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402e9e:	4630      	mov	r0, r6
  402ea0:	b002      	add	sp, #8
  402ea2:	bd70      	pop	{r4, r5, r6, pc}
  402ea4:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  402ea6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  402eaa:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  402eac:	a901      	add	r1, sp, #4
  402eae:	4620      	mov	r0, r4
  402eb0:	4b0a      	ldr	r3, [pc, #40]	; (402edc <prvNotifyQueueSetContainer+0x7c>)
  402eb2:	4798      	blx	r3
  402eb4:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  402eb6:	f1b5 3fff 	cmp.w	r5, #4294967295
  402eba:	d10a      	bne.n	402ed2 <prvNotifyQueueSetContainer+0x72>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  402ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402ebe:	2b00      	cmp	r3, #0
  402ec0:	d0ed      	beq.n	402e9e <prvNotifyQueueSetContainer+0x3e>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  402ec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402ec6:	4b06      	ldr	r3, [pc, #24]	; (402ee0 <prvNotifyQueueSetContainer+0x80>)
  402ec8:	4798      	blx	r3
  402eca:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  402ecc:	bf18      	it	ne
  402ece:	2601      	movne	r6, #1
  402ed0:	e7e5      	b.n	402e9e <prvNotifyQueueSetContainer+0x3e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  402ed2:	1c6b      	adds	r3, r5, #1
  402ed4:	b25b      	sxtb	r3, r3
  402ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  402eda:	e7e0      	b.n	402e9e <prvNotifyQueueSetContainer+0x3e>
  402edc:	00402de1 	.word	0x00402de1
  402ee0:	00403c45 	.word	0x00403c45

00402ee4 <prvUnlockQueue>:
{
  402ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ee8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  402eea:	4b23      	ldr	r3, [pc, #140]	; (402f78 <prvUnlockQueue+0x94>)
  402eec:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  402eee:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  402ef2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  402ef4:	2c00      	cmp	r4, #0
  402ef6:	dd19      	ble.n	402f2c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  402ef8:	4e20      	ldr	r6, [pc, #128]	; (402f7c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  402efa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 402f88 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402efe:	4f20      	ldr	r7, [pc, #128]	; (402f80 <prvUnlockQueue+0x9c>)
  402f00:	e008      	b.n	402f14 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  402f04:	b193      	cbz	r3, 402f2c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402f06:	f105 0024 	add.w	r0, r5, #36	; 0x24
  402f0a:	47b8      	blx	r7
  402f0c:	b960      	cbnz	r0, 402f28 <prvUnlockQueue+0x44>
  402f0e:	3c01      	subs	r4, #1
  402f10:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  402f12:	b15c      	cbz	r4, 402f2c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  402f14:	6cab      	ldr	r3, [r5, #72]	; 0x48
  402f16:	2b00      	cmp	r3, #0
  402f18:	d0f3      	beq.n	402f02 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  402f1a:	2100      	movs	r1, #0
  402f1c:	4628      	mov	r0, r5
  402f1e:	47b0      	blx	r6
  402f20:	2800      	cmp	r0, #0
  402f22:	d0f4      	beq.n	402f0e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  402f24:	47c0      	blx	r8
  402f26:	e7f2      	b.n	402f0e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  402f28:	47c0      	blx	r8
  402f2a:	e7f0      	b.n	402f0e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  402f2c:	23ff      	movs	r3, #255	; 0xff
  402f2e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  402f32:	4b14      	ldr	r3, [pc, #80]	; (402f84 <prvUnlockQueue+0xa0>)
  402f34:	4798      	blx	r3
	taskENTER_CRITICAL();
  402f36:	4b10      	ldr	r3, [pc, #64]	; (402f78 <prvUnlockQueue+0x94>)
  402f38:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  402f3a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  402f3e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  402f40:	2c00      	cmp	r4, #0
  402f42:	dd12      	ble.n	402f6a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402f44:	692b      	ldr	r3, [r5, #16]
  402f46:	b183      	cbz	r3, 402f6a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402f48:	f105 0710 	add.w	r7, r5, #16
  402f4c:	4e0c      	ldr	r6, [pc, #48]	; (402f80 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402f4e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 402f88 <prvUnlockQueue+0xa4>
  402f52:	e004      	b.n	402f5e <prvUnlockQueue+0x7a>
  402f54:	3c01      	subs	r4, #1
  402f56:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  402f58:	b13c      	cbz	r4, 402f6a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402f5a:	692b      	ldr	r3, [r5, #16]
  402f5c:	b12b      	cbz	r3, 402f6a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402f5e:	4638      	mov	r0, r7
  402f60:	47b0      	blx	r6
  402f62:	2800      	cmp	r0, #0
  402f64:	d0f6      	beq.n	402f54 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  402f66:	47c0      	blx	r8
  402f68:	e7f4      	b.n	402f54 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  402f6a:	23ff      	movs	r3, #255	; 0xff
  402f6c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  402f70:	4b04      	ldr	r3, [pc, #16]	; (402f84 <prvUnlockQueue+0xa0>)
  402f72:	4798      	blx	r3
  402f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f78:	00402ad5 	.word	0x00402ad5
  402f7c:	00402e61 	.word	0x00402e61
  402f80:	00403c45 	.word	0x00403c45
  402f84:	00402b19 	.word	0x00402b19
  402f88:	00403d79 	.word	0x00403d79

00402f8c <xQueueGenericReset>:
{
  402f8c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  402f8e:	b330      	cbz	r0, 402fde <xQueueGenericReset+0x52>
  402f90:	4604      	mov	r4, r0
  402f92:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402f94:	4b1c      	ldr	r3, [pc, #112]	; (403008 <xQueueGenericReset+0x7c>)
  402f96:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402f98:	6822      	ldr	r2, [r4, #0]
  402f9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402f9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402f9e:	fb03 f301 	mul.w	r3, r3, r1
  402fa2:	18d0      	adds	r0, r2, r3
  402fa4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  402fa6:	2000      	movs	r0, #0
  402fa8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  402faa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402fac:	1a5b      	subs	r3, r3, r1
  402fae:	4413      	add	r3, r2
  402fb0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  402fb2:	23ff      	movs	r3, #255	; 0xff
  402fb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  402fb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  402fbc:	b9c5      	cbnz	r5, 402ff0 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402fbe:	6923      	ldr	r3, [r4, #16]
  402fc0:	b1eb      	cbz	r3, 402ffe <xQueueGenericReset+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402fc2:	f104 0010 	add.w	r0, r4, #16
  402fc6:	4b11      	ldr	r3, [pc, #68]	; (40300c <xQueueGenericReset+0x80>)
  402fc8:	4798      	blx	r3
  402fca:	b1c0      	cbz	r0, 402ffe <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
  402fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402fd0:	4b0f      	ldr	r3, [pc, #60]	; (403010 <xQueueGenericReset+0x84>)
  402fd2:	601a      	str	r2, [r3, #0]
  402fd4:	f3bf 8f4f 	dsb	sy
  402fd8:	f3bf 8f6f 	isb	sy
  402fdc:	e00f      	b.n	402ffe <xQueueGenericReset+0x72>
  402fde:	f04f 0350 	mov.w	r3, #80	; 0x50
  402fe2:	f383 8811 	msr	BASEPRI, r3
  402fe6:	f3bf 8f6f 	isb	sy
  402fea:	f3bf 8f4f 	dsb	sy
  402fee:	e7fe      	b.n	402fee <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402ff0:	f104 0010 	add.w	r0, r4, #16
  402ff4:	4d07      	ldr	r5, [pc, #28]	; (403014 <xQueueGenericReset+0x88>)
  402ff6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402ff8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402ffc:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  402ffe:	4b06      	ldr	r3, [pc, #24]	; (403018 <xQueueGenericReset+0x8c>)
  403000:	4798      	blx	r3
}
  403002:	2001      	movs	r0, #1
  403004:	bd38      	pop	{r3, r4, r5, pc}
  403006:	bf00      	nop
  403008:	00402ad5 	.word	0x00402ad5
  40300c:	00403c45 	.word	0x00403c45
  403010:	e000ed04 	.word	0xe000ed04
  403014:	00402977 	.word	0x00402977
  403018:	00402b19 	.word	0x00402b19

0040301c <xQueueGenericCreate>:
	{
  40301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40301e:	b940      	cbnz	r0, 403032 <xQueueGenericCreate+0x16>
  403020:	f04f 0350 	mov.w	r3, #80	; 0x50
  403024:	f383 8811 	msr	BASEPRI, r3
  403028:	f3bf 8f6f 	isb	sy
  40302c:	f3bf 8f4f 	dsb	sy
  403030:	e7fe      	b.n	403030 <xQueueGenericCreate+0x14>
  403032:	4606      	mov	r6, r0
  403034:	4617      	mov	r7, r2
  403036:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403038:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40303c:	3054      	adds	r0, #84	; 0x54
  40303e:	4b0b      	ldr	r3, [pc, #44]	; (40306c <xQueueGenericCreate+0x50>)
  403040:	4798      	blx	r3
		if( pxNewQueue != NULL )
  403042:	4604      	mov	r4, r0
  403044:	b178      	cbz	r0, 403066 <xQueueGenericCreate+0x4a>
	if( uxItemSize == ( UBaseType_t ) 0 )
  403046:	b11d      	cbz	r5, 403050 <xQueueGenericCreate+0x34>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  403048:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  40304c:	6003      	str	r3, [r0, #0]
  40304e:	e000      	b.n	403052 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  403050:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  403052:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  403054:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  403056:	2101      	movs	r1, #1
  403058:	4620      	mov	r0, r4
  40305a:	4b05      	ldr	r3, [pc, #20]	; (403070 <xQueueGenericCreate+0x54>)
  40305c:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  40305e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  403062:	2300      	movs	r3, #0
  403064:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  403066:	4620      	mov	r0, r4
  403068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40306a:	bf00      	nop
  40306c:	00402d39 	.word	0x00402d39
  403070:	00402f8d 	.word	0x00402f8d

00403074 <xQueueGenericSend>:
{
  403074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403078:	b085      	sub	sp, #20
  40307a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40307c:	b168      	cbz	r0, 40309a <xQueueGenericSend+0x26>
  40307e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403080:	b1a1      	cbz	r1, 4030ac <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403082:	2b02      	cmp	r3, #2
  403084:	d01e      	beq.n	4030c4 <xQueueGenericSend+0x50>
  403086:	f04f 0800 	mov.w	r8, #0
  40308a:	461d      	mov	r5, r3
  40308c:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
  40308e:	4f5f      	ldr	r7, [pc, #380]	; (40320c <xQueueGenericSend+0x198>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  403090:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 403238 <xQueueGenericSend+0x1c4>
					portYIELD_WITHIN_API();
  403094:	f8df 9180 	ldr.w	r9, [pc, #384]	; 403218 <xQueueGenericSend+0x1a4>
  403098:	e067      	b.n	40316a <xQueueGenericSend+0xf6>
  40309a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40309e:	f383 8811 	msr	BASEPRI, r3
  4030a2:	f3bf 8f6f 	isb	sy
  4030a6:	f3bf 8f4f 	dsb	sy
  4030aa:	e7fe      	b.n	4030aa <xQueueGenericSend+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4030ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4030ae:	2a00      	cmp	r2, #0
  4030b0:	d0e7      	beq.n	403082 <xQueueGenericSend+0xe>
  4030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
  4030b6:	f383 8811 	msr	BASEPRI, r3
  4030ba:	f3bf 8f6f 	isb	sy
  4030be:	f3bf 8f4f 	dsb	sy
  4030c2:	e7fe      	b.n	4030c2 <xQueueGenericSend+0x4e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4030c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4030c6:	2a01      	cmp	r2, #1
  4030c8:	d008      	beq.n	4030dc <xQueueGenericSend+0x68>
  4030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
  4030ce:	f383 8811 	msr	BASEPRI, r3
  4030d2:	f3bf 8f6f 	isb	sy
  4030d6:	f3bf 8f4f 	dsb	sy
  4030da:	e7fe      	b.n	4030da <xQueueGenericSend+0x66>
  4030dc:	f04f 0800 	mov.w	r8, #0
  4030e0:	e7d3      	b.n	40308a <xQueueGenericSend+0x16>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4030e2:	462a      	mov	r2, r5
  4030e4:	4631      	mov	r1, r6
  4030e6:	4620      	mov	r0, r4
  4030e8:	4b49      	ldr	r3, [pc, #292]	; (403210 <xQueueGenericSend+0x19c>)
  4030ea:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4030ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4030ee:	b193      	cbz	r3, 403116 <xQueueGenericSend+0xa2>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4030f0:	4629      	mov	r1, r5
  4030f2:	4620      	mov	r0, r4
  4030f4:	4b47      	ldr	r3, [pc, #284]	; (403214 <xQueueGenericSend+0x1a0>)
  4030f6:	4798      	blx	r3
  4030f8:	b138      	cbz	r0, 40310a <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
  4030fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4030fe:	4b46      	ldr	r3, [pc, #280]	; (403218 <xQueueGenericSend+0x1a4>)
  403100:	601a      	str	r2, [r3, #0]
  403102:	f3bf 8f4f 	dsb	sy
  403106:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40310a:	4b44      	ldr	r3, [pc, #272]	; (40321c <xQueueGenericSend+0x1a8>)
  40310c:	4798      	blx	r3
				return pdPASS;
  40310e:	2001      	movs	r0, #1
}
  403110:	b005      	add	sp, #20
  403112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403116:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403118:	b173      	cbz	r3, 403138 <xQueueGenericSend+0xc4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40311a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40311e:	4b40      	ldr	r3, [pc, #256]	; (403220 <xQueueGenericSend+0x1ac>)
  403120:	4798      	blx	r3
  403122:	2800      	cmp	r0, #0
  403124:	d0f1      	beq.n	40310a <xQueueGenericSend+0x96>
								queueYIELD_IF_USING_PREEMPTION();
  403126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40312a:	4b3b      	ldr	r3, [pc, #236]	; (403218 <xQueueGenericSend+0x1a4>)
  40312c:	601a      	str	r2, [r3, #0]
  40312e:	f3bf 8f4f 	dsb	sy
  403132:	f3bf 8f6f 	isb	sy
  403136:	e7e8      	b.n	40310a <xQueueGenericSend+0x96>
						else if( xYieldRequired != pdFALSE )
  403138:	2800      	cmp	r0, #0
  40313a:	d0e6      	beq.n	40310a <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
  40313c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403140:	4b35      	ldr	r3, [pc, #212]	; (403218 <xQueueGenericSend+0x1a4>)
  403142:	601a      	str	r2, [r3, #0]
  403144:	f3bf 8f4f 	dsb	sy
  403148:	f3bf 8f6f 	isb	sy
  40314c:	e7dd      	b.n	40310a <xQueueGenericSend+0x96>
					taskEXIT_CRITICAL();
  40314e:	4b33      	ldr	r3, [pc, #204]	; (40321c <xQueueGenericSend+0x1a8>)
  403150:	4798      	blx	r3
					return errQUEUE_FULL;
  403152:	2000      	movs	r0, #0
  403154:	e7dc      	b.n	403110 <xQueueGenericSend+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
  403156:	a802      	add	r0, sp, #8
  403158:	47d0      	blx	sl
  40315a:	e013      	b.n	403184 <xQueueGenericSend+0x110>
				prvUnlockQueue( pxQueue );
  40315c:	4620      	mov	r0, r4
  40315e:	4b31      	ldr	r3, [pc, #196]	; (403224 <xQueueGenericSend+0x1b0>)
  403160:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403162:	4b31      	ldr	r3, [pc, #196]	; (403228 <xQueueGenericSend+0x1b4>)
  403164:	4798      	blx	r3
  403166:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
  40316a:	47b8      	blx	r7
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40316c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40316e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403170:	429a      	cmp	r2, r3
  403172:	d3b6      	bcc.n	4030e2 <xQueueGenericSend+0x6e>
  403174:	2d02      	cmp	r5, #2
  403176:	d0b4      	beq.n	4030e2 <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
  403178:	9b01      	ldr	r3, [sp, #4]
  40317a:	2b00      	cmp	r3, #0
  40317c:	d0e7      	beq.n	40314e <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
  40317e:	f1b8 0f00 	cmp.w	r8, #0
  403182:	d0e8      	beq.n	403156 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
  403184:	4b25      	ldr	r3, [pc, #148]	; (40321c <xQueueGenericSend+0x1a8>)
  403186:	4798      	blx	r3
		vTaskSuspendAll();
  403188:	4b28      	ldr	r3, [pc, #160]	; (40322c <xQueueGenericSend+0x1b8>)
  40318a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40318c:	47b8      	blx	r7
  40318e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  403192:	b25b      	sxtb	r3, r3
  403194:	f1b3 3fff 	cmp.w	r3, #4294967295
  403198:	bf04      	itt	eq
  40319a:	2300      	moveq	r3, #0
  40319c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  4031a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4031a4:	b25b      	sxtb	r3, r3
  4031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031aa:	bf04      	itt	eq
  4031ac:	2300      	moveq	r3, #0
  4031ae:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  4031b2:	4b1a      	ldr	r3, [pc, #104]	; (40321c <xQueueGenericSend+0x1a8>)
  4031b4:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4031b6:	a901      	add	r1, sp, #4
  4031b8:	a802      	add	r0, sp, #8
  4031ba:	4b1d      	ldr	r3, [pc, #116]	; (403230 <xQueueGenericSend+0x1bc>)
  4031bc:	4798      	blx	r3
  4031be:	b9e8      	cbnz	r0, 4031fc <xQueueGenericSend+0x188>
	taskENTER_CRITICAL();
  4031c0:	47b8      	blx	r7
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4031c2:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4031c6:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4031ca:	4b14      	ldr	r3, [pc, #80]	; (40321c <xQueueGenericSend+0x1a8>)
  4031cc:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4031ce:	45c3      	cmp	fp, r8
  4031d0:	d1c4      	bne.n	40315c <xQueueGenericSend+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4031d2:	9901      	ldr	r1, [sp, #4]
  4031d4:	f104 0010 	add.w	r0, r4, #16
  4031d8:	4b16      	ldr	r3, [pc, #88]	; (403234 <xQueueGenericSend+0x1c0>)
  4031da:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4031dc:	4620      	mov	r0, r4
  4031de:	4b11      	ldr	r3, [pc, #68]	; (403224 <xQueueGenericSend+0x1b0>)
  4031e0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4031e2:	4b11      	ldr	r3, [pc, #68]	; (403228 <xQueueGenericSend+0x1b4>)
  4031e4:	4798      	blx	r3
  4031e6:	2800      	cmp	r0, #0
  4031e8:	d1bd      	bne.n	403166 <xQueueGenericSend+0xf2>
					portYIELD_WITHIN_API();
  4031ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4031ee:	f8c9 3000 	str.w	r3, [r9]
  4031f2:	f3bf 8f4f 	dsb	sy
  4031f6:	f3bf 8f6f 	isb	sy
  4031fa:	e7b4      	b.n	403166 <xQueueGenericSend+0xf2>
			prvUnlockQueue( pxQueue );
  4031fc:	4620      	mov	r0, r4
  4031fe:	4b09      	ldr	r3, [pc, #36]	; (403224 <xQueueGenericSend+0x1b0>)
  403200:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403202:	4b09      	ldr	r3, [pc, #36]	; (403228 <xQueueGenericSend+0x1b4>)
  403204:	4798      	blx	r3
			return errQUEUE_FULL;
  403206:	2000      	movs	r0, #0
  403208:	e782      	b.n	403110 <xQueueGenericSend+0x9c>
  40320a:	bf00      	nop
  40320c:	00402ad5 	.word	0x00402ad5
  403210:	00402de1 	.word	0x00402de1
  403214:	00402e61 	.word	0x00402e61
  403218:	e000ed04 	.word	0xe000ed04
  40321c:	00402b19 	.word	0x00402b19
  403220:	00403c45 	.word	0x00403c45
  403224:	00402ee5 	.word	0x00402ee5
  403228:	00403945 	.word	0x00403945
  40322c:	004037f5 	.word	0x004037f5
  403230:	00403ced 	.word	0x00403ced
  403234:	00403c0d 	.word	0x00403c0d
  403238:	00403cd5 	.word	0x00403cd5

0040323c <xQueueCreateMutex>:
	{
  40323c:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
  40323e:	4602      	mov	r2, r0
  403240:	2100      	movs	r1, #0
  403242:	2001      	movs	r0, #1
  403244:	4b06      	ldr	r3, [pc, #24]	; (403260 <xQueueCreateMutex+0x24>)
  403246:	4798      	blx	r3
		if( pxNewQueue != NULL )
  403248:	4604      	mov	r4, r0
  40324a:	b138      	cbz	r0, 40325c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
  40324c:	2100      	movs	r1, #0
  40324e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  403250:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
  403252:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  403254:	460b      	mov	r3, r1
  403256:	460a      	mov	r2, r1
  403258:	4d02      	ldr	r5, [pc, #8]	; (403264 <xQueueCreateMutex+0x28>)
  40325a:	47a8      	blx	r5
	}
  40325c:	4620      	mov	r0, r4
  40325e:	bd38      	pop	{r3, r4, r5, pc}
  403260:	0040301d 	.word	0x0040301d
  403264:	00403075 	.word	0x00403075

00403268 <xQueueSemaphoreTake>:
{
  403268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40326c:	b085      	sub	sp, #20
  40326e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  403270:	b158      	cbz	r0, 40328a <xQueueSemaphoreTake+0x22>
  403272:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  403274:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403276:	b18b      	cbz	r3, 40329c <xQueueSemaphoreTake+0x34>
  403278:	f04f 0350 	mov.w	r3, #80	; 0x50
  40327c:	f383 8811 	msr	BASEPRI, r3
  403280:	f3bf 8f6f 	isb	sy
  403284:	f3bf 8f4f 	dsb	sy
  403288:	e7fe      	b.n	403288 <xQueueSemaphoreTake+0x20>
  40328a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40328e:	f383 8811 	msr	BASEPRI, r3
  403292:	f3bf 8f6f 	isb	sy
  403296:	f3bf 8f4f 	dsb	sy
  40329a:	e7fe      	b.n	40329a <xQueueSemaphoreTake+0x32>
  40329c:	2500      	movs	r5, #0
  40329e:	46a9      	mov	r9, r5
		taskENTER_CRITICAL();
  4032a0:	4e51      	ldr	r6, [pc, #324]	; (4033e8 <xQueueSemaphoreTake+0x180>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  4032a2:	f8df 8178 	ldr.w	r8, [pc, #376]	; 40341c <xQueueSemaphoreTake+0x1b4>
					portYIELD_WITHIN_API();
  4032a6:	4f51      	ldr	r7, [pc, #324]	; (4033ec <xQueueSemaphoreTake+0x184>)
  4032a8:	e046      	b.n	403338 <xQueueSemaphoreTake+0xd0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  4032aa:	3b01      	subs	r3, #1
  4032ac:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4032ae:	6823      	ldr	r3, [r4, #0]
  4032b0:	b913      	cbnz	r3, 4032b8 <xQueueSemaphoreTake+0x50>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4032b2:	4b4f      	ldr	r3, [pc, #316]	; (4033f0 <xQueueSemaphoreTake+0x188>)
  4032b4:	4798      	blx	r3
  4032b6:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4032b8:	6923      	ldr	r3, [r4, #16]
  4032ba:	b163      	cbz	r3, 4032d6 <xQueueSemaphoreTake+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4032bc:	f104 0010 	add.w	r0, r4, #16
  4032c0:	4b4c      	ldr	r3, [pc, #304]	; (4033f4 <xQueueSemaphoreTake+0x18c>)
  4032c2:	4798      	blx	r3
  4032c4:	b138      	cbz	r0, 4032d6 <xQueueSemaphoreTake+0x6e>
						queueYIELD_IF_USING_PREEMPTION();
  4032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4032ca:	4b48      	ldr	r3, [pc, #288]	; (4033ec <xQueueSemaphoreTake+0x184>)
  4032cc:	601a      	str	r2, [r3, #0]
  4032ce:	f3bf 8f4f 	dsb	sy
  4032d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4032d6:	4b48      	ldr	r3, [pc, #288]	; (4033f8 <xQueueSemaphoreTake+0x190>)
  4032d8:	4798      	blx	r3
				return pdPASS;
  4032da:	2501      	movs	r5, #1
}
  4032dc:	4628      	mov	r0, r5
  4032de:	b005      	add	sp, #20
  4032e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  4032e4:	b145      	cbz	r5, 4032f8 <xQueueSemaphoreTake+0x90>
  4032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4032ea:	f383 8811 	msr	BASEPRI, r3
  4032ee:	f3bf 8f6f 	isb	sy
  4032f2:	f3bf 8f4f 	dsb	sy
  4032f6:	e7fe      	b.n	4032f6 <xQueueSemaphoreTake+0x8e>
					taskEXIT_CRITICAL();
  4032f8:	4b3f      	ldr	r3, [pc, #252]	; (4033f8 <xQueueSemaphoreTake+0x190>)
  4032fa:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4032fc:	e7ee      	b.n	4032dc <xQueueSemaphoreTake+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4032fe:	a802      	add	r0, sp, #8
  403300:	47c0      	blx	r8
  403302:	e023      	b.n	40334c <xQueueSemaphoreTake+0xe4>
						taskENTER_CRITICAL();
  403304:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  403306:	6860      	ldr	r0, [r4, #4]
  403308:	4b3c      	ldr	r3, [pc, #240]	; (4033fc <xQueueSemaphoreTake+0x194>)
  40330a:	4798      	blx	r3
  40330c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  40330e:	4b3a      	ldr	r3, [pc, #232]	; (4033f8 <xQueueSemaphoreTake+0x190>)
  403310:	4798      	blx	r3
  403312:	e042      	b.n	40339a <xQueueSemaphoreTake+0x132>
				prvUnlockQueue( pxQueue );
  403314:	4620      	mov	r0, r4
  403316:	4b3a      	ldr	r3, [pc, #232]	; (403400 <xQueueSemaphoreTake+0x198>)
  403318:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40331a:	4b3a      	ldr	r3, [pc, #232]	; (403404 <xQueueSemaphoreTake+0x19c>)
  40331c:	4798      	blx	r3
  40331e:	e009      	b.n	403334 <xQueueSemaphoreTake+0xcc>
			prvUnlockQueue( pxQueue );
  403320:	4620      	mov	r0, r4
  403322:	4b37      	ldr	r3, [pc, #220]	; (403400 <xQueueSemaphoreTake+0x198>)
  403324:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403326:	4b37      	ldr	r3, [pc, #220]	; (403404 <xQueueSemaphoreTake+0x19c>)
  403328:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40332a:	4620      	mov	r0, r4
  40332c:	4b36      	ldr	r3, [pc, #216]	; (403408 <xQueueSemaphoreTake+0x1a0>)
  40332e:	4798      	blx	r3
  403330:	2800      	cmp	r0, #0
  403332:	d146      	bne.n	4033c2 <xQueueSemaphoreTake+0x15a>
  403334:	f04f 0901 	mov.w	r9, #1
		taskENTER_CRITICAL();
  403338:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  40333a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  40333c:	2b00      	cmp	r3, #0
  40333e:	d1b4      	bne.n	4032aa <xQueueSemaphoreTake+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
  403340:	9b01      	ldr	r3, [sp, #4]
  403342:	2b00      	cmp	r3, #0
  403344:	d0ce      	beq.n	4032e4 <xQueueSemaphoreTake+0x7c>
				else if( xEntryTimeSet == pdFALSE )
  403346:	f1b9 0f00 	cmp.w	r9, #0
  40334a:	d0d8      	beq.n	4032fe <xQueueSemaphoreTake+0x96>
		taskEXIT_CRITICAL();
  40334c:	4b2a      	ldr	r3, [pc, #168]	; (4033f8 <xQueueSemaphoreTake+0x190>)
  40334e:	4798      	blx	r3
		vTaskSuspendAll();
  403350:	4b2e      	ldr	r3, [pc, #184]	; (40340c <xQueueSemaphoreTake+0x1a4>)
  403352:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403354:	47b0      	blx	r6
  403356:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40335a:	b25b      	sxtb	r3, r3
  40335c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403360:	bf04      	itt	eq
  403362:	2300      	moveq	r3, #0
  403364:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  403368:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40336c:	b25b      	sxtb	r3, r3
  40336e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403372:	bf04      	itt	eq
  403374:	2300      	moveq	r3, #0
  403376:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  40337a:	4b1f      	ldr	r3, [pc, #124]	; (4033f8 <xQueueSemaphoreTake+0x190>)
  40337c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40337e:	a901      	add	r1, sp, #4
  403380:	a802      	add	r0, sp, #8
  403382:	4b23      	ldr	r3, [pc, #140]	; (403410 <xQueueSemaphoreTake+0x1a8>)
  403384:	4798      	blx	r3
  403386:	2800      	cmp	r0, #0
  403388:	d1ca      	bne.n	403320 <xQueueSemaphoreTake+0xb8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40338a:	4620      	mov	r0, r4
  40338c:	4b1e      	ldr	r3, [pc, #120]	; (403408 <xQueueSemaphoreTake+0x1a0>)
  40338e:	4798      	blx	r3
  403390:	2800      	cmp	r0, #0
  403392:	d0bf      	beq.n	403314 <xQueueSemaphoreTake+0xac>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403394:	6823      	ldr	r3, [r4, #0]
  403396:	2b00      	cmp	r3, #0
  403398:	d0b4      	beq.n	403304 <xQueueSemaphoreTake+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40339a:	9901      	ldr	r1, [sp, #4]
  40339c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4033a0:	4b1c      	ldr	r3, [pc, #112]	; (403414 <xQueueSemaphoreTake+0x1ac>)
  4033a2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4033a4:	4620      	mov	r0, r4
  4033a6:	4b16      	ldr	r3, [pc, #88]	; (403400 <xQueueSemaphoreTake+0x198>)
  4033a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4033aa:	4b16      	ldr	r3, [pc, #88]	; (403404 <xQueueSemaphoreTake+0x19c>)
  4033ac:	4798      	blx	r3
  4033ae:	2800      	cmp	r0, #0
  4033b0:	d1c0      	bne.n	403334 <xQueueSemaphoreTake+0xcc>
					portYIELD_WITHIN_API();
  4033b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4033b6:	603b      	str	r3, [r7, #0]
  4033b8:	f3bf 8f4f 	dsb	sy
  4033bc:	f3bf 8f6f 	isb	sy
  4033c0:	e7b8      	b.n	403334 <xQueueSemaphoreTake+0xcc>
					if( xInheritanceOccurred != pdFALSE )
  4033c2:	2d00      	cmp	r5, #0
  4033c4:	d08a      	beq.n	4032dc <xQueueSemaphoreTake+0x74>
						taskENTER_CRITICAL();
  4033c6:	4b08      	ldr	r3, [pc, #32]	; (4033e8 <xQueueSemaphoreTake+0x180>)
  4033c8:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  4033ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4033cc:	b153      	cbz	r3, 4033e4 <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  4033ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4033d0:	6819      	ldr	r1, [r3, #0]
  4033d2:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  4033d6:	6860      	ldr	r0, [r4, #4]
  4033d8:	4b0f      	ldr	r3, [pc, #60]	; (403418 <xQueueSemaphoreTake+0x1b0>)
  4033da:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4033dc:	4b06      	ldr	r3, [pc, #24]	; (4033f8 <xQueueSemaphoreTake+0x190>)
  4033de:	4798      	blx	r3
				return errQUEUE_EMPTY;
  4033e0:	2500      	movs	r5, #0
  4033e2:	e77b      	b.n	4032dc <xQueueSemaphoreTake+0x74>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  4033e4:	2100      	movs	r1, #0
  4033e6:	e7f6      	b.n	4033d6 <xQueueSemaphoreTake+0x16e>
  4033e8:	00402ad5 	.word	0x00402ad5
  4033ec:	e000ed04 	.word	0xe000ed04
  4033f0:	00403ff5 	.word	0x00403ff5
  4033f4:	00403c45 	.word	0x00403c45
  4033f8:	00402b19 	.word	0x00402b19
  4033fc:	00403db1 	.word	0x00403db1
  403400:	00402ee5 	.word	0x00402ee5
  403404:	00403945 	.word	0x00403945
  403408:	00402dc1 	.word	0x00402dc1
  40340c:	004037f5 	.word	0x004037f5
  403410:	00403ced 	.word	0x00403ced
  403414:	00403c0d 	.word	0x00403c0d
  403418:	00403f2d 	.word	0x00403f2d
  40341c:	00403cd5 	.word	0x00403cd5

00403420 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403420:	4b08      	ldr	r3, [pc, #32]	; (403444 <prvResetNextTaskUnblockTime+0x24>)
  403422:	681b      	ldr	r3, [r3, #0]
  403424:	681b      	ldr	r3, [r3, #0]
  403426:	b13b      	cbz	r3, 403438 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403428:	4b06      	ldr	r3, [pc, #24]	; (403444 <prvResetNextTaskUnblockTime+0x24>)
  40342a:	681b      	ldr	r3, [r3, #0]
  40342c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40342e:	68db      	ldr	r3, [r3, #12]
  403430:	685a      	ldr	r2, [r3, #4]
  403432:	4b05      	ldr	r3, [pc, #20]	; (403448 <prvResetNextTaskUnblockTime+0x28>)
  403434:	601a      	str	r2, [r3, #0]
  403436:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  403438:	f04f 32ff 	mov.w	r2, #4294967295
  40343c:	4b02      	ldr	r3, [pc, #8]	; (403448 <prvResetNextTaskUnblockTime+0x28>)
  40343e:	601a      	str	r2, [r3, #0]
  403440:	4770      	bx	lr
  403442:	bf00      	nop
  403444:	2000c280 	.word	0x2000c280
  403448:	2000c330 	.word	0x2000c330

0040344c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  40344c:	b570      	push	{r4, r5, r6, lr}
  40344e:	4604      	mov	r4, r0
  403450:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  403452:	4b1d      	ldr	r3, [pc, #116]	; (4034c8 <prvAddCurrentTaskToDelayedList+0x7c>)
  403454:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  403456:	4b1d      	ldr	r3, [pc, #116]	; (4034cc <prvAddCurrentTaskToDelayedList+0x80>)
  403458:	6818      	ldr	r0, [r3, #0]
  40345a:	3004      	adds	r0, #4
  40345c:	4b1c      	ldr	r3, [pc, #112]	; (4034d0 <prvAddCurrentTaskToDelayedList+0x84>)
  40345e:	4798      	blx	r3
  403460:	b948      	cbnz	r0, 403476 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403462:	4b1a      	ldr	r3, [pc, #104]	; (4034cc <prvAddCurrentTaskToDelayedList+0x80>)
  403464:	681a      	ldr	r2, [r3, #0]
  403466:	491b      	ldr	r1, [pc, #108]	; (4034d4 <prvAddCurrentTaskToDelayedList+0x88>)
  403468:	680b      	ldr	r3, [r1, #0]
  40346a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40346c:	2201      	movs	r2, #1
  40346e:	4082      	lsls	r2, r0
  403470:	ea23 0302 	bic.w	r3, r3, r2
  403474:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  403476:	f1b4 3fff 	cmp.w	r4, #4294967295
  40347a:	d013      	beq.n	4034a4 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  40347c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  40347e:	4b13      	ldr	r3, [pc, #76]	; (4034cc <prvAddCurrentTaskToDelayedList+0x80>)
  403480:	681b      	ldr	r3, [r3, #0]
  403482:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  403484:	42a5      	cmp	r5, r4
  403486:	d816      	bhi.n	4034b6 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  403488:	4b13      	ldr	r3, [pc, #76]	; (4034d8 <prvAddCurrentTaskToDelayedList+0x8c>)
  40348a:	6818      	ldr	r0, [r3, #0]
  40348c:	4b0f      	ldr	r3, [pc, #60]	; (4034cc <prvAddCurrentTaskToDelayedList+0x80>)
  40348e:	6819      	ldr	r1, [r3, #0]
  403490:	3104      	adds	r1, #4
  403492:	4b12      	ldr	r3, [pc, #72]	; (4034dc <prvAddCurrentTaskToDelayedList+0x90>)
  403494:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  403496:	4b12      	ldr	r3, [pc, #72]	; (4034e0 <prvAddCurrentTaskToDelayedList+0x94>)
  403498:	681b      	ldr	r3, [r3, #0]
  40349a:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
  40349c:	bf3c      	itt	cc
  40349e:	4b10      	ldrcc	r3, [pc, #64]	; (4034e0 <prvAddCurrentTaskToDelayedList+0x94>)
  4034a0:	601c      	strcc	r4, [r3, #0]
  4034a2:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4034a4:	2e00      	cmp	r6, #0
  4034a6:	d0e9      	beq.n	40347c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4034a8:	4b08      	ldr	r3, [pc, #32]	; (4034cc <prvAddCurrentTaskToDelayedList+0x80>)
  4034aa:	6819      	ldr	r1, [r3, #0]
  4034ac:	3104      	adds	r1, #4
  4034ae:	480d      	ldr	r0, [pc, #52]	; (4034e4 <prvAddCurrentTaskToDelayedList+0x98>)
  4034b0:	4b0d      	ldr	r3, [pc, #52]	; (4034e8 <prvAddCurrentTaskToDelayedList+0x9c>)
  4034b2:	4798      	blx	r3
  4034b4:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4034b6:	4b0d      	ldr	r3, [pc, #52]	; (4034ec <prvAddCurrentTaskToDelayedList+0xa0>)
  4034b8:	6818      	ldr	r0, [r3, #0]
  4034ba:	4b04      	ldr	r3, [pc, #16]	; (4034cc <prvAddCurrentTaskToDelayedList+0x80>)
  4034bc:	6819      	ldr	r1, [r3, #0]
  4034be:	3104      	adds	r1, #4
  4034c0:	4b06      	ldr	r3, [pc, #24]	; (4034dc <prvAddCurrentTaskToDelayedList+0x90>)
  4034c2:	4798      	blx	r3
  4034c4:	bd70      	pop	{r4, r5, r6, pc}
  4034c6:	bf00      	nop
  4034c8:	2000c378 	.word	0x2000c378
  4034cc:	2000c27c 	.word	0x2000c27c
  4034d0:	004029df 	.word	0x004029df
  4034d4:	2000c300 	.word	0x2000c300
  4034d8:	2000c280 	.word	0x2000c280
  4034dc:	004029ab 	.word	0x004029ab
  4034e0:	2000c330 	.word	0x2000c330
  4034e4:	2000c350 	.word	0x2000c350
  4034e8:	00402993 	.word	0x00402993
  4034ec:	2000c284 	.word	0x2000c284

004034f0 <prvIdleTask>:
{
  4034f0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4034f2:	4d18      	ldr	r5, [pc, #96]	; (403554 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  4034f4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 403570 <prvIdleTask+0x80>
				taskYIELD();
  4034f8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 403574 <prvIdleTask+0x84>
  4034fc:	e001      	b.n	403502 <prvIdleTask+0x12>
			vApplicationIdleHook();
  4034fe:	4b16      	ldr	r3, [pc, #88]	; (403558 <prvIdleTask+0x68>)
  403500:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  403502:	682b      	ldr	r3, [r5, #0]
  403504:	b1c3      	cbz	r3, 403538 <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  403506:	4f15      	ldr	r7, [pc, #84]	; (40355c <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403508:	4e15      	ldr	r6, [pc, #84]	; (403560 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  40350a:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40350c:	68fb      	ldr	r3, [r7, #12]
  40350e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403510:	1d20      	adds	r0, r4, #4
  403512:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  403514:	4a13      	ldr	r2, [pc, #76]	; (403564 <prvIdleTask+0x74>)
  403516:	6813      	ldr	r3, [r2, #0]
  403518:	3b01      	subs	r3, #1
  40351a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  40351c:	682b      	ldr	r3, [r5, #0]
  40351e:	3b01      	subs	r3, #1
  403520:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  403522:	4b11      	ldr	r3, [pc, #68]	; (403568 <prvIdleTask+0x78>)
  403524:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  403526:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403528:	f8df a04c 	ldr.w	sl, [pc, #76]	; 403578 <prvIdleTask+0x88>
  40352c:	47d0      	blx	sl
			vPortFree( pxTCB );
  40352e:	4620      	mov	r0, r4
  403530:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  403532:	682b      	ldr	r3, [r5, #0]
  403534:	2b00      	cmp	r3, #0
  403536:	d1e8      	bne.n	40350a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  403538:	4b0c      	ldr	r3, [pc, #48]	; (40356c <prvIdleTask+0x7c>)
  40353a:	681b      	ldr	r3, [r3, #0]
  40353c:	2b01      	cmp	r3, #1
  40353e:	d9de      	bls.n	4034fe <prvIdleTask+0xe>
				taskYIELD();
  403540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403544:	f8c9 3000 	str.w	r3, [r9]
  403548:	f3bf 8f4f 	dsb	sy
  40354c:	f3bf 8f6f 	isb	sy
  403550:	e7d5      	b.n	4034fe <prvIdleTask+0xe>
  403552:	bf00      	nop
  403554:	2000c2f0 	.word	0x2000c2f0
  403558:	00404131 	.word	0x00404131
  40355c:	2000c364 	.word	0x2000c364
  403560:	004029df 	.word	0x004029df
  403564:	2000c2ec 	.word	0x2000c2ec
  403568:	00402b19 	.word	0x00402b19
  40356c:	2000c288 	.word	0x2000c288
  403570:	00402ad5 	.word	0x00402ad5
  403574:	e000ed04 	.word	0xe000ed04
  403578:	00402da9 	.word	0x00402da9

0040357c <xTaskCreate>:
	{
  40357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403580:	b083      	sub	sp, #12
  403582:	4683      	mov	fp, r0
  403584:	460d      	mov	r5, r1
  403586:	9301      	str	r3, [sp, #4]
  403588:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40358c:	0096      	lsls	r6, r2, #2
  40358e:	4630      	mov	r0, r6
  403590:	4b60      	ldr	r3, [pc, #384]	; (403714 <xTaskCreate+0x198>)
  403592:	4798      	blx	r3
			if( pxStack != NULL )
  403594:	2800      	cmp	r0, #0
  403596:	f000 808d 	beq.w	4036b4 <xTaskCreate+0x138>
  40359a:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  40359c:	205c      	movs	r0, #92	; 0x5c
  40359e:	4b5d      	ldr	r3, [pc, #372]	; (403714 <xTaskCreate+0x198>)
  4035a0:	4798      	blx	r3
				if( pxNewTCB != NULL )
  4035a2:	4604      	mov	r4, r0
  4035a4:	2800      	cmp	r0, #0
  4035a6:	f000 8082 	beq.w	4036ae <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  4035aa:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4035ac:	4632      	mov	r2, r6
  4035ae:	21a5      	movs	r1, #165	; 0xa5
  4035b0:	4638      	mov	r0, r7
  4035b2:	4b59      	ldr	r3, [pc, #356]	; (403718 <xTaskCreate+0x19c>)
  4035b4:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  4035b6:	3e04      	subs	r6, #4
  4035b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4035ba:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4035bc:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4035c0:	782b      	ldrb	r3, [r5, #0]
  4035c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4035c6:	782b      	ldrb	r3, [r5, #0]
  4035c8:	b163      	cbz	r3, 4035e4 <xTaskCreate+0x68>
  4035ca:	462b      	mov	r3, r5
  4035cc:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4035d0:	f105 010f 	add.w	r1, r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4035d4:	7858      	ldrb	r0, [r3, #1]
  4035d6:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4035da:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  4035de:	b108      	cbz	r0, 4035e4 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4035e0:	428b      	cmp	r3, r1
  4035e2:	d1f7      	bne.n	4035d4 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4035e4:	2700      	movs	r7, #0
  4035e6:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
  4035ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4035ec:	2d04      	cmp	r5, #4
  4035ee:	bf28      	it	cs
  4035f0:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  4035f2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  4035f4:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
  4035f6:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4035f8:	f104 0804 	add.w	r8, r4, #4
  4035fc:	4640      	mov	r0, r8
  4035fe:	f8df 916c 	ldr.w	r9, [pc, #364]	; 40376c <xTaskCreate+0x1f0>
  403602:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  403604:	f104 0018 	add.w	r0, r4, #24
  403608:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40360a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40360c:	f1c5 0505 	rsb	r5, r5, #5
  403610:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  403612:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  403614:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  403616:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40361a:	9a01      	ldr	r2, [sp, #4]
  40361c:	4659      	mov	r1, fp
  40361e:	4630      	mov	r0, r6
  403620:	4b3e      	ldr	r3, [pc, #248]	; (40371c <xTaskCreate+0x1a0>)
  403622:	4798      	blx	r3
  403624:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  403626:	f1ba 0f00 	cmp.w	sl, #0
  40362a:	d001      	beq.n	403630 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40362c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  403630:	4b3b      	ldr	r3, [pc, #236]	; (403720 <xTaskCreate+0x1a4>)
  403632:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  403634:	4a3b      	ldr	r2, [pc, #236]	; (403724 <xTaskCreate+0x1a8>)
  403636:	6813      	ldr	r3, [r2, #0]
  403638:	3301      	adds	r3, #1
  40363a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  40363c:	4b3a      	ldr	r3, [pc, #232]	; (403728 <xTaskCreate+0x1ac>)
  40363e:	681b      	ldr	r3, [r3, #0]
  403640:	2b00      	cmp	r3, #0
  403642:	d03a      	beq.n	4036ba <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  403644:	4b39      	ldr	r3, [pc, #228]	; (40372c <xTaskCreate+0x1b0>)
  403646:	681b      	ldr	r3, [r3, #0]
  403648:	b93b      	cbnz	r3, 40365a <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40364a:	4b37      	ldr	r3, [pc, #220]	; (403728 <xTaskCreate+0x1ac>)
  40364c:	681b      	ldr	r3, [r3, #0]
  40364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403652:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
  403654:	bf9c      	itt	ls
  403656:	4b34      	ldrls	r3, [pc, #208]	; (403728 <xTaskCreate+0x1ac>)
  403658:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
  40365a:	4a35      	ldr	r2, [pc, #212]	; (403730 <xTaskCreate+0x1b4>)
  40365c:	6813      	ldr	r3, [r2, #0]
  40365e:	3301      	adds	r3, #1
  403660:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  403662:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
  403664:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403666:	4a33      	ldr	r2, [pc, #204]	; (403734 <xTaskCreate+0x1b8>)
  403668:	6811      	ldr	r1, [r2, #0]
  40366a:	2301      	movs	r3, #1
  40366c:	4083      	lsls	r3, r0
  40366e:	430b      	orrs	r3, r1
  403670:	6013      	str	r3, [r2, #0]
  403672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403676:	4641      	mov	r1, r8
  403678:	4b2f      	ldr	r3, [pc, #188]	; (403738 <xTaskCreate+0x1bc>)
  40367a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40367e:	4b2f      	ldr	r3, [pc, #188]	; (40373c <xTaskCreate+0x1c0>)
  403680:	4798      	blx	r3
	taskEXIT_CRITICAL();
  403682:	4b2f      	ldr	r3, [pc, #188]	; (403740 <xTaskCreate+0x1c4>)
  403684:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  403686:	4b29      	ldr	r3, [pc, #164]	; (40372c <xTaskCreate+0x1b0>)
  403688:	681b      	ldr	r3, [r3, #0]
  40368a:	2b00      	cmp	r3, #0
  40368c:	d03b      	beq.n	403706 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40368e:	4b26      	ldr	r3, [pc, #152]	; (403728 <xTaskCreate+0x1ac>)
  403690:	681b      	ldr	r3, [r3, #0]
  403692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403696:	429a      	cmp	r2, r3
  403698:	d239      	bcs.n	40370e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  40369a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40369e:	4b29      	ldr	r3, [pc, #164]	; (403744 <xTaskCreate+0x1c8>)
  4036a0:	601a      	str	r2, [r3, #0]
  4036a2:	f3bf 8f4f 	dsb	sy
  4036a6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4036aa:	2001      	movs	r0, #1
  4036ac:	e02c      	b.n	403708 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  4036ae:	4638      	mov	r0, r7
  4036b0:	4b25      	ldr	r3, [pc, #148]	; (403748 <xTaskCreate+0x1cc>)
  4036b2:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4036b4:	f04f 30ff 	mov.w	r0, #4294967295
  4036b8:	e026      	b.n	403708 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  4036ba:	4b1b      	ldr	r3, [pc, #108]	; (403728 <xTaskCreate+0x1ac>)
  4036bc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4036be:	6813      	ldr	r3, [r2, #0]
  4036c0:	2b01      	cmp	r3, #1
  4036c2:	d1ca      	bne.n	40365a <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4036c4:	4e1c      	ldr	r6, [pc, #112]	; (403738 <xTaskCreate+0x1bc>)
  4036c6:	4630      	mov	r0, r6
  4036c8:	4d20      	ldr	r5, [pc, #128]	; (40374c <xTaskCreate+0x1d0>)
  4036ca:	47a8      	blx	r5
  4036cc:	f106 0014 	add.w	r0, r6, #20
  4036d0:	47a8      	blx	r5
  4036d2:	f106 0028 	add.w	r0, r6, #40	; 0x28
  4036d6:	47a8      	blx	r5
  4036d8:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  4036dc:	47a8      	blx	r5
  4036de:	f106 0050 	add.w	r0, r6, #80	; 0x50
  4036e2:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  4036e4:	4f1a      	ldr	r7, [pc, #104]	; (403750 <xTaskCreate+0x1d4>)
  4036e6:	4638      	mov	r0, r7
  4036e8:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  4036ea:	4e1a      	ldr	r6, [pc, #104]	; (403754 <xTaskCreate+0x1d8>)
  4036ec:	4630      	mov	r0, r6
  4036ee:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4036f0:	4819      	ldr	r0, [pc, #100]	; (403758 <xTaskCreate+0x1dc>)
  4036f2:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  4036f4:	4819      	ldr	r0, [pc, #100]	; (40375c <xTaskCreate+0x1e0>)
  4036f6:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  4036f8:	4819      	ldr	r0, [pc, #100]	; (403760 <xTaskCreate+0x1e4>)
  4036fa:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  4036fc:	4b19      	ldr	r3, [pc, #100]	; (403764 <xTaskCreate+0x1e8>)
  4036fe:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  403700:	4b19      	ldr	r3, [pc, #100]	; (403768 <xTaskCreate+0x1ec>)
  403702:	601e      	str	r6, [r3, #0]
  403704:	e7a9      	b.n	40365a <xTaskCreate+0xde>
			xReturn = pdPASS;
  403706:	2001      	movs	r0, #1
	}
  403708:	b003      	add	sp, #12
  40370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  40370e:	2001      	movs	r0, #1
		return xReturn;
  403710:	e7fa      	b.n	403708 <xTaskCreate+0x18c>
  403712:	bf00      	nop
  403714:	00402d39 	.word	0x00402d39
  403718:	00405649 	.word	0x00405649
  40371c:	00402a81 	.word	0x00402a81
  403720:	00402ad5 	.word	0x00402ad5
  403724:	2000c2ec 	.word	0x2000c2ec
  403728:	2000c27c 	.word	0x2000c27c
  40372c:	2000c34c 	.word	0x2000c34c
  403730:	2000c2fc 	.word	0x2000c2fc
  403734:	2000c300 	.word	0x2000c300
  403738:	2000c288 	.word	0x2000c288
  40373c:	00402993 	.word	0x00402993
  403740:	00402b19 	.word	0x00402b19
  403744:	e000ed04 	.word	0xe000ed04
  403748:	00402da9 	.word	0x00402da9
  40374c:	00402977 	.word	0x00402977
  403750:	2000c304 	.word	0x2000c304
  403754:	2000c318 	.word	0x2000c318
  403758:	2000c338 	.word	0x2000c338
  40375c:	2000c364 	.word	0x2000c364
  403760:	2000c350 	.word	0x2000c350
  403764:	2000c280 	.word	0x2000c280
  403768:	2000c284 	.word	0x2000c284
  40376c:	0040298d 	.word	0x0040298d

00403770 <vTaskStartScheduler>:
{
  403770:	b510      	push	{r4, lr}
  403772:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  403774:	4b17      	ldr	r3, [pc, #92]	; (4037d4 <vTaskStartScheduler+0x64>)
  403776:	9301      	str	r3, [sp, #4]
  403778:	2300      	movs	r3, #0
  40377a:	9300      	str	r3, [sp, #0]
  40377c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403780:	4915      	ldr	r1, [pc, #84]	; (4037d8 <vTaskStartScheduler+0x68>)
  403782:	4816      	ldr	r0, [pc, #88]	; (4037dc <vTaskStartScheduler+0x6c>)
  403784:	4c16      	ldr	r4, [pc, #88]	; (4037e0 <vTaskStartScheduler+0x70>)
  403786:	47a0      	blx	r4
	if( xReturn == pdPASS )
  403788:	2801      	cmp	r0, #1
  40378a:	d004      	beq.n	403796 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40378c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403790:	d016      	beq.n	4037c0 <vTaskStartScheduler+0x50>
}
  403792:	b002      	add	sp, #8
  403794:	bd10      	pop	{r4, pc}
  403796:	f04f 0350 	mov.w	r3, #80	; 0x50
  40379a:	f383 8811 	msr	BASEPRI, r3
  40379e:	f3bf 8f6f 	isb	sy
  4037a2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  4037a6:	f04f 32ff 	mov.w	r2, #4294967295
  4037aa:	4b0e      	ldr	r3, [pc, #56]	; (4037e4 <vTaskStartScheduler+0x74>)
  4037ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4037ae:	2201      	movs	r2, #1
  4037b0:	4b0d      	ldr	r3, [pc, #52]	; (4037e8 <vTaskStartScheduler+0x78>)
  4037b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4037b4:	2200      	movs	r2, #0
  4037b6:	4b0d      	ldr	r3, [pc, #52]	; (4037ec <vTaskStartScheduler+0x7c>)
  4037b8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4037ba:	4b0d      	ldr	r3, [pc, #52]	; (4037f0 <vTaskStartScheduler+0x80>)
  4037bc:	4798      	blx	r3
  4037be:	e7e8      	b.n	403792 <vTaskStartScheduler+0x22>
  4037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
  4037c4:	f383 8811 	msr	BASEPRI, r3
  4037c8:	f3bf 8f6f 	isb	sy
  4037cc:	f3bf 8f4f 	dsb	sy
  4037d0:	e7fe      	b.n	4037d0 <vTaskStartScheduler+0x60>
  4037d2:	bf00      	nop
  4037d4:	2000c32c 	.word	0x2000c32c
  4037d8:	004087e8 	.word	0x004087e8
  4037dc:	004034f1 	.word	0x004034f1
  4037e0:	0040357d 	.word	0x0040357d
  4037e4:	2000c330 	.word	0x2000c330
  4037e8:	2000c34c 	.word	0x2000c34c
  4037ec:	2000c378 	.word	0x2000c378
  4037f0:	00402c0d 	.word	0x00402c0d

004037f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4037f4:	4a02      	ldr	r2, [pc, #8]	; (403800 <vTaskSuspendAll+0xc>)
  4037f6:	6813      	ldr	r3, [r2, #0]
  4037f8:	3301      	adds	r3, #1
  4037fa:	6013      	str	r3, [r2, #0]
  4037fc:	4770      	bx	lr
  4037fe:	bf00      	nop
  403800:	2000c2f8 	.word	0x2000c2f8

00403804 <xTaskGetTickCount>:
		xTicks = xTickCount;
  403804:	4b01      	ldr	r3, [pc, #4]	; (40380c <xTaskGetTickCount+0x8>)
  403806:	6818      	ldr	r0, [r3, #0]
}
  403808:	4770      	bx	lr
  40380a:	bf00      	nop
  40380c:	2000c378 	.word	0x2000c378

00403810 <xTaskIncrementTick>:
{
  403810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403814:	4b3d      	ldr	r3, [pc, #244]	; (40390c <xTaskIncrementTick+0xfc>)
  403816:	681b      	ldr	r3, [r3, #0]
  403818:	2b00      	cmp	r3, #0
  40381a:	d169      	bne.n	4038f0 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  40381c:	4b3c      	ldr	r3, [pc, #240]	; (403910 <xTaskIncrementTick+0x100>)
  40381e:	681d      	ldr	r5, [r3, #0]
  403820:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  403822:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  403824:	b9c5      	cbnz	r5, 403858 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
  403826:	4b3b      	ldr	r3, [pc, #236]	; (403914 <xTaskIncrementTick+0x104>)
  403828:	681b      	ldr	r3, [r3, #0]
  40382a:	681b      	ldr	r3, [r3, #0]
  40382c:	b143      	cbz	r3, 403840 <xTaskIncrementTick+0x30>
  40382e:	f04f 0350 	mov.w	r3, #80	; 0x50
  403832:	f383 8811 	msr	BASEPRI, r3
  403836:	f3bf 8f6f 	isb	sy
  40383a:	f3bf 8f4f 	dsb	sy
  40383e:	e7fe      	b.n	40383e <xTaskIncrementTick+0x2e>
  403840:	4a34      	ldr	r2, [pc, #208]	; (403914 <xTaskIncrementTick+0x104>)
  403842:	6811      	ldr	r1, [r2, #0]
  403844:	4b34      	ldr	r3, [pc, #208]	; (403918 <xTaskIncrementTick+0x108>)
  403846:	6818      	ldr	r0, [r3, #0]
  403848:	6010      	str	r0, [r2, #0]
  40384a:	6019      	str	r1, [r3, #0]
  40384c:	4a33      	ldr	r2, [pc, #204]	; (40391c <xTaskIncrementTick+0x10c>)
  40384e:	6813      	ldr	r3, [r2, #0]
  403850:	3301      	adds	r3, #1
  403852:	6013      	str	r3, [r2, #0]
  403854:	4b32      	ldr	r3, [pc, #200]	; (403920 <xTaskIncrementTick+0x110>)
  403856:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  403858:	4b32      	ldr	r3, [pc, #200]	; (403924 <xTaskIncrementTick+0x114>)
  40385a:	681b      	ldr	r3, [r3, #0]
  40385c:	429d      	cmp	r5, r3
  40385e:	d20c      	bcs.n	40387a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
  403860:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403862:	4b31      	ldr	r3, [pc, #196]	; (403928 <xTaskIncrementTick+0x118>)
  403864:	681b      	ldr	r3, [r3, #0]
  403866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40386c:	009b      	lsls	r3, r3, #2
  40386e:	4a2f      	ldr	r2, [pc, #188]	; (40392c <xTaskIncrementTick+0x11c>)
  403870:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  403872:	2b02      	cmp	r3, #2
  403874:	bf28      	it	cs
  403876:	2401      	movcs	r4, #1
  403878:	e03f      	b.n	4038fa <xTaskIncrementTick+0xea>
  40387a:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40387c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 403914 <xTaskIncrementTick+0x104>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403880:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403940 <xTaskIncrementTick+0x130>
					prvAddTaskToReadyList( pxTCB );
  403884:	4f2a      	ldr	r7, [pc, #168]	; (403930 <xTaskIncrementTick+0x120>)
  403886:	e01f      	b.n	4038c8 <xTaskIncrementTick+0xb8>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403888:	f04f 32ff 	mov.w	r2, #4294967295
  40388c:	4b25      	ldr	r3, [pc, #148]	; (403924 <xTaskIncrementTick+0x114>)
  40388e:	601a      	str	r2, [r3, #0]
					break;
  403890:	e7e7      	b.n	403862 <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
  403892:	4a24      	ldr	r2, [pc, #144]	; (403924 <xTaskIncrementTick+0x114>)
  403894:	6013      	str	r3, [r2, #0]
						break;
  403896:	e7e4      	b.n	403862 <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403898:	f106 0018 	add.w	r0, r6, #24
  40389c:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  40389e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  4038a0:	683a      	ldr	r2, [r7, #0]
  4038a2:	2301      	movs	r3, #1
  4038a4:	4083      	lsls	r3, r0
  4038a6:	4313      	orrs	r3, r2
  4038a8:	603b      	str	r3, [r7, #0]
  4038aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4038ae:	4651      	mov	r1, sl
  4038b0:	4b1e      	ldr	r3, [pc, #120]	; (40392c <xTaskIncrementTick+0x11c>)
  4038b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4038b6:	4b1f      	ldr	r3, [pc, #124]	; (403934 <xTaskIncrementTick+0x124>)
  4038b8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4038ba:	4b1b      	ldr	r3, [pc, #108]	; (403928 <xTaskIncrementTick+0x118>)
  4038bc:	681b      	ldr	r3, [r3, #0]
  4038be:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  4038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  4038c2:	429a      	cmp	r2, r3
  4038c4:	bf28      	it	cs
  4038c6:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4038c8:	f8d9 3000 	ldr.w	r3, [r9]
  4038cc:	681b      	ldr	r3, [r3, #0]
  4038ce:	2b00      	cmp	r3, #0
  4038d0:	d0da      	beq.n	403888 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4038d2:	f8d9 3000 	ldr.w	r3, [r9]
  4038d6:	68db      	ldr	r3, [r3, #12]
  4038d8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  4038da:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  4038dc:	429d      	cmp	r5, r3
  4038de:	d3d8      	bcc.n	403892 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4038e0:	f106 0a04 	add.w	sl, r6, #4
  4038e4:	4650      	mov	r0, sl
  4038e6:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4038e8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  4038ea:	2b00      	cmp	r3, #0
  4038ec:	d1d4      	bne.n	403898 <xTaskIncrementTick+0x88>
  4038ee:	e7d6      	b.n	40389e <xTaskIncrementTick+0x8e>
		++uxPendedTicks;
  4038f0:	4a11      	ldr	r2, [pc, #68]	; (403938 <xTaskIncrementTick+0x128>)
  4038f2:	6813      	ldr	r3, [r2, #0]
  4038f4:	3301      	adds	r3, #1
  4038f6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  4038f8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
  4038fa:	4b10      	ldr	r3, [pc, #64]	; (40393c <xTaskIncrementTick+0x12c>)
  4038fc:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4038fe:	2b00      	cmp	r3, #0
}
  403900:	bf0c      	ite	eq
  403902:	4620      	moveq	r0, r4
  403904:	2001      	movne	r0, #1
  403906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40390a:	bf00      	nop
  40390c:	2000c2f8 	.word	0x2000c2f8
  403910:	2000c378 	.word	0x2000c378
  403914:	2000c280 	.word	0x2000c280
  403918:	2000c284 	.word	0x2000c284
  40391c:	2000c334 	.word	0x2000c334
  403920:	00403421 	.word	0x00403421
  403924:	2000c330 	.word	0x2000c330
  403928:	2000c27c 	.word	0x2000c27c
  40392c:	2000c288 	.word	0x2000c288
  403930:	2000c300 	.word	0x2000c300
  403934:	00402993 	.word	0x00402993
  403938:	2000c2f4 	.word	0x2000c2f4
  40393c:	2000c37c 	.word	0x2000c37c
  403940:	004029df 	.word	0x004029df

00403944 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  403944:	4b35      	ldr	r3, [pc, #212]	; (403a1c <xTaskResumeAll+0xd8>)
  403946:	681b      	ldr	r3, [r3, #0]
  403948:	b943      	cbnz	r3, 40395c <xTaskResumeAll+0x18>
  40394a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40394e:	f383 8811 	msr	BASEPRI, r3
  403952:	f3bf 8f6f 	isb	sy
  403956:	f3bf 8f4f 	dsb	sy
  40395a:	e7fe      	b.n	40395a <xTaskResumeAll+0x16>
{
  40395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  403960:	4b2f      	ldr	r3, [pc, #188]	; (403a20 <xTaskResumeAll+0xdc>)
  403962:	4798      	blx	r3
		--uxSchedulerSuspended;
  403964:	4b2d      	ldr	r3, [pc, #180]	; (403a1c <xTaskResumeAll+0xd8>)
  403966:	681a      	ldr	r2, [r3, #0]
  403968:	3a01      	subs	r2, #1
  40396a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40396c:	681b      	ldr	r3, [r3, #0]
  40396e:	2b00      	cmp	r3, #0
  403970:	d150      	bne.n	403a14 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  403972:	4b2c      	ldr	r3, [pc, #176]	; (403a24 <xTaskResumeAll+0xe0>)
  403974:	681b      	ldr	r3, [r3, #0]
  403976:	b92b      	cbnz	r3, 403984 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
  403978:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40397a:	4b2b      	ldr	r3, [pc, #172]	; (403a28 <xTaskResumeAll+0xe4>)
  40397c:	4798      	blx	r3
}
  40397e:	4620      	mov	r0, r4
  403980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403984:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403986:	4f29      	ldr	r7, [pc, #164]	; (403a2c <xTaskResumeAll+0xe8>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403988:	4e29      	ldr	r6, [pc, #164]	; (403a30 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
  40398a:	4d2a      	ldr	r5, [pc, #168]	; (403a34 <xTaskResumeAll+0xf0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40398c:	683b      	ldr	r3, [r7, #0]
  40398e:	b303      	cbz	r3, 4039d2 <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  403990:	68fb      	ldr	r3, [r7, #12]
  403992:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403994:	f104 0018 	add.w	r0, r4, #24
  403998:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40399a:	f104 0804 	add.w	r8, r4, #4
  40399e:	4640      	mov	r0, r8
  4039a0:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4039a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4039a4:	682a      	ldr	r2, [r5, #0]
  4039a6:	2301      	movs	r3, #1
  4039a8:	4083      	lsls	r3, r0
  4039aa:	4313      	orrs	r3, r2
  4039ac:	602b      	str	r3, [r5, #0]
  4039ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4039b2:	4641      	mov	r1, r8
  4039b4:	4b20      	ldr	r3, [pc, #128]	; (403a38 <xTaskResumeAll+0xf4>)
  4039b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4039ba:	4b20      	ldr	r3, [pc, #128]	; (403a3c <xTaskResumeAll+0xf8>)
  4039bc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4039be:	4b20      	ldr	r3, [pc, #128]	; (403a40 <xTaskResumeAll+0xfc>)
  4039c0:	681b      	ldr	r3, [r3, #0]
  4039c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4039c6:	429a      	cmp	r2, r3
  4039c8:	d3e0      	bcc.n	40398c <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
  4039ca:	2201      	movs	r2, #1
  4039cc:	4b1d      	ldr	r3, [pc, #116]	; (403a44 <xTaskResumeAll+0x100>)
  4039ce:	601a      	str	r2, [r3, #0]
  4039d0:	e7dc      	b.n	40398c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
  4039d2:	b10c      	cbz	r4, 4039d8 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
  4039d4:	4b1c      	ldr	r3, [pc, #112]	; (403a48 <xTaskResumeAll+0x104>)
  4039d6:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  4039d8:	4b1c      	ldr	r3, [pc, #112]	; (403a4c <xTaskResumeAll+0x108>)
  4039da:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  4039dc:	b16c      	cbz	r4, 4039fa <xTaskResumeAll+0xb6>
							if( xTaskIncrementTick() != pdFALSE )
  4039de:	4f1c      	ldr	r7, [pc, #112]	; (403a50 <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
  4039e0:	4e18      	ldr	r6, [pc, #96]	; (403a44 <xTaskResumeAll+0x100>)
  4039e2:	2501      	movs	r5, #1
  4039e4:	e001      	b.n	4039ea <xTaskResumeAll+0xa6>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  4039e6:	3c01      	subs	r4, #1
  4039e8:	d004      	beq.n	4039f4 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
  4039ea:	47b8      	blx	r7
  4039ec:	2800      	cmp	r0, #0
  4039ee:	d0fa      	beq.n	4039e6 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
  4039f0:	6035      	str	r5, [r6, #0]
  4039f2:	e7f8      	b.n	4039e6 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
  4039f4:	2200      	movs	r2, #0
  4039f6:	4b15      	ldr	r3, [pc, #84]	; (403a4c <xTaskResumeAll+0x108>)
  4039f8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  4039fa:	4b12      	ldr	r3, [pc, #72]	; (403a44 <xTaskResumeAll+0x100>)
  4039fc:	681b      	ldr	r3, [r3, #0]
  4039fe:	b15b      	cbz	r3, 403a18 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
  403a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403a04:	4b13      	ldr	r3, [pc, #76]	; (403a54 <xTaskResumeAll+0x110>)
  403a06:	601a      	str	r2, [r3, #0]
  403a08:	f3bf 8f4f 	dsb	sy
  403a0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  403a10:	2401      	movs	r4, #1
  403a12:	e7b2      	b.n	40397a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
  403a14:	2400      	movs	r4, #0
  403a16:	e7b0      	b.n	40397a <xTaskResumeAll+0x36>
  403a18:	2400      	movs	r4, #0
  403a1a:	e7ae      	b.n	40397a <xTaskResumeAll+0x36>
  403a1c:	2000c2f8 	.word	0x2000c2f8
  403a20:	00402ad5 	.word	0x00402ad5
  403a24:	2000c2ec 	.word	0x2000c2ec
  403a28:	00402b19 	.word	0x00402b19
  403a2c:	2000c338 	.word	0x2000c338
  403a30:	004029df 	.word	0x004029df
  403a34:	2000c300 	.word	0x2000c300
  403a38:	2000c288 	.word	0x2000c288
  403a3c:	00402993 	.word	0x00402993
  403a40:	2000c27c 	.word	0x2000c27c
  403a44:	2000c37c 	.word	0x2000c37c
  403a48:	00403421 	.word	0x00403421
  403a4c:	2000c2f4 	.word	0x2000c2f4
  403a50:	00403811 	.word	0x00403811
  403a54:	e000ed04 	.word	0xe000ed04

00403a58 <vTaskDelayUntil>:
	{
  403a58:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
  403a5a:	b150      	cbz	r0, 403a72 <vTaskDelayUntil+0x1a>
  403a5c:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
  403a5e:	b989      	cbnz	r1, 403a84 <vTaskDelayUntil+0x2c>
  403a60:	f04f 0350 	mov.w	r3, #80	; 0x50
  403a64:	f383 8811 	msr	BASEPRI, r3
  403a68:	f3bf 8f6f 	isb	sy
  403a6c:	f3bf 8f4f 	dsb	sy
  403a70:	e7fe      	b.n	403a70 <vTaskDelayUntil+0x18>
  403a72:	f04f 0350 	mov.w	r3, #80	; 0x50
  403a76:	f383 8811 	msr	BASEPRI, r3
  403a7a:	f3bf 8f6f 	isb	sy
  403a7e:	f3bf 8f4f 	dsb	sy
  403a82:	e7fe      	b.n	403a82 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
  403a84:	4b19      	ldr	r3, [pc, #100]	; (403aec <vTaskDelayUntil+0x94>)
  403a86:	681b      	ldr	r3, [r3, #0]
  403a88:	b143      	cbz	r3, 403a9c <vTaskDelayUntil+0x44>
  403a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
  403a8e:	f383 8811 	msr	BASEPRI, r3
  403a92:	f3bf 8f6f 	isb	sy
  403a96:	f3bf 8f4f 	dsb	sy
  403a9a:	e7fe      	b.n	403a9a <vTaskDelayUntil+0x42>
  403a9c:	460c      	mov	r4, r1
		vTaskSuspendAll();
  403a9e:	4b14      	ldr	r3, [pc, #80]	; (403af0 <vTaskDelayUntil+0x98>)
  403aa0:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
  403aa2:	4b14      	ldr	r3, [pc, #80]	; (403af4 <vTaskDelayUntil+0x9c>)
  403aa4:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
  403aa6:	682a      	ldr	r2, [r5, #0]
  403aa8:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
  403aaa:	4290      	cmp	r0, r2
  403aac:	d214      	bcs.n	403ad8 <vTaskDelayUntil+0x80>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
  403aae:	42a2      	cmp	r2, r4
  403ab0:	d916      	bls.n	403ae0 <vTaskDelayUntil+0x88>
			*pxPreviousWakeTime = xTimeToWake;
  403ab2:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
  403ab4:	42a0      	cmp	r0, r4
  403ab6:	d203      	bcs.n	403ac0 <vTaskDelayUntil+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
  403ab8:	2100      	movs	r1, #0
  403aba:	1a20      	subs	r0, r4, r0
  403abc:	4b0e      	ldr	r3, [pc, #56]	; (403af8 <vTaskDelayUntil+0xa0>)
  403abe:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
  403ac0:	4b0e      	ldr	r3, [pc, #56]	; (403afc <vTaskDelayUntil+0xa4>)
  403ac2:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  403ac4:	b980      	cbnz	r0, 403ae8 <vTaskDelayUntil+0x90>
			portYIELD_WITHIN_API();
  403ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403aca:	4b0d      	ldr	r3, [pc, #52]	; (403b00 <vTaskDelayUntil+0xa8>)
  403acc:	601a      	str	r2, [r3, #0]
  403ace:	f3bf 8f4f 	dsb	sy
  403ad2:	f3bf 8f6f 	isb	sy
	}
  403ad6:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
  403ad8:	42a2      	cmp	r2, r4
  403ada:	d803      	bhi.n	403ae4 <vTaskDelayUntil+0x8c>
  403adc:	42a0      	cmp	r0, r4
  403ade:	d301      	bcc.n	403ae4 <vTaskDelayUntil+0x8c>
			*pxPreviousWakeTime = xTimeToWake;
  403ae0:	602c      	str	r4, [r5, #0]
  403ae2:	e7ed      	b.n	403ac0 <vTaskDelayUntil+0x68>
  403ae4:	602c      	str	r4, [r5, #0]
  403ae6:	e7e7      	b.n	403ab8 <vTaskDelayUntil+0x60>
  403ae8:	bd38      	pop	{r3, r4, r5, pc}
  403aea:	bf00      	nop
  403aec:	2000c2f8 	.word	0x2000c2f8
  403af0:	004037f5 	.word	0x004037f5
  403af4:	2000c378 	.word	0x2000c378
  403af8:	0040344d 	.word	0x0040344d
  403afc:	00403945 	.word	0x00403945
  403b00:	e000ed04 	.word	0xe000ed04

00403b04 <vTaskDelay>:
	{
  403b04:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  403b06:	b1a8      	cbz	r0, 403b34 <vTaskDelay+0x30>
  403b08:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403b0a:	4b0f      	ldr	r3, [pc, #60]	; (403b48 <vTaskDelay+0x44>)
  403b0c:	681b      	ldr	r3, [r3, #0]
  403b0e:	b143      	cbz	r3, 403b22 <vTaskDelay+0x1e>
  403b10:	f04f 0350 	mov.w	r3, #80	; 0x50
  403b14:	f383 8811 	msr	BASEPRI, r3
  403b18:	f3bf 8f6f 	isb	sy
  403b1c:	f3bf 8f4f 	dsb	sy
  403b20:	e7fe      	b.n	403b20 <vTaskDelay+0x1c>
			vTaskSuspendAll();
  403b22:	4b0a      	ldr	r3, [pc, #40]	; (403b4c <vTaskDelay+0x48>)
  403b24:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  403b26:	2100      	movs	r1, #0
  403b28:	4620      	mov	r0, r4
  403b2a:	4b09      	ldr	r3, [pc, #36]	; (403b50 <vTaskDelay+0x4c>)
  403b2c:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  403b2e:	4b09      	ldr	r3, [pc, #36]	; (403b54 <vTaskDelay+0x50>)
  403b30:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  403b32:	b938      	cbnz	r0, 403b44 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
  403b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403b38:	4b07      	ldr	r3, [pc, #28]	; (403b58 <vTaskDelay+0x54>)
  403b3a:	601a      	str	r2, [r3, #0]
  403b3c:	f3bf 8f4f 	dsb	sy
  403b40:	f3bf 8f6f 	isb	sy
  403b44:	bd10      	pop	{r4, pc}
  403b46:	bf00      	nop
  403b48:	2000c2f8 	.word	0x2000c2f8
  403b4c:	004037f5 	.word	0x004037f5
  403b50:	0040344d 	.word	0x0040344d
  403b54:	00403945 	.word	0x00403945
  403b58:	e000ed04 	.word	0xe000ed04

00403b5c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403b5c:	4b25      	ldr	r3, [pc, #148]	; (403bf4 <vTaskSwitchContext+0x98>)
  403b5e:	681b      	ldr	r3, [r3, #0]
  403b60:	bb33      	cbnz	r3, 403bb0 <vTaskSwitchContext+0x54>
{
  403b62:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  403b64:	2200      	movs	r2, #0
  403b66:	4b24      	ldr	r3, [pc, #144]	; (403bf8 <vTaskSwitchContext+0x9c>)
  403b68:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  403b6a:	4b24      	ldr	r3, [pc, #144]	; (403bfc <vTaskSwitchContext+0xa0>)
  403b6c:	681a      	ldr	r2, [r3, #0]
  403b6e:	681b      	ldr	r3, [r3, #0]
  403b70:	6812      	ldr	r2, [r2, #0]
  403b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403b74:	429a      	cmp	r2, r3
  403b76:	d805      	bhi.n	403b84 <vTaskSwitchContext+0x28>
  403b78:	4b20      	ldr	r3, [pc, #128]	; (403bfc <vTaskSwitchContext+0xa0>)
  403b7a:	6818      	ldr	r0, [r3, #0]
  403b7c:	6819      	ldr	r1, [r3, #0]
  403b7e:	3134      	adds	r1, #52	; 0x34
  403b80:	4b1f      	ldr	r3, [pc, #124]	; (403c00 <vTaskSwitchContext+0xa4>)
  403b82:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403b84:	4b1f      	ldr	r3, [pc, #124]	; (403c04 <vTaskSwitchContext+0xa8>)
  403b86:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  403b88:	fab3 f383 	clz	r3, r3
  403b8c:	b2db      	uxtb	r3, r3
  403b8e:	f1c3 031f 	rsb	r3, r3, #31
  403b92:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  403b96:	0092      	lsls	r2, r2, #2
  403b98:	491b      	ldr	r1, [pc, #108]	; (403c08 <vTaskSwitchContext+0xac>)
  403b9a:	588a      	ldr	r2, [r1, r2]
  403b9c:	b962      	cbnz	r2, 403bb8 <vTaskSwitchContext+0x5c>
	__asm volatile
  403b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
  403ba2:	f383 8811 	msr	BASEPRI, r3
  403ba6:	f3bf 8f6f 	isb	sy
  403baa:	f3bf 8f4f 	dsb	sy
  403bae:	e7fe      	b.n	403bae <vTaskSwitchContext+0x52>
		xYieldPending = pdTRUE;
  403bb0:	2201      	movs	r2, #1
  403bb2:	4b11      	ldr	r3, [pc, #68]	; (403bf8 <vTaskSwitchContext+0x9c>)
  403bb4:	601a      	str	r2, [r3, #0]
  403bb6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403bb8:	4a13      	ldr	r2, [pc, #76]	; (403c08 <vTaskSwitchContext+0xac>)
  403bba:	0099      	lsls	r1, r3, #2
  403bbc:	18c8      	adds	r0, r1, r3
  403bbe:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403bc2:	6844      	ldr	r4, [r0, #4]
  403bc4:	6864      	ldr	r4, [r4, #4]
  403bc6:	6044      	str	r4, [r0, #4]
  403bc8:	4419      	add	r1, r3
  403bca:	4602      	mov	r2, r0
  403bcc:	3208      	adds	r2, #8
  403bce:	4294      	cmp	r4, r2
  403bd0:	d009      	beq.n	403be6 <vTaskSwitchContext+0x8a>
  403bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403bd6:	4a0c      	ldr	r2, [pc, #48]	; (403c08 <vTaskSwitchContext+0xac>)
  403bd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403bdc:	685b      	ldr	r3, [r3, #4]
  403bde:	68da      	ldr	r2, [r3, #12]
  403be0:	4b06      	ldr	r3, [pc, #24]	; (403bfc <vTaskSwitchContext+0xa0>)
  403be2:	601a      	str	r2, [r3, #0]
  403be4:	bd10      	pop	{r4, pc}
  403be6:	6860      	ldr	r0, [r4, #4]
  403be8:	4a07      	ldr	r2, [pc, #28]	; (403c08 <vTaskSwitchContext+0xac>)
  403bea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403bee:	6050      	str	r0, [r2, #4]
  403bf0:	e7ef      	b.n	403bd2 <vTaskSwitchContext+0x76>
  403bf2:	bf00      	nop
  403bf4:	2000c2f8 	.word	0x2000c2f8
  403bf8:	2000c37c 	.word	0x2000c37c
  403bfc:	2000c27c 	.word	0x2000c27c
  403c00:	00404119 	.word	0x00404119
  403c04:	2000c300 	.word	0x2000c300
  403c08:	2000c288 	.word	0x2000c288

00403c0c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  403c0c:	b940      	cbnz	r0, 403c20 <vTaskPlaceOnEventList+0x14>
  403c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
  403c12:	f383 8811 	msr	BASEPRI, r3
  403c16:	f3bf 8f6f 	isb	sy
  403c1a:	f3bf 8f4f 	dsb	sy
  403c1e:	e7fe      	b.n	403c1e <vTaskPlaceOnEventList+0x12>
{
  403c20:	b510      	push	{r4, lr}
  403c22:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403c24:	4b04      	ldr	r3, [pc, #16]	; (403c38 <vTaskPlaceOnEventList+0x2c>)
  403c26:	6819      	ldr	r1, [r3, #0]
  403c28:	3118      	adds	r1, #24
  403c2a:	4b04      	ldr	r3, [pc, #16]	; (403c3c <vTaskPlaceOnEventList+0x30>)
  403c2c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  403c2e:	2101      	movs	r1, #1
  403c30:	4620      	mov	r0, r4
  403c32:	4b03      	ldr	r3, [pc, #12]	; (403c40 <vTaskPlaceOnEventList+0x34>)
  403c34:	4798      	blx	r3
  403c36:	bd10      	pop	{r4, pc}
  403c38:	2000c27c 	.word	0x2000c27c
  403c3c:	004029ab 	.word	0x004029ab
  403c40:	0040344d 	.word	0x0040344d

00403c44 <xTaskRemoveFromEventList>:
{
  403c44:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  403c46:	68c3      	ldr	r3, [r0, #12]
  403c48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  403c4a:	b32c      	cbz	r4, 403c98 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403c4c:	f104 0518 	add.w	r5, r4, #24
  403c50:	4628      	mov	r0, r5
  403c52:	4b18      	ldr	r3, [pc, #96]	; (403cb4 <xTaskRemoveFromEventList+0x70>)
  403c54:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403c56:	4b18      	ldr	r3, [pc, #96]	; (403cb8 <xTaskRemoveFromEventList+0x74>)
  403c58:	681b      	ldr	r3, [r3, #0]
  403c5a:	bb33      	cbnz	r3, 403caa <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  403c5c:	1d25      	adds	r5, r4, #4
  403c5e:	4628      	mov	r0, r5
  403c60:	4b14      	ldr	r3, [pc, #80]	; (403cb4 <xTaskRemoveFromEventList+0x70>)
  403c62:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403c64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403c66:	4a15      	ldr	r2, [pc, #84]	; (403cbc <xTaskRemoveFromEventList+0x78>)
  403c68:	6811      	ldr	r1, [r2, #0]
  403c6a:	2301      	movs	r3, #1
  403c6c:	4083      	lsls	r3, r0
  403c6e:	430b      	orrs	r3, r1
  403c70:	6013      	str	r3, [r2, #0]
  403c72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403c76:	4629      	mov	r1, r5
  403c78:	4b11      	ldr	r3, [pc, #68]	; (403cc0 <xTaskRemoveFromEventList+0x7c>)
  403c7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403c7e:	4b11      	ldr	r3, [pc, #68]	; (403cc4 <xTaskRemoveFromEventList+0x80>)
  403c80:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403c82:	4b11      	ldr	r3, [pc, #68]	; (403cc8 <xTaskRemoveFromEventList+0x84>)
  403c84:	681b      	ldr	r3, [r3, #0]
  403c86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403c8a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
  403c8c:	bf83      	ittte	hi
  403c8e:	2001      	movhi	r0, #1
  403c90:	4b0e      	ldrhi	r3, [pc, #56]	; (403ccc <xTaskRemoveFromEventList+0x88>)
  403c92:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
  403c94:	2000      	movls	r0, #0
}
  403c96:	bd38      	pop	{r3, r4, r5, pc}
  403c98:	f04f 0350 	mov.w	r3, #80	; 0x50
  403c9c:	f383 8811 	msr	BASEPRI, r3
  403ca0:	f3bf 8f6f 	isb	sy
  403ca4:	f3bf 8f4f 	dsb	sy
  403ca8:	e7fe      	b.n	403ca8 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403caa:	4629      	mov	r1, r5
  403cac:	4808      	ldr	r0, [pc, #32]	; (403cd0 <xTaskRemoveFromEventList+0x8c>)
  403cae:	4b05      	ldr	r3, [pc, #20]	; (403cc4 <xTaskRemoveFromEventList+0x80>)
  403cb0:	4798      	blx	r3
  403cb2:	e7e6      	b.n	403c82 <xTaskRemoveFromEventList+0x3e>
  403cb4:	004029df 	.word	0x004029df
  403cb8:	2000c2f8 	.word	0x2000c2f8
  403cbc:	2000c300 	.word	0x2000c300
  403cc0:	2000c288 	.word	0x2000c288
  403cc4:	00402993 	.word	0x00402993
  403cc8:	2000c27c 	.word	0x2000c27c
  403ccc:	2000c37c 	.word	0x2000c37c
  403cd0:	2000c338 	.word	0x2000c338

00403cd4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403cd4:	4b03      	ldr	r3, [pc, #12]	; (403ce4 <vTaskInternalSetTimeOutState+0x10>)
  403cd6:	681b      	ldr	r3, [r3, #0]
  403cd8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403cda:	4b03      	ldr	r3, [pc, #12]	; (403ce8 <vTaskInternalSetTimeOutState+0x14>)
  403cdc:	681b      	ldr	r3, [r3, #0]
  403cde:	6043      	str	r3, [r0, #4]
  403ce0:	4770      	bx	lr
  403ce2:	bf00      	nop
  403ce4:	2000c334 	.word	0x2000c334
  403ce8:	2000c378 	.word	0x2000c378

00403cec <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  403cec:	b1e8      	cbz	r0, 403d2a <xTaskCheckForTimeOut+0x3e>
{
  403cee:	b570      	push	{r4, r5, r6, lr}
  403cf0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  403cf2:	b319      	cbz	r1, 403d3c <xTaskCheckForTimeOut+0x50>
  403cf4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  403cf6:	4b1b      	ldr	r3, [pc, #108]	; (403d64 <xTaskCheckForTimeOut+0x78>)
  403cf8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  403cfa:	4b1b      	ldr	r3, [pc, #108]	; (403d68 <xTaskCheckForTimeOut+0x7c>)
  403cfc:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  403cfe:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  403d00:	6823      	ldr	r3, [r4, #0]
  403d02:	f1b3 3fff 	cmp.w	r3, #4294967295
  403d06:	d029      	beq.n	403d5c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  403d08:	4818      	ldr	r0, [pc, #96]	; (403d6c <xTaskCheckForTimeOut+0x80>)
  403d0a:	6800      	ldr	r0, [r0, #0]
  403d0c:	682e      	ldr	r6, [r5, #0]
  403d0e:	4286      	cmp	r6, r0
  403d10:	d001      	beq.n	403d16 <xTaskCheckForTimeOut+0x2a>
  403d12:	428a      	cmp	r2, r1
  403d14:	d224      	bcs.n	403d60 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  403d16:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  403d18:	429a      	cmp	r2, r3
  403d1a:	d318      	bcc.n	403d4e <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
  403d1c:	2300      	movs	r3, #0
  403d1e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  403d20:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  403d22:	4b13      	ldr	r3, [pc, #76]	; (403d70 <xTaskCheckForTimeOut+0x84>)
  403d24:	4798      	blx	r3
}
  403d26:	4620      	mov	r0, r4
  403d28:	bd70      	pop	{r4, r5, r6, pc}
  403d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
  403d2e:	f383 8811 	msr	BASEPRI, r3
  403d32:	f3bf 8f6f 	isb	sy
  403d36:	f3bf 8f4f 	dsb	sy
  403d3a:	e7fe      	b.n	403d3a <xTaskCheckForTimeOut+0x4e>
  403d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
  403d40:	f383 8811 	msr	BASEPRI, r3
  403d44:	f3bf 8f6f 	isb	sy
  403d48:	f3bf 8f4f 	dsb	sy
  403d4c:	e7fe      	b.n	403d4c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
  403d4e:	1a9b      	subs	r3, r3, r2
  403d50:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  403d52:	4628      	mov	r0, r5
  403d54:	4b07      	ldr	r3, [pc, #28]	; (403d74 <xTaskCheckForTimeOut+0x88>)
  403d56:	4798      	blx	r3
			xReturn = pdFALSE;
  403d58:	2400      	movs	r4, #0
  403d5a:	e7e2      	b.n	403d22 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
  403d5c:	2400      	movs	r4, #0
  403d5e:	e7e0      	b.n	403d22 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
  403d60:	2401      	movs	r4, #1
  403d62:	e7de      	b.n	403d22 <xTaskCheckForTimeOut+0x36>
  403d64:	00402ad5 	.word	0x00402ad5
  403d68:	2000c378 	.word	0x2000c378
  403d6c:	2000c334 	.word	0x2000c334
  403d70:	00402b19 	.word	0x00402b19
  403d74:	00403cd5 	.word	0x00403cd5

00403d78 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  403d78:	2201      	movs	r2, #1
  403d7a:	4b01      	ldr	r3, [pc, #4]	; (403d80 <vTaskMissedYield+0x8>)
  403d7c:	601a      	str	r2, [r3, #0]
  403d7e:	4770      	bx	lr
  403d80:	2000c37c 	.word	0x2000c37c

00403d84 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
  403d84:	4603      	mov	r3, r0
  403d86:	b160      	cbz	r0, 403da2 <uxTaskGetStackHighWaterMark+0x1e>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
  403d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  403d8a:	780b      	ldrb	r3, [r1, #0]
  403d8c:	2ba5      	cmp	r3, #165	; 0xa5
  403d8e:	d10b      	bne.n	403da8 <uxTaskGetStackHighWaterMark+0x24>
  403d90:	1c4b      	adds	r3, r1, #1
  403d92:	1a58      	subs	r0, r3, r1
  403d94:	f813 2b01 	ldrb.w	r2, [r3], #1
  403d98:	2aa5      	cmp	r2, #165	; 0xa5
  403d9a:	d0fa      	beq.n	403d92 <uxTaskGetStackHighWaterMark+0xe>
	}
  403d9c:	f3c0 008f 	ubfx	r0, r0, #2, #16
  403da0:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
  403da2:	4b02      	ldr	r3, [pc, #8]	; (403dac <uxTaskGetStackHighWaterMark+0x28>)
  403da4:	681b      	ldr	r3, [r3, #0]
  403da6:	e7ef      	b.n	403d88 <uxTaskGetStackHighWaterMark+0x4>
	uint32_t ulCount = 0U;
  403da8:	2000      	movs	r0, #0
  403daa:	e7f7      	b.n	403d9c <uxTaskGetStackHighWaterMark+0x18>
  403dac:	2000c27c 	.word	0x2000c27c

00403db0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  403db0:	2800      	cmp	r0, #0
  403db2:	d050      	beq.n	403e56 <xTaskPriorityInherit+0xa6>
	{
  403db4:	b538      	push	{r3, r4, r5, lr}
  403db6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  403db8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403dba:	4928      	ldr	r1, [pc, #160]	; (403e5c <xTaskPriorityInherit+0xac>)
  403dbc:	6809      	ldr	r1, [r1, #0]
  403dbe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403dc0:	428a      	cmp	r2, r1
  403dc2:	d23f      	bcs.n	403e44 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403dc4:	6981      	ldr	r1, [r0, #24]
  403dc6:	2900      	cmp	r1, #0
  403dc8:	db05      	blt.n	403dd6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403dca:	4924      	ldr	r1, [pc, #144]	; (403e5c <xTaskPriorityInherit+0xac>)
  403dcc:	6809      	ldr	r1, [r1, #0]
  403dce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403dd0:	f1c1 0105 	rsb	r1, r1, #5
  403dd4:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  403dd6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403dda:	4921      	ldr	r1, [pc, #132]	; (403e60 <xTaskPriorityInherit+0xb0>)
  403ddc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403de0:	6961      	ldr	r1, [r4, #20]
  403de2:	4291      	cmp	r1, r2
  403de4:	d005      	beq.n	403df2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  403de6:	4a1d      	ldr	r2, [pc, #116]	; (403e5c <xTaskPriorityInherit+0xac>)
  403de8:	6812      	ldr	r2, [r2, #0]
  403dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403dec:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  403dee:	2001      	movs	r0, #1
  403df0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  403df2:	1d25      	adds	r5, r4, #4
  403df4:	4628      	mov	r0, r5
  403df6:	4b1b      	ldr	r3, [pc, #108]	; (403e64 <xTaskPriorityInherit+0xb4>)
  403df8:	4798      	blx	r3
  403dfa:	b970      	cbnz	r0, 403e1a <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  403dfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403dfe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  403e02:	009b      	lsls	r3, r3, #2
  403e04:	4916      	ldr	r1, [pc, #88]	; (403e60 <xTaskPriorityInherit+0xb0>)
  403e06:	58cb      	ldr	r3, [r1, r3]
  403e08:	b93b      	cbnz	r3, 403e1a <xTaskPriorityInherit+0x6a>
  403e0a:	4817      	ldr	r0, [pc, #92]	; (403e68 <xTaskPriorityInherit+0xb8>)
  403e0c:	6803      	ldr	r3, [r0, #0]
  403e0e:	2101      	movs	r1, #1
  403e10:	fa01 f202 	lsl.w	r2, r1, r2
  403e14:	ea23 0202 	bic.w	r2, r3, r2
  403e18:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  403e1a:	4b10      	ldr	r3, [pc, #64]	; (403e5c <xTaskPriorityInherit+0xac>)
  403e1c:	681b      	ldr	r3, [r3, #0]
  403e1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  403e20:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  403e22:	4a11      	ldr	r2, [pc, #68]	; (403e68 <xTaskPriorityInherit+0xb8>)
  403e24:	6811      	ldr	r1, [r2, #0]
  403e26:	2401      	movs	r4, #1
  403e28:	fa04 f300 	lsl.w	r3, r4, r0
  403e2c:	430b      	orrs	r3, r1
  403e2e:	6013      	str	r3, [r2, #0]
  403e30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403e34:	4629      	mov	r1, r5
  403e36:	4b0a      	ldr	r3, [pc, #40]	; (403e60 <xTaskPriorityInherit+0xb0>)
  403e38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403e3c:	4b0b      	ldr	r3, [pc, #44]	; (403e6c <xTaskPriorityInherit+0xbc>)
  403e3e:	4798      	blx	r3
				xReturn = pdTRUE;
  403e40:	4620      	mov	r0, r4
  403e42:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  403e44:	4a05      	ldr	r2, [pc, #20]	; (403e5c <xTaskPriorityInherit+0xac>)
  403e46:	6812      	ldr	r2, [r2, #0]
  403e48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  403e4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  403e4c:	4298      	cmp	r0, r3
  403e4e:	bf2c      	ite	cs
  403e50:	2000      	movcs	r0, #0
  403e52:	2001      	movcc	r0, #1
  403e54:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403e56:	2000      	movs	r0, #0
		return xReturn;
  403e58:	4770      	bx	lr
  403e5a:	bf00      	nop
  403e5c:	2000c27c 	.word	0x2000c27c
  403e60:	2000c288 	.word	0x2000c288
  403e64:	004029df 	.word	0x004029df
  403e68:	2000c300 	.word	0x2000c300
  403e6c:	00402993 	.word	0x00402993

00403e70 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  403e70:	2800      	cmp	r0, #0
  403e72:	d04a      	beq.n	403f0a <xTaskPriorityDisinherit+0x9a>
	{
  403e74:	b538      	push	{r3, r4, r5, lr}
  403e76:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  403e78:	4a27      	ldr	r2, [pc, #156]	; (403f18 <xTaskPriorityDisinherit+0xa8>)
  403e7a:	6812      	ldr	r2, [r2, #0]
  403e7c:	4290      	cmp	r0, r2
  403e7e:	d008      	beq.n	403e92 <xTaskPriorityDisinherit+0x22>
  403e80:	f04f 0350 	mov.w	r3, #80	; 0x50
  403e84:	f383 8811 	msr	BASEPRI, r3
  403e88:	f3bf 8f6f 	isb	sy
  403e8c:	f3bf 8f4f 	dsb	sy
  403e90:	e7fe      	b.n	403e90 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
  403e92:	6d02      	ldr	r2, [r0, #80]	; 0x50
  403e94:	b942      	cbnz	r2, 403ea8 <xTaskPriorityDisinherit+0x38>
  403e96:	f04f 0350 	mov.w	r3, #80	; 0x50
  403e9a:	f383 8811 	msr	BASEPRI, r3
  403e9e:	f3bf 8f6f 	isb	sy
  403ea2:	f3bf 8f4f 	dsb	sy
  403ea6:	e7fe      	b.n	403ea6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
  403ea8:	3a01      	subs	r2, #1
  403eaa:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403eac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403eae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  403eb0:	4288      	cmp	r0, r1
  403eb2:	d02c      	beq.n	403f0e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403eb4:	2a00      	cmp	r2, #0
  403eb6:	d12c      	bne.n	403f12 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  403eb8:	1d25      	adds	r5, r4, #4
  403eba:	4628      	mov	r0, r5
  403ebc:	4b17      	ldr	r3, [pc, #92]	; (403f1c <xTaskPriorityDisinherit+0xac>)
  403ebe:	4798      	blx	r3
  403ec0:	b968      	cbnz	r0, 403ede <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403ec2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403ec4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  403ec8:	009b      	lsls	r3, r3, #2
  403eca:	4a15      	ldr	r2, [pc, #84]	; (403f20 <xTaskPriorityDisinherit+0xb0>)
  403ecc:	58d3      	ldr	r3, [r2, r3]
  403ece:	b933      	cbnz	r3, 403ede <xTaskPriorityDisinherit+0x6e>
  403ed0:	4814      	ldr	r0, [pc, #80]	; (403f24 <xTaskPriorityDisinherit+0xb4>)
  403ed2:	6803      	ldr	r3, [r0, #0]
  403ed4:	2201      	movs	r2, #1
  403ed6:	408a      	lsls	r2, r1
  403ed8:	ea23 0302 	bic.w	r3, r3, r2
  403edc:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403ede:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  403ee0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403ee2:	f1c0 0305 	rsb	r3, r0, #5
  403ee6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403ee8:	4a0e      	ldr	r2, [pc, #56]	; (403f24 <xTaskPriorityDisinherit+0xb4>)
  403eea:	6811      	ldr	r1, [r2, #0]
  403eec:	2401      	movs	r4, #1
  403eee:	fa04 f300 	lsl.w	r3, r4, r0
  403ef2:	430b      	orrs	r3, r1
  403ef4:	6013      	str	r3, [r2, #0]
  403ef6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403efa:	4629      	mov	r1, r5
  403efc:	4b08      	ldr	r3, [pc, #32]	; (403f20 <xTaskPriorityDisinherit+0xb0>)
  403efe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403f02:	4b09      	ldr	r3, [pc, #36]	; (403f28 <xTaskPriorityDisinherit+0xb8>)
  403f04:	4798      	blx	r3
					xReturn = pdTRUE;
  403f06:	4620      	mov	r0, r4
  403f08:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403f0a:	2000      	movs	r0, #0
  403f0c:	4770      	bx	lr
  403f0e:	2000      	movs	r0, #0
  403f10:	bd38      	pop	{r3, r4, r5, pc}
  403f12:	2000      	movs	r0, #0
	}
  403f14:	bd38      	pop	{r3, r4, r5, pc}
  403f16:	bf00      	nop
  403f18:	2000c27c 	.word	0x2000c27c
  403f1c:	004029df 	.word	0x004029df
  403f20:	2000c288 	.word	0x2000c288
  403f24:	2000c300 	.word	0x2000c300
  403f28:	00402993 	.word	0x00402993

00403f2c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  403f2c:	2800      	cmp	r0, #0
  403f2e:	d055      	beq.n	403fdc <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
  403f30:	b538      	push	{r3, r4, r5, lr}
  403f32:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  403f34:	6d00      	ldr	r0, [r0, #80]	; 0x50
  403f36:	b940      	cbnz	r0, 403f4a <vTaskPriorityDisinheritAfterTimeout+0x1e>
  403f38:	f04f 0350 	mov.w	r3, #80	; 0x50
  403f3c:	f383 8811 	msr	BASEPRI, r3
  403f40:	f3bf 8f6f 	isb	sy
  403f44:	f3bf 8f4f 	dsb	sy
  403f48:	e7fe      	b.n	403f48 <vTaskPriorityDisinheritAfterTimeout+0x1c>
  403f4a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  403f4c:	428a      	cmp	r2, r1
  403f4e:	bf38      	it	cc
  403f50:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  403f52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403f54:	4291      	cmp	r1, r2
  403f56:	d001      	beq.n	403f5c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  403f58:	2801      	cmp	r0, #1
  403f5a:	d000      	beq.n	403f5e <vTaskPriorityDisinheritAfterTimeout+0x32>
  403f5c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
  403f5e:	4820      	ldr	r0, [pc, #128]	; (403fe0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
  403f60:	6800      	ldr	r0, [r0, #0]
  403f62:	4284      	cmp	r4, r0
  403f64:	d108      	bne.n	403f78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
  403f66:	f04f 0350 	mov.w	r3, #80	; 0x50
  403f6a:	f383 8811 	msr	BASEPRI, r3
  403f6e:	f3bf 8f6f 	isb	sy
  403f72:	f3bf 8f4f 	dsb	sy
  403f76:	e7fe      	b.n	403f76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
  403f78:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403f7a:	69a0      	ldr	r0, [r4, #24]
  403f7c:	2800      	cmp	r0, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403f7e:	bfa4      	itt	ge
  403f80:	f1c2 0205 	rsbge	r2, r2, #5
  403f84:	61a2      	strge	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  403f86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403f8a:	4a16      	ldr	r2, [pc, #88]	; (403fe4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  403f8c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  403f90:	6962      	ldr	r2, [r4, #20]
  403f92:	428a      	cmp	r2, r1
  403f94:	d1e2      	bne.n	403f5c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  403f96:	1d25      	adds	r5, r4, #4
  403f98:	4628      	mov	r0, r5
  403f9a:	4b13      	ldr	r3, [pc, #76]	; (403fe8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  403f9c:	4798      	blx	r3
  403f9e:	b968      	cbnz	r0, 403fbc <vTaskPriorityDisinheritAfterTimeout+0x90>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403fa0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403fa2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  403fa6:	009b      	lsls	r3, r3, #2
  403fa8:	4a0e      	ldr	r2, [pc, #56]	; (403fe4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  403faa:	58d3      	ldr	r3, [r2, r3]
  403fac:	b933      	cbnz	r3, 403fbc <vTaskPriorityDisinheritAfterTimeout+0x90>
  403fae:	480f      	ldr	r0, [pc, #60]	; (403fec <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  403fb0:	6803      	ldr	r3, [r0, #0]
  403fb2:	2201      	movs	r2, #1
  403fb4:	408a      	lsls	r2, r1
  403fb6:	ea23 0302 	bic.w	r3, r3, r2
  403fba:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  403fbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403fbe:	4a0b      	ldr	r2, [pc, #44]	; (403fec <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  403fc0:	6811      	ldr	r1, [r2, #0]
  403fc2:	2301      	movs	r3, #1
  403fc4:	4083      	lsls	r3, r0
  403fc6:	430b      	orrs	r3, r1
  403fc8:	6013      	str	r3, [r2, #0]
  403fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403fce:	4629      	mov	r1, r5
  403fd0:	4b04      	ldr	r3, [pc, #16]	; (403fe4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  403fd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403fd6:	4b06      	ldr	r3, [pc, #24]	; (403ff0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  403fd8:	4798      	blx	r3
	}
  403fda:	e7bf      	b.n	403f5c <vTaskPriorityDisinheritAfterTimeout+0x30>
  403fdc:	4770      	bx	lr
  403fde:	bf00      	nop
  403fe0:	2000c27c 	.word	0x2000c27c
  403fe4:	2000c288 	.word	0x2000c288
  403fe8:	004029df 	.word	0x004029df
  403fec:	2000c300 	.word	0x2000c300
  403ff0:	00402993 	.word	0x00402993

00403ff4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  403ff4:	4b05      	ldr	r3, [pc, #20]	; (40400c <pvTaskIncrementMutexHeldCount+0x18>)
  403ff6:	681b      	ldr	r3, [r3, #0]
  403ff8:	b123      	cbz	r3, 404004 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  403ffa:	4b04      	ldr	r3, [pc, #16]	; (40400c <pvTaskIncrementMutexHeldCount+0x18>)
  403ffc:	681a      	ldr	r2, [r3, #0]
  403ffe:	6d13      	ldr	r3, [r2, #80]	; 0x50
  404000:	3301      	adds	r3, #1
  404002:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
  404004:	4b01      	ldr	r3, [pc, #4]	; (40400c <pvTaskIncrementMutexHeldCount+0x18>)
  404006:	6818      	ldr	r0, [r3, #0]
	}
  404008:	4770      	bx	lr
  40400a:	bf00      	nop
  40400c:	2000c27c 	.word	0x2000c27c

00404010 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404010:	b5f0      	push	{r4, r5, r6, r7, lr}
  404012:	b083      	sub	sp, #12
  404014:	4605      	mov	r5, r0
  404016:	460c      	mov	r4, r1
	uint32_t val = 0;
  404018:	2300      	movs	r3, #0
  40401a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40401c:	4b18      	ldr	r3, [pc, #96]	; (404080 <usart_serial_getchar+0x70>)
  40401e:	4298      	cmp	r0, r3
  404020:	d00a      	beq.n	404038 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404022:	4b18      	ldr	r3, [pc, #96]	; (404084 <usart_serial_getchar+0x74>)
  404024:	4298      	cmp	r0, r3
  404026:	d00f      	beq.n	404048 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404028:	4b17      	ldr	r3, [pc, #92]	; (404088 <usart_serial_getchar+0x78>)
  40402a:	4298      	cmp	r0, r3
  40402c:	d014      	beq.n	404058 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40402e:	4b17      	ldr	r3, [pc, #92]	; (40408c <usart_serial_getchar+0x7c>)
  404030:	429d      	cmp	r5, r3
  404032:	d01b      	beq.n	40406c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  404034:	b003      	add	sp, #12
  404036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  404038:	461f      	mov	r7, r3
  40403a:	4e15      	ldr	r6, [pc, #84]	; (404090 <usart_serial_getchar+0x80>)
  40403c:	4621      	mov	r1, r4
  40403e:	4638      	mov	r0, r7
  404040:	47b0      	blx	r6
  404042:	2800      	cmp	r0, #0
  404044:	d1fa      	bne.n	40403c <usart_serial_getchar+0x2c>
  404046:	e7f2      	b.n	40402e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  404048:	461e      	mov	r6, r3
  40404a:	4d11      	ldr	r5, [pc, #68]	; (404090 <usart_serial_getchar+0x80>)
  40404c:	4621      	mov	r1, r4
  40404e:	4630      	mov	r0, r6
  404050:	47a8      	blx	r5
  404052:	2800      	cmp	r0, #0
  404054:	d1fa      	bne.n	40404c <usart_serial_getchar+0x3c>
  404056:	e7ed      	b.n	404034 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  404058:	461e      	mov	r6, r3
  40405a:	4d0e      	ldr	r5, [pc, #56]	; (404094 <usart_serial_getchar+0x84>)
  40405c:	a901      	add	r1, sp, #4
  40405e:	4630      	mov	r0, r6
  404060:	47a8      	blx	r5
  404062:	2800      	cmp	r0, #0
  404064:	d1fa      	bne.n	40405c <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  404066:	9b01      	ldr	r3, [sp, #4]
  404068:	7023      	strb	r3, [r4, #0]
  40406a:	e7e3      	b.n	404034 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40406c:	461e      	mov	r6, r3
  40406e:	4d09      	ldr	r5, [pc, #36]	; (404094 <usart_serial_getchar+0x84>)
  404070:	a901      	add	r1, sp, #4
  404072:	4630      	mov	r0, r6
  404074:	47a8      	blx	r5
  404076:	2800      	cmp	r0, #0
  404078:	d1fa      	bne.n	404070 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40407a:	9b01      	ldr	r3, [sp, #4]
  40407c:	7023      	strb	r3, [r4, #0]
}
  40407e:	e7d9      	b.n	404034 <usart_serial_getchar+0x24>
  404080:	400e0600 	.word	0x400e0600
  404084:	40060600 	.word	0x40060600
  404088:	400a0000 	.word	0x400a0000
  40408c:	400a4000 	.word	0x400a4000
  404090:	00402939 	.word	0x00402939
  404094:	0040295f 	.word	0x0040295f

00404098 <usart_serial_putchar>:
{
  404098:	b570      	push	{r4, r5, r6, lr}
  40409a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40409c:	4b18      	ldr	r3, [pc, #96]	; (404100 <usart_serial_putchar+0x68>)
  40409e:	4298      	cmp	r0, r3
  4040a0:	d00a      	beq.n	4040b8 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4040a2:	4b18      	ldr	r3, [pc, #96]	; (404104 <usart_serial_putchar+0x6c>)
  4040a4:	4298      	cmp	r0, r3
  4040a6:	d010      	beq.n	4040ca <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4040a8:	4b17      	ldr	r3, [pc, #92]	; (404108 <usart_serial_putchar+0x70>)
  4040aa:	4298      	cmp	r0, r3
  4040ac:	d016      	beq.n	4040dc <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  4040ae:	4b17      	ldr	r3, [pc, #92]	; (40410c <usart_serial_putchar+0x74>)
  4040b0:	4298      	cmp	r0, r3
  4040b2:	d01c      	beq.n	4040ee <usart_serial_putchar+0x56>
	return 0;
  4040b4:	2000      	movs	r0, #0
}
  4040b6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040b8:	461e      	mov	r6, r3
  4040ba:	4d15      	ldr	r5, [pc, #84]	; (404110 <usart_serial_putchar+0x78>)
  4040bc:	4621      	mov	r1, r4
  4040be:	4630      	mov	r0, r6
  4040c0:	47a8      	blx	r5
  4040c2:	2800      	cmp	r0, #0
  4040c4:	d1fa      	bne.n	4040bc <usart_serial_putchar+0x24>
		return 1;
  4040c6:	2001      	movs	r0, #1
  4040c8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040ca:	461e      	mov	r6, r3
  4040cc:	4d10      	ldr	r5, [pc, #64]	; (404110 <usart_serial_putchar+0x78>)
  4040ce:	4621      	mov	r1, r4
  4040d0:	4630      	mov	r0, r6
  4040d2:	47a8      	blx	r5
  4040d4:	2800      	cmp	r0, #0
  4040d6:	d1fa      	bne.n	4040ce <usart_serial_putchar+0x36>
		return 1;
  4040d8:	2001      	movs	r0, #1
  4040da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4040dc:	461e      	mov	r6, r3
  4040de:	4d0d      	ldr	r5, [pc, #52]	; (404114 <usart_serial_putchar+0x7c>)
  4040e0:	4621      	mov	r1, r4
  4040e2:	4630      	mov	r0, r6
  4040e4:	47a8      	blx	r5
  4040e6:	2800      	cmp	r0, #0
  4040e8:	d1fa      	bne.n	4040e0 <usart_serial_putchar+0x48>
		return 1;
  4040ea:	2001      	movs	r0, #1
  4040ec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4040ee:	461e      	mov	r6, r3
  4040f0:	4d08      	ldr	r5, [pc, #32]	; (404114 <usart_serial_putchar+0x7c>)
  4040f2:	4621      	mov	r1, r4
  4040f4:	4630      	mov	r0, r6
  4040f6:	47a8      	blx	r5
  4040f8:	2800      	cmp	r0, #0
  4040fa:	d1fa      	bne.n	4040f2 <usart_serial_putchar+0x5a>
		return 1;
  4040fc:	2001      	movs	r0, #1
  4040fe:	bd70      	pop	{r4, r5, r6, pc}
  404100:	400e0600 	.word	0x400e0600
  404104:	40060600 	.word	0x40060600
  404108:	400a0000 	.word	0x400a0000
  40410c:	400a4000 	.word	0x400a4000
  404110:	00402929 	.word	0x00402929
  404114:	0040294b 	.word	0x0040294b

00404118 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  404118:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", (unsigned int)pxTask, (portCHAR *)pcTaskName);
  40411a:	460a      	mov	r2, r1
  40411c:	4601      	mov	r1, r0
  40411e:	4802      	ldr	r0, [pc, #8]	; (404128 <vApplicationStackOverflowHook+0x10>)
  404120:	4b02      	ldr	r3, [pc, #8]	; (40412c <vApplicationStackOverflowHook+0x14>)
  404122:	4798      	blx	r3
  404124:	e7fe      	b.n	404124 <vApplicationStackOverflowHook+0xc>
  404126:	bf00      	nop
  404128:	0040880c 	.word	0x0040880c
  40412c:	004054ed 	.word	0x004054ed

00404130 <vApplicationIdleHook>:

/**
 * \brief This function is called by FreeRTOS idle task
 */
extern void vApplicationIdleHook(void)
{
  404130:	4770      	bx	lr

00404132 <vApplicationMallocFailedHook>:
  404132:	f04f 0350 	mov.w	r3, #80	; 0x50
  404136:	f383 8811 	msr	BASEPRI, r3
  40413a:	f3bf 8f6f 	isb	sy
  40413e:	f3bf 8f4f 	dsb	sy
  404142:	e7fe      	b.n	404142 <vApplicationMallocFailedHook+0x10>

00404144 <main>:
 *  And then will spawn off threads for PDU
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  404144:	b570      	push	{r4, r5, r6, lr}
  404146:	b084      	sub	sp, #16
	/* Initialize the SAM system */
	sysclk_init();
  404148:	4b1f      	ldr	r3, [pc, #124]	; (4041c8 <main+0x84>)
  40414a:	4798      	blx	r3
	ul_sysclk = sysclk_get_cpu_hz();
  40414c:	4d1f      	ldr	r5, [pc, #124]	; (4041cc <main+0x88>)
  40414e:	4b20      	ldr	r3, [pc, #128]	; (4041d0 <main+0x8c>)
  404150:	601d      	str	r5, [r3, #0]
	board_init();
  404152:	4b20      	ldr	r3, [pc, #128]	; (4041d4 <main+0x90>)
  404154:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404156:	4c20      	ldr	r4, [pc, #128]	; (4041d8 <main+0x94>)
  404158:	4b20      	ldr	r3, [pc, #128]	; (4041dc <main+0x98>)
  40415a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40415c:	4a20      	ldr	r2, [pc, #128]	; (4041e0 <main+0x9c>)
  40415e:	4b21      	ldr	r3, [pc, #132]	; (4041e4 <main+0xa0>)
  404160:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404162:	4a21      	ldr	r2, [pc, #132]	; (4041e8 <main+0xa4>)
  404164:	4b21      	ldr	r3, [pc, #132]	; (4041ec <main+0xa8>)
  404166:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  404168:	9501      	str	r5, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  40416a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40416e:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  404170:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404174:	9303      	str	r3, [sp, #12]
  404176:	2007      	movs	r0, #7
  404178:	4b1d      	ldr	r3, [pc, #116]	; (4041f0 <main+0xac>)
  40417a:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  40417c:	a901      	add	r1, sp, #4
  40417e:	4620      	mov	r0, r4
  404180:	4b1c      	ldr	r3, [pc, #112]	; (4041f4 <main+0xb0>)
  404182:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404184:	4d1c      	ldr	r5, [pc, #112]	; (4041f8 <main+0xb4>)
  404186:	682b      	ldr	r3, [r5, #0]
  404188:	2100      	movs	r1, #0
  40418a:	6898      	ldr	r0, [r3, #8]
  40418c:	4c1b      	ldr	r4, [pc, #108]	; (4041fc <main+0xb8>)
  40418e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  404190:	682b      	ldr	r3, [r5, #0]
  404192:	2100      	movs	r1, #0
  404194:	6858      	ldr	r0, [r3, #4]
  404196:	47a0      	blx	r4
	setbuf(stdout, NULL);
  404198:	682b      	ldr	r3, [r5, #0]
  40419a:	2100      	movs	r1, #0
  40419c:	6898      	ldr	r0, [r3, #8]
  40419e:	47a0      	blx	r4
	
	configure_console();
	printf("Debug mode");puts("\r");
  4041a0:	4817      	ldr	r0, [pc, #92]	; (404200 <main+0xbc>)
  4041a2:	4e18      	ldr	r6, [pc, #96]	; (404204 <main+0xc0>)
  4041a4:	47b0      	blx	r6
  4041a6:	4d18      	ldr	r5, [pc, #96]	; (404208 <main+0xc4>)
  4041a8:	4628      	mov	r0, r5
  4041aa:	4c18      	ldr	r4, [pc, #96]	; (40420c <main+0xc8>)
  4041ac:	47a0      	blx	r4
	init_PDU();
  4041ae:	4b18      	ldr	r3, [pc, #96]	; (404210 <main+0xcc>)
  4041b0:	4798      	blx	r3
	printf("Initialized");puts("\r");
  4041b2:	4818      	ldr	r0, [pc, #96]	; (404214 <main+0xd0>)
  4041b4:	47b0      	blx	r6
  4041b6:	4628      	mov	r0, r5
  4041b8:	47a0      	blx	r4
	
	PDU_system_startup();
  4041ba:	4b17      	ldr	r3, [pc, #92]	; (404218 <main+0xd4>)
  4041bc:	4798      	blx	r3

	/*
	* Call to start system
	*/			
	vTaskStartScheduler();
  4041be:	4b17      	ldr	r3, [pc, #92]	; (40421c <main+0xd8>)
  4041c0:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  4041c2:	2000      	movs	r0, #0
  4041c4:	b004      	add	sp, #16
  4041c6:	bd70      	pop	{r4, r5, r6, pc}
  4041c8:	004001fd 	.word	0x004001fd
  4041cc:	068e7780 	.word	0x068e7780
  4041d0:	2000c398 	.word	0x2000c398
  4041d4:	00400265 	.word	0x00400265
  4041d8:	400e0600 	.word	0x400e0600
  4041dc:	2000c5e4 	.word	0x2000c5e4
  4041e0:	00404099 	.word	0x00404099
  4041e4:	2000c5e0 	.word	0x2000c5e0
  4041e8:	00404011 	.word	0x00404011
  4041ec:	2000c5dc 	.word	0x2000c5dc
  4041f0:	004006c1 	.word	0x004006c1
  4041f4:	004028f1 	.word	0x004028f1
  4041f8:	20000020 	.word	0x20000020
  4041fc:	00405791 	.word	0x00405791
  404200:	004087f0 	.word	0x004087f0
  404204:	004054ed 	.word	0x004054ed
  404208:	004087fc 	.word	0x004087fc
  40420c:	00405781 	.word	0x00405781
  404210:	00400d35 	.word	0x00400d35
  404214:	00408800 	.word	0x00408800
  404218:	00400df1 	.word	0x00400df1
  40421c:	00403771 	.word	0x00403771

00404220 <log10f>:
  404220:	b5f0      	push	{r4, r5, r6, r7, lr}
  404222:	b08b      	sub	sp, #44	; 0x2c
  404224:	4604      	mov	r4, r0
  404226:	f000 f871 	bl	40430c <__ieee754_log10f>
  40422a:	4b33      	ldr	r3, [pc, #204]	; (4042f8 <log10f+0xd8>)
  40422c:	f993 5000 	ldrsb.w	r5, [r3]
  404230:	1c6b      	adds	r3, r5, #1
  404232:	4606      	mov	r6, r0
  404234:	d00a      	beq.n	40424c <log10f+0x2c>
  404236:	4621      	mov	r1, r4
  404238:	4620      	mov	r0, r4
  40423a:	f001 f913 	bl	405464 <__aeabi_fcmpun>
  40423e:	4607      	mov	r7, r0
  404240:	b920      	cbnz	r0, 40424c <log10f+0x2c>
  404242:	2100      	movs	r1, #0
  404244:	4620      	mov	r0, r4
  404246:	f001 f8ef 	bl	405428 <__aeabi_fcmple>
  40424a:	b910      	cbnz	r0, 404252 <log10f+0x32>
  40424c:	4630      	mov	r0, r6
  40424e:	b00b      	add	sp, #44	; 0x2c
  404250:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404252:	4b2a      	ldr	r3, [pc, #168]	; (4042fc <log10f+0xdc>)
  404254:	9708      	str	r7, [sp, #32]
  404256:	4620      	mov	r0, r4
  404258:	9301      	str	r3, [sp, #4]
  40425a:	f000 fb59 	bl	404910 <__aeabi_f2d>
  40425e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404262:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404266:	4620      	mov	r0, r4
  404268:	b9cd      	cbnz	r5, 40429e <log10f+0x7e>
  40426a:	4b25      	ldr	r3, [pc, #148]	; (404300 <log10f+0xe0>)
  40426c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  404270:	2100      	movs	r1, #0
  404272:	e9cd 2306 	strd	r2, r3, [sp, #24]
  404276:	f001 f8c3 	bl	405400 <__aeabi_fcmpeq>
  40427a:	2800      	cmp	r0, #0
  40427c:	d033      	beq.n	4042e6 <log10f+0xc6>
  40427e:	2302      	movs	r3, #2
  404280:	9300      	str	r3, [sp, #0]
  404282:	4668      	mov	r0, sp
  404284:	f000 f894 	bl	4043b0 <matherr>
  404288:	b1a8      	cbz	r0, 4042b6 <log10f+0x96>
  40428a:	9b08      	ldr	r3, [sp, #32]
  40428c:	b9c3      	cbnz	r3, 4042c0 <log10f+0xa0>
  40428e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404292:	f000 fdc3 	bl	404e1c <__aeabi_d2f>
  404296:	4606      	mov	r6, r0
  404298:	4630      	mov	r0, r6
  40429a:	b00b      	add	sp, #44	; 0x2c
  40429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40429e:	4b19      	ldr	r3, [pc, #100]	; (404304 <log10f+0xe4>)
  4042a0:	2200      	movs	r2, #0
  4042a2:	2100      	movs	r1, #0
  4042a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  4042a8:	f001 f8aa 	bl	405400 <__aeabi_fcmpeq>
  4042ac:	b168      	cbz	r0, 4042ca <log10f+0xaa>
  4042ae:	2302      	movs	r3, #2
  4042b0:	429d      	cmp	r5, r3
  4042b2:	9300      	str	r3, [sp, #0]
  4042b4:	d1e5      	bne.n	404282 <log10f+0x62>
  4042b6:	f001 f8eb 	bl	405490 <__errno>
  4042ba:	2322      	movs	r3, #34	; 0x22
  4042bc:	6003      	str	r3, [r0, #0]
  4042be:	e7e4      	b.n	40428a <log10f+0x6a>
  4042c0:	f001 f8e6 	bl	405490 <__errno>
  4042c4:	9b08      	ldr	r3, [sp, #32]
  4042c6:	6003      	str	r3, [r0, #0]
  4042c8:	e7e1      	b.n	40428e <log10f+0x6e>
  4042ca:	2301      	movs	r3, #1
  4042cc:	2d02      	cmp	r5, #2
  4042ce:	9300      	str	r3, [sp, #0]
  4042d0:	d10b      	bne.n	4042ea <log10f+0xca>
  4042d2:	f001 f8dd 	bl	405490 <__errno>
  4042d6:	2321      	movs	r3, #33	; 0x21
  4042d8:	6003      	str	r3, [r0, #0]
  4042da:	480b      	ldr	r0, [pc, #44]	; (404308 <log10f+0xe8>)
  4042dc:	f000 f86a 	bl	4043b4 <nan>
  4042e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4042e4:	e7d1      	b.n	40428a <log10f+0x6a>
  4042e6:	2301      	movs	r3, #1
  4042e8:	9300      	str	r3, [sp, #0]
  4042ea:	4668      	mov	r0, sp
  4042ec:	f000 f860 	bl	4043b0 <matherr>
  4042f0:	2800      	cmp	r0, #0
  4042f2:	d1f2      	bne.n	4042da <log10f+0xba>
  4042f4:	e7ed      	b.n	4042d2 <log10f+0xb2>
  4042f6:	bf00      	nop
  4042f8:	2000001c 	.word	0x2000001c
  4042fc:	00408824 	.word	0x00408824
  404300:	c7efffff 	.word	0xc7efffff
  404304:	fff00000 	.word	0xfff00000
  404308:	004087ec 	.word	0x004087ec

0040430c <__ieee754_log10f>:
  40430c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
  404310:	b570      	push	{r4, r5, r6, lr}
  404312:	d032      	beq.n	40437a <__ieee754_log10f+0x6e>
  404314:	2800      	cmp	r0, #0
  404316:	4601      	mov	r1, r0
  404318:	4604      	mov	r4, r0
  40431a:	db3c      	blt.n	404396 <__ieee754_log10f+0x8a>
  40431c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
  404320:	da28      	bge.n	404374 <__ieee754_log10f+0x68>
  404322:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404326:	db2e      	blt.n	404386 <__ieee754_log10f+0x7a>
  404328:	2200      	movs	r2, #0
  40432a:	15e0      	asrs	r0, r4, #23
  40432c:	387f      	subs	r0, #127	; 0x7f
  40432e:	4410      	add	r0, r2
  404330:	0fc5      	lsrs	r5, r0, #31
  404332:	4428      	add	r0, r5
  404334:	f000 fe7c 	bl	405030 <__aeabi_i2f>
  404338:	f3c4 0416 	ubfx	r4, r4, #0, #23
  40433c:	4606      	mov	r6, r0
  40433e:	f1c5 007f 	rsb	r0, r5, #127	; 0x7f
  404342:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  404346:	f000 f83b 	bl	4043c0 <__ieee754_logf>
  40434a:	4916      	ldr	r1, [pc, #88]	; (4043a4 <__ieee754_log10f+0x98>)
  40434c:	4605      	mov	r5, r0
  40434e:	4630      	mov	r0, r6
  404350:	f000 fec2 	bl	4050d8 <__aeabi_fmul>
  404354:	4914      	ldr	r1, [pc, #80]	; (4043a8 <__ieee754_log10f+0x9c>)
  404356:	4604      	mov	r4, r0
  404358:	4628      	mov	r0, r5
  40435a:	f000 febd 	bl	4050d8 <__aeabi_fmul>
  40435e:	4601      	mov	r1, r0
  404360:	4620      	mov	r0, r4
  404362:	f000 fdb1 	bl	404ec8 <__addsf3>
  404366:	4911      	ldr	r1, [pc, #68]	; (4043ac <__ieee754_log10f+0xa0>)
  404368:	4604      	mov	r4, r0
  40436a:	4630      	mov	r0, r6
  40436c:	f000 feb4 	bl	4050d8 <__aeabi_fmul>
  404370:	4601      	mov	r1, r0
  404372:	4620      	mov	r0, r4
  404374:	f000 fda8 	bl	404ec8 <__addsf3>
  404378:	bd70      	pop	{r4, r5, r6, pc}
  40437a:	2100      	movs	r1, #0
  40437c:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
  404380:	f000 ff5e 	bl	405240 <__aeabi_fdiv>
  404384:	bd70      	pop	{r4, r5, r6, pc}
  404386:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  40438a:	f000 fea5 	bl	4050d8 <__aeabi_fmul>
  40438e:	f06f 0218 	mvn.w	r2, #24
  404392:	4604      	mov	r4, r0
  404394:	e7c9      	b.n	40432a <__ieee754_log10f+0x1e>
  404396:	f000 fd95 	bl	404ec4 <__aeabi_fsub>
  40439a:	2100      	movs	r1, #0
  40439c:	f000 ff50 	bl	405240 <__aeabi_fdiv>
  4043a0:	bd70      	pop	{r4, r5, r6, pc}
  4043a2:	bf00      	nop
  4043a4:	355427db 	.word	0x355427db
  4043a8:	3ede5bd9 	.word	0x3ede5bd9
  4043ac:	3e9a2080 	.word	0x3e9a2080

004043b0 <matherr>:
  4043b0:	2000      	movs	r0, #0
  4043b2:	4770      	bx	lr

004043b4 <nan>:
  4043b4:	2000      	movs	r0, #0
  4043b6:	4901      	ldr	r1, [pc, #4]	; (4043bc <nan+0x8>)
  4043b8:	4770      	bx	lr
  4043ba:	bf00      	nop
  4043bc:	7ff80000 	.word	0x7ff80000

004043c0 <__ieee754_logf>:
  4043c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043c4:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
  4043c8:	d02d      	beq.n	404426 <__ieee754_logf+0x66>
  4043ca:	2800      	cmp	r0, #0
  4043cc:	4601      	mov	r1, r0
  4043ce:	4604      	mov	r4, r0
  4043d0:	db4a      	blt.n	404468 <__ieee754_logf+0xa8>
  4043d2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
  4043d6:	da3b      	bge.n	404450 <__ieee754_logf+0x90>
  4043d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4043dc:	db3c      	blt.n	404458 <__ieee754_logf+0x98>
  4043de:	2600      	movs	r6, #0
  4043e0:	4a8d      	ldr	r2, [pc, #564]	; (404618 <__ieee754_logf+0x258>)
  4043e2:	f3c4 0516 	ubfx	r5, r4, #0, #23
  4043e6:	442a      	add	r2, r5
  4043e8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
  4043ec:	15e4      	asrs	r4, r4, #23
  4043ee:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
  4043f2:	3c7f      	subs	r4, #127	; 0x7f
  4043f4:	4434      	add	r4, r6
  4043f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4043fa:	4328      	orrs	r0, r5
  4043fc:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
  404400:	f000 fd60 	bl	404ec4 <__aeabi_fsub>
  404404:	f105 030f 	add.w	r3, r5, #15
  404408:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40440c:	2b0f      	cmp	r3, #15
  40440e:	4606      	mov	r6, r0
  404410:	dc31      	bgt.n	404476 <__ieee754_logf+0xb6>
  404412:	2100      	movs	r1, #0
  404414:	f000 fff4 	bl	405400 <__aeabi_fcmpeq>
  404418:	2800      	cmp	r0, #0
  40441a:	f000 8094 	beq.w	404546 <__ieee754_logf+0x186>
  40441e:	b94c      	cbnz	r4, 404434 <__ieee754_logf+0x74>
  404420:	2000      	movs	r0, #0
  404422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404426:	2100      	movs	r1, #0
  404428:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
  40442c:	f000 ff08 	bl	405240 <__aeabi_fdiv>
  404430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404434:	4620      	mov	r0, r4
  404436:	f000 fdfb 	bl	405030 <__aeabi_i2f>
  40443a:	4978      	ldr	r1, [pc, #480]	; (40461c <__ieee754_logf+0x25c>)
  40443c:	4605      	mov	r5, r0
  40443e:	f000 fe4b 	bl	4050d8 <__aeabi_fmul>
  404442:	4977      	ldr	r1, [pc, #476]	; (404620 <__ieee754_logf+0x260>)
  404444:	4604      	mov	r4, r0
  404446:	4628      	mov	r0, r5
  404448:	f000 fe46 	bl	4050d8 <__aeabi_fmul>
  40444c:	4601      	mov	r1, r0
  40444e:	4620      	mov	r0, r4
  404450:	f000 fd3a 	bl	404ec8 <__addsf3>
  404454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404458:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  40445c:	f000 fe3c 	bl	4050d8 <__aeabi_fmul>
  404460:	f06f 0618 	mvn.w	r6, #24
  404464:	4604      	mov	r4, r0
  404466:	e7bb      	b.n	4043e0 <__ieee754_logf+0x20>
  404468:	f000 fd2c 	bl	404ec4 <__aeabi_fsub>
  40446c:	2100      	movs	r1, #0
  40446e:	f000 fee7 	bl	405240 <__aeabi_fdiv>
  404472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404476:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40447a:	f000 fd25 	bl	404ec8 <__addsf3>
  40447e:	4601      	mov	r1, r0
  404480:	4630      	mov	r0, r6
  404482:	f000 fedd 	bl	405240 <__aeabi_fdiv>
  404486:	4680      	mov	r8, r0
  404488:	4620      	mov	r0, r4
  40448a:	f000 fdd1 	bl	405030 <__aeabi_i2f>
  40448e:	4641      	mov	r1, r8
  404490:	4681      	mov	r9, r0
  404492:	4640      	mov	r0, r8
  404494:	f000 fe20 	bl	4050d8 <__aeabi_fmul>
  404498:	4601      	mov	r1, r0
  40449a:	4683      	mov	fp, r0
  40449c:	f000 fe1c 	bl	4050d8 <__aeabi_fmul>
  4044a0:	4960      	ldr	r1, [pc, #384]	; (404624 <__ieee754_logf+0x264>)
  4044a2:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 404644 <__ieee754_logf+0x284>
  4044a6:	4607      	mov	r7, r0
  4044a8:	f000 fe16 	bl	4050d8 <__aeabi_fmul>
  4044ac:	495e      	ldr	r1, [pc, #376]	; (404628 <__ieee754_logf+0x268>)
  4044ae:	f000 fd0b 	bl	404ec8 <__addsf3>
  4044b2:	4639      	mov	r1, r7
  4044b4:	f000 fe10 	bl	4050d8 <__aeabi_fmul>
  4044b8:	495c      	ldr	r1, [pc, #368]	; (40462c <__ieee754_logf+0x26c>)
  4044ba:	f000 fd05 	bl	404ec8 <__addsf3>
  4044be:	4639      	mov	r1, r7
  4044c0:	f000 fe0a 	bl	4050d8 <__aeabi_fmul>
  4044c4:	495a      	ldr	r1, [pc, #360]	; (404630 <__ieee754_logf+0x270>)
  4044c6:	f000 fcff 	bl	404ec8 <__addsf3>
  4044ca:	4659      	mov	r1, fp
  4044cc:	f000 fe04 	bl	4050d8 <__aeabi_fmul>
  4044d0:	4958      	ldr	r1, [pc, #352]	; (404634 <__ieee754_logf+0x274>)
  4044d2:	4683      	mov	fp, r0
  4044d4:	4638      	mov	r0, r7
  4044d6:	f000 fdff 	bl	4050d8 <__aeabi_fmul>
  4044da:	4957      	ldr	r1, [pc, #348]	; (404638 <__ieee754_logf+0x278>)
  4044dc:	f000 fcf4 	bl	404ec8 <__addsf3>
  4044e0:	4639      	mov	r1, r7
  4044e2:	f000 fdf9 	bl	4050d8 <__aeabi_fmul>
  4044e6:	4955      	ldr	r1, [pc, #340]	; (40463c <__ieee754_logf+0x27c>)
  4044e8:	f000 fcee 	bl	404ec8 <__addsf3>
  4044ec:	4639      	mov	r1, r7
  4044ee:	f000 fdf3 	bl	4050d8 <__aeabi_fmul>
  4044f2:	4601      	mov	r1, r0
  4044f4:	4658      	mov	r0, fp
  4044f6:	f000 fce7 	bl	404ec8 <__addsf3>
  4044fa:	f5c5 1357 	rsb	r3, r5, #3522560	; 0x35c000
  4044fe:	44aa      	add	sl, r5
  404500:	f503 7322 	add.w	r3, r3, #648	; 0x288
  404504:	ea43 030a 	orr.w	r3, r3, sl
  404508:	2b00      	cmp	r3, #0
  40450a:	4607      	mov	r7, r0
  40450c:	dd65      	ble.n	4045da <__ieee754_logf+0x21a>
  40450e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404512:	4630      	mov	r0, r6
  404514:	f000 fde0 	bl	4050d8 <__aeabi_fmul>
  404518:	4631      	mov	r1, r6
  40451a:	f000 fddd 	bl	4050d8 <__aeabi_fmul>
  40451e:	4605      	mov	r5, r0
  404520:	2c00      	cmp	r4, #0
  404522:	d132      	bne.n	40458a <__ieee754_logf+0x1ca>
  404524:	4629      	mov	r1, r5
  404526:	4638      	mov	r0, r7
  404528:	f000 fcce 	bl	404ec8 <__addsf3>
  40452c:	4641      	mov	r1, r8
  40452e:	f000 fdd3 	bl	4050d8 <__aeabi_fmul>
  404532:	4601      	mov	r1, r0
  404534:	4628      	mov	r0, r5
  404536:	f000 fcc5 	bl	404ec4 <__aeabi_fsub>
  40453a:	4601      	mov	r1, r0
  40453c:	4630      	mov	r0, r6
  40453e:	f000 fcc1 	bl	404ec4 <__aeabi_fsub>
  404542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404546:	493e      	ldr	r1, [pc, #248]	; (404640 <__ieee754_logf+0x280>)
  404548:	4630      	mov	r0, r6
  40454a:	f000 fdc5 	bl	4050d8 <__aeabi_fmul>
  40454e:	4601      	mov	r1, r0
  404550:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
  404554:	f000 fcb6 	bl	404ec4 <__aeabi_fsub>
  404558:	4631      	mov	r1, r6
  40455a:	4605      	mov	r5, r0
  40455c:	4630      	mov	r0, r6
  40455e:	f000 fdbb 	bl	4050d8 <__aeabi_fmul>
  404562:	4601      	mov	r1, r0
  404564:	4628      	mov	r0, r5
  404566:	f000 fdb7 	bl	4050d8 <__aeabi_fmul>
  40456a:	4605      	mov	r5, r0
  40456c:	2c00      	cmp	r4, #0
  40456e:	d02e      	beq.n	4045ce <__ieee754_logf+0x20e>
  404570:	4620      	mov	r0, r4
  404572:	f000 fd5d 	bl	405030 <__aeabi_i2f>
  404576:	4929      	ldr	r1, [pc, #164]	; (40461c <__ieee754_logf+0x25c>)
  404578:	4607      	mov	r7, r0
  40457a:	f000 fdad 	bl	4050d8 <__aeabi_fmul>
  40457e:	4928      	ldr	r1, [pc, #160]	; (404620 <__ieee754_logf+0x260>)
  404580:	4604      	mov	r4, r0
  404582:	4638      	mov	r0, r7
  404584:	f000 fda8 	bl	4050d8 <__aeabi_fmul>
  404588:	e014      	b.n	4045b4 <__ieee754_logf+0x1f4>
  40458a:	4924      	ldr	r1, [pc, #144]	; (40461c <__ieee754_logf+0x25c>)
  40458c:	4648      	mov	r0, r9
  40458e:	f000 fda3 	bl	4050d8 <__aeabi_fmul>
  404592:	4629      	mov	r1, r5
  404594:	4604      	mov	r4, r0
  404596:	4638      	mov	r0, r7
  404598:	f000 fc96 	bl	404ec8 <__addsf3>
  40459c:	4641      	mov	r1, r8
  40459e:	f000 fd9b 	bl	4050d8 <__aeabi_fmul>
  4045a2:	491f      	ldr	r1, [pc, #124]	; (404620 <__ieee754_logf+0x260>)
  4045a4:	4607      	mov	r7, r0
  4045a6:	4648      	mov	r0, r9
  4045a8:	f000 fd96 	bl	4050d8 <__aeabi_fmul>
  4045ac:	4601      	mov	r1, r0
  4045ae:	4638      	mov	r0, r7
  4045b0:	f000 fc8a 	bl	404ec8 <__addsf3>
  4045b4:	4601      	mov	r1, r0
  4045b6:	4628      	mov	r0, r5
  4045b8:	f000 fc84 	bl	404ec4 <__aeabi_fsub>
  4045bc:	4631      	mov	r1, r6
  4045be:	f000 fc81 	bl	404ec4 <__aeabi_fsub>
  4045c2:	4601      	mov	r1, r0
  4045c4:	4620      	mov	r0, r4
  4045c6:	f000 fc7d 	bl	404ec4 <__aeabi_fsub>
  4045ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045ce:	4601      	mov	r1, r0
  4045d0:	4630      	mov	r0, r6
  4045d2:	f000 fc77 	bl	404ec4 <__aeabi_fsub>
  4045d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045da:	b17c      	cbz	r4, 4045fc <__ieee754_logf+0x23c>
  4045dc:	490f      	ldr	r1, [pc, #60]	; (40461c <__ieee754_logf+0x25c>)
  4045de:	4648      	mov	r0, r9
  4045e0:	f000 fd7a 	bl	4050d8 <__aeabi_fmul>
  4045e4:	4639      	mov	r1, r7
  4045e6:	4604      	mov	r4, r0
  4045e8:	4630      	mov	r0, r6
  4045ea:	f000 fc6b 	bl	404ec4 <__aeabi_fsub>
  4045ee:	4641      	mov	r1, r8
  4045f0:	f000 fd72 	bl	4050d8 <__aeabi_fmul>
  4045f4:	490a      	ldr	r1, [pc, #40]	; (404620 <__ieee754_logf+0x260>)
  4045f6:	4605      	mov	r5, r0
  4045f8:	4648      	mov	r0, r9
  4045fa:	e7c3      	b.n	404584 <__ieee754_logf+0x1c4>
  4045fc:	4601      	mov	r1, r0
  4045fe:	4630      	mov	r0, r6
  404600:	f000 fc60 	bl	404ec4 <__aeabi_fsub>
  404604:	4641      	mov	r1, r8
  404606:	f000 fd67 	bl	4050d8 <__aeabi_fmul>
  40460a:	4601      	mov	r1, r0
  40460c:	4630      	mov	r0, r6
  40460e:	f000 fc59 	bl	404ec4 <__aeabi_fsub>
  404612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404616:	bf00      	nop
  404618:	004afb20 	.word	0x004afb20
  40461c:	3f317180 	.word	0x3f317180
  404620:	3717f7d1 	.word	0x3717f7d1
  404624:	3e178897 	.word	0x3e178897
  404628:	3e3a3325 	.word	0x3e3a3325
  40462c:	3e924925 	.word	0x3e924925
  404630:	3f2aaaab 	.word	0x3f2aaaab
  404634:	3e1cd04f 	.word	0x3e1cd04f
  404638:	3e638e29 	.word	0x3e638e29
  40463c:	3ecccccd 	.word	0x3ecccccd
  404640:	3eaaaaab 	.word	0x3eaaaaab
  404644:	ffcf5c30 	.word	0xffcf5c30

00404648 <__aeabi_drsub>:
  404648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40464c:	e002      	b.n	404654 <__adddf3>
  40464e:	bf00      	nop

00404650 <__aeabi_dsub>:
  404650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404654 <__adddf3>:
  404654:	b530      	push	{r4, r5, lr}
  404656:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40465a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40465e:	ea94 0f05 	teq	r4, r5
  404662:	bf08      	it	eq
  404664:	ea90 0f02 	teqeq	r0, r2
  404668:	bf1f      	itttt	ne
  40466a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40466e:	ea55 0c02 	orrsne.w	ip, r5, r2
  404672:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404676:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40467a:	f000 80e2 	beq.w	404842 <__adddf3+0x1ee>
  40467e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404682:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404686:	bfb8      	it	lt
  404688:	426d      	neglt	r5, r5
  40468a:	dd0c      	ble.n	4046a6 <__adddf3+0x52>
  40468c:	442c      	add	r4, r5
  40468e:	ea80 0202 	eor.w	r2, r0, r2
  404692:	ea81 0303 	eor.w	r3, r1, r3
  404696:	ea82 0000 	eor.w	r0, r2, r0
  40469a:	ea83 0101 	eor.w	r1, r3, r1
  40469e:	ea80 0202 	eor.w	r2, r0, r2
  4046a2:	ea81 0303 	eor.w	r3, r1, r3
  4046a6:	2d36      	cmp	r5, #54	; 0x36
  4046a8:	bf88      	it	hi
  4046aa:	bd30      	pophi	{r4, r5, pc}
  4046ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4046b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4046b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4046b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4046bc:	d002      	beq.n	4046c4 <__adddf3+0x70>
  4046be:	4240      	negs	r0, r0
  4046c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4046c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4046c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4046cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4046d0:	d002      	beq.n	4046d8 <__adddf3+0x84>
  4046d2:	4252      	negs	r2, r2
  4046d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4046d8:	ea94 0f05 	teq	r4, r5
  4046dc:	f000 80a7 	beq.w	40482e <__adddf3+0x1da>
  4046e0:	f1a4 0401 	sub.w	r4, r4, #1
  4046e4:	f1d5 0e20 	rsbs	lr, r5, #32
  4046e8:	db0d      	blt.n	404706 <__adddf3+0xb2>
  4046ea:	fa02 fc0e 	lsl.w	ip, r2, lr
  4046ee:	fa22 f205 	lsr.w	r2, r2, r5
  4046f2:	1880      	adds	r0, r0, r2
  4046f4:	f141 0100 	adc.w	r1, r1, #0
  4046f8:	fa03 f20e 	lsl.w	r2, r3, lr
  4046fc:	1880      	adds	r0, r0, r2
  4046fe:	fa43 f305 	asr.w	r3, r3, r5
  404702:	4159      	adcs	r1, r3
  404704:	e00e      	b.n	404724 <__adddf3+0xd0>
  404706:	f1a5 0520 	sub.w	r5, r5, #32
  40470a:	f10e 0e20 	add.w	lr, lr, #32
  40470e:	2a01      	cmp	r2, #1
  404710:	fa03 fc0e 	lsl.w	ip, r3, lr
  404714:	bf28      	it	cs
  404716:	f04c 0c02 	orrcs.w	ip, ip, #2
  40471a:	fa43 f305 	asr.w	r3, r3, r5
  40471e:	18c0      	adds	r0, r0, r3
  404720:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404728:	d507      	bpl.n	40473a <__adddf3+0xe6>
  40472a:	f04f 0e00 	mov.w	lr, #0
  40472e:	f1dc 0c00 	rsbs	ip, ip, #0
  404732:	eb7e 0000 	sbcs.w	r0, lr, r0
  404736:	eb6e 0101 	sbc.w	r1, lr, r1
  40473a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40473e:	d31b      	bcc.n	404778 <__adddf3+0x124>
  404740:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404744:	d30c      	bcc.n	404760 <__adddf3+0x10c>
  404746:	0849      	lsrs	r1, r1, #1
  404748:	ea5f 0030 	movs.w	r0, r0, rrx
  40474c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  404750:	f104 0401 	add.w	r4, r4, #1
  404754:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404758:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40475c:	f080 809a 	bcs.w	404894 <__adddf3+0x240>
  404760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404764:	bf08      	it	eq
  404766:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40476a:	f150 0000 	adcs.w	r0, r0, #0
  40476e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404772:	ea41 0105 	orr.w	r1, r1, r5
  404776:	bd30      	pop	{r4, r5, pc}
  404778:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40477c:	4140      	adcs	r0, r0
  40477e:	eb41 0101 	adc.w	r1, r1, r1
  404782:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404786:	f1a4 0401 	sub.w	r4, r4, #1
  40478a:	d1e9      	bne.n	404760 <__adddf3+0x10c>
  40478c:	f091 0f00 	teq	r1, #0
  404790:	bf04      	itt	eq
  404792:	4601      	moveq	r1, r0
  404794:	2000      	moveq	r0, #0
  404796:	fab1 f381 	clz	r3, r1
  40479a:	bf08      	it	eq
  40479c:	3320      	addeq	r3, #32
  40479e:	f1a3 030b 	sub.w	r3, r3, #11
  4047a2:	f1b3 0220 	subs.w	r2, r3, #32
  4047a6:	da0c      	bge.n	4047c2 <__adddf3+0x16e>
  4047a8:	320c      	adds	r2, #12
  4047aa:	dd08      	ble.n	4047be <__adddf3+0x16a>
  4047ac:	f102 0c14 	add.w	ip, r2, #20
  4047b0:	f1c2 020c 	rsb	r2, r2, #12
  4047b4:	fa01 f00c 	lsl.w	r0, r1, ip
  4047b8:	fa21 f102 	lsr.w	r1, r1, r2
  4047bc:	e00c      	b.n	4047d8 <__adddf3+0x184>
  4047be:	f102 0214 	add.w	r2, r2, #20
  4047c2:	bfd8      	it	le
  4047c4:	f1c2 0c20 	rsble	ip, r2, #32
  4047c8:	fa01 f102 	lsl.w	r1, r1, r2
  4047cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4047d0:	bfdc      	itt	le
  4047d2:	ea41 010c 	orrle.w	r1, r1, ip
  4047d6:	4090      	lslle	r0, r2
  4047d8:	1ae4      	subs	r4, r4, r3
  4047da:	bfa2      	ittt	ge
  4047dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4047e0:	4329      	orrge	r1, r5
  4047e2:	bd30      	popge	{r4, r5, pc}
  4047e4:	ea6f 0404 	mvn.w	r4, r4
  4047e8:	3c1f      	subs	r4, #31
  4047ea:	da1c      	bge.n	404826 <__adddf3+0x1d2>
  4047ec:	340c      	adds	r4, #12
  4047ee:	dc0e      	bgt.n	40480e <__adddf3+0x1ba>
  4047f0:	f104 0414 	add.w	r4, r4, #20
  4047f4:	f1c4 0220 	rsb	r2, r4, #32
  4047f8:	fa20 f004 	lsr.w	r0, r0, r4
  4047fc:	fa01 f302 	lsl.w	r3, r1, r2
  404800:	ea40 0003 	orr.w	r0, r0, r3
  404804:	fa21 f304 	lsr.w	r3, r1, r4
  404808:	ea45 0103 	orr.w	r1, r5, r3
  40480c:	bd30      	pop	{r4, r5, pc}
  40480e:	f1c4 040c 	rsb	r4, r4, #12
  404812:	f1c4 0220 	rsb	r2, r4, #32
  404816:	fa20 f002 	lsr.w	r0, r0, r2
  40481a:	fa01 f304 	lsl.w	r3, r1, r4
  40481e:	ea40 0003 	orr.w	r0, r0, r3
  404822:	4629      	mov	r1, r5
  404824:	bd30      	pop	{r4, r5, pc}
  404826:	fa21 f004 	lsr.w	r0, r1, r4
  40482a:	4629      	mov	r1, r5
  40482c:	bd30      	pop	{r4, r5, pc}
  40482e:	f094 0f00 	teq	r4, #0
  404832:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404836:	bf06      	itte	eq
  404838:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40483c:	3401      	addeq	r4, #1
  40483e:	3d01      	subne	r5, #1
  404840:	e74e      	b.n	4046e0 <__adddf3+0x8c>
  404842:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404846:	bf18      	it	ne
  404848:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40484c:	d029      	beq.n	4048a2 <__adddf3+0x24e>
  40484e:	ea94 0f05 	teq	r4, r5
  404852:	bf08      	it	eq
  404854:	ea90 0f02 	teqeq	r0, r2
  404858:	d005      	beq.n	404866 <__adddf3+0x212>
  40485a:	ea54 0c00 	orrs.w	ip, r4, r0
  40485e:	bf04      	itt	eq
  404860:	4619      	moveq	r1, r3
  404862:	4610      	moveq	r0, r2
  404864:	bd30      	pop	{r4, r5, pc}
  404866:	ea91 0f03 	teq	r1, r3
  40486a:	bf1e      	ittt	ne
  40486c:	2100      	movne	r1, #0
  40486e:	2000      	movne	r0, #0
  404870:	bd30      	popne	{r4, r5, pc}
  404872:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404876:	d105      	bne.n	404884 <__adddf3+0x230>
  404878:	0040      	lsls	r0, r0, #1
  40487a:	4149      	adcs	r1, r1
  40487c:	bf28      	it	cs
  40487e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404882:	bd30      	pop	{r4, r5, pc}
  404884:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404888:	bf3c      	itt	cc
  40488a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40488e:	bd30      	popcc	{r4, r5, pc}
  404890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404894:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40489c:	f04f 0000 	mov.w	r0, #0
  4048a0:	bd30      	pop	{r4, r5, pc}
  4048a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4048a6:	bf1a      	itte	ne
  4048a8:	4619      	movne	r1, r3
  4048aa:	4610      	movne	r0, r2
  4048ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4048b0:	bf1c      	itt	ne
  4048b2:	460b      	movne	r3, r1
  4048b4:	4602      	movne	r2, r0
  4048b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4048ba:	bf06      	itte	eq
  4048bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4048c0:	ea91 0f03 	teqeq	r1, r3
  4048c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4048c8:	bd30      	pop	{r4, r5, pc}
  4048ca:	bf00      	nop

004048cc <__aeabi_ui2d>:
  4048cc:	f090 0f00 	teq	r0, #0
  4048d0:	bf04      	itt	eq
  4048d2:	2100      	moveq	r1, #0
  4048d4:	4770      	bxeq	lr
  4048d6:	b530      	push	{r4, r5, lr}
  4048d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4048dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4048e0:	f04f 0500 	mov.w	r5, #0
  4048e4:	f04f 0100 	mov.w	r1, #0
  4048e8:	e750      	b.n	40478c <__adddf3+0x138>
  4048ea:	bf00      	nop

004048ec <__aeabi_i2d>:
  4048ec:	f090 0f00 	teq	r0, #0
  4048f0:	bf04      	itt	eq
  4048f2:	2100      	moveq	r1, #0
  4048f4:	4770      	bxeq	lr
  4048f6:	b530      	push	{r4, r5, lr}
  4048f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4048fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404900:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404904:	bf48      	it	mi
  404906:	4240      	negmi	r0, r0
  404908:	f04f 0100 	mov.w	r1, #0
  40490c:	e73e      	b.n	40478c <__adddf3+0x138>
  40490e:	bf00      	nop

00404910 <__aeabi_f2d>:
  404910:	0042      	lsls	r2, r0, #1
  404912:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404916:	ea4f 0131 	mov.w	r1, r1, rrx
  40491a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40491e:	bf1f      	itttt	ne
  404920:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404924:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404928:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40492c:	4770      	bxne	lr
  40492e:	f092 0f00 	teq	r2, #0
  404932:	bf14      	ite	ne
  404934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404938:	4770      	bxeq	lr
  40493a:	b530      	push	{r4, r5, lr}
  40493c:	f44f 7460 	mov.w	r4, #896	; 0x380
  404940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404948:	e720      	b.n	40478c <__adddf3+0x138>
  40494a:	bf00      	nop

0040494c <__aeabi_ul2d>:
  40494c:	ea50 0201 	orrs.w	r2, r0, r1
  404950:	bf08      	it	eq
  404952:	4770      	bxeq	lr
  404954:	b530      	push	{r4, r5, lr}
  404956:	f04f 0500 	mov.w	r5, #0
  40495a:	e00a      	b.n	404972 <__aeabi_l2d+0x16>

0040495c <__aeabi_l2d>:
  40495c:	ea50 0201 	orrs.w	r2, r0, r1
  404960:	bf08      	it	eq
  404962:	4770      	bxeq	lr
  404964:	b530      	push	{r4, r5, lr}
  404966:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40496a:	d502      	bpl.n	404972 <__aeabi_l2d+0x16>
  40496c:	4240      	negs	r0, r0
  40496e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404972:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404976:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40497a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40497e:	f43f aedc 	beq.w	40473a <__adddf3+0xe6>
  404982:	f04f 0203 	mov.w	r2, #3
  404986:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40498a:	bf18      	it	ne
  40498c:	3203      	addne	r2, #3
  40498e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404992:	bf18      	it	ne
  404994:	3203      	addne	r2, #3
  404996:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40499a:	f1c2 0320 	rsb	r3, r2, #32
  40499e:	fa00 fc03 	lsl.w	ip, r0, r3
  4049a2:	fa20 f002 	lsr.w	r0, r0, r2
  4049a6:	fa01 fe03 	lsl.w	lr, r1, r3
  4049aa:	ea40 000e 	orr.w	r0, r0, lr
  4049ae:	fa21 f102 	lsr.w	r1, r1, r2
  4049b2:	4414      	add	r4, r2
  4049b4:	e6c1      	b.n	40473a <__adddf3+0xe6>
  4049b6:	bf00      	nop

004049b8 <__aeabi_dmul>:
  4049b8:	b570      	push	{r4, r5, r6, lr}
  4049ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4049be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4049c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4049c6:	bf1d      	ittte	ne
  4049c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4049cc:	ea94 0f0c 	teqne	r4, ip
  4049d0:	ea95 0f0c 	teqne	r5, ip
  4049d4:	f000 f8de 	bleq	404b94 <__aeabi_dmul+0x1dc>
  4049d8:	442c      	add	r4, r5
  4049da:	ea81 0603 	eor.w	r6, r1, r3
  4049de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4049e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4049e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4049ea:	bf18      	it	ne
  4049ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4049f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4049f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4049f8:	d038      	beq.n	404a6c <__aeabi_dmul+0xb4>
  4049fa:	fba0 ce02 	umull	ip, lr, r0, r2
  4049fe:	f04f 0500 	mov.w	r5, #0
  404a02:	fbe1 e502 	umlal	lr, r5, r1, r2
  404a06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404a0a:	fbe0 e503 	umlal	lr, r5, r0, r3
  404a0e:	f04f 0600 	mov.w	r6, #0
  404a12:	fbe1 5603 	umlal	r5, r6, r1, r3
  404a16:	f09c 0f00 	teq	ip, #0
  404a1a:	bf18      	it	ne
  404a1c:	f04e 0e01 	orrne.w	lr, lr, #1
  404a20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404a24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404a28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404a2c:	d204      	bcs.n	404a38 <__aeabi_dmul+0x80>
  404a2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404a32:	416d      	adcs	r5, r5
  404a34:	eb46 0606 	adc.w	r6, r6, r6
  404a38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404a3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404a40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404a44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404a48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404a4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404a50:	bf88      	it	hi
  404a52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404a56:	d81e      	bhi.n	404a96 <__aeabi_dmul+0xde>
  404a58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404a5c:	bf08      	it	eq
  404a5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404a62:	f150 0000 	adcs.w	r0, r0, #0
  404a66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404a6a:	bd70      	pop	{r4, r5, r6, pc}
  404a6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404a70:	ea46 0101 	orr.w	r1, r6, r1
  404a74:	ea40 0002 	orr.w	r0, r0, r2
  404a78:	ea81 0103 	eor.w	r1, r1, r3
  404a7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404a80:	bfc2      	ittt	gt
  404a82:	ebd4 050c 	rsbsgt	r5, r4, ip
  404a86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404a8a:	bd70      	popgt	{r4, r5, r6, pc}
  404a8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404a90:	f04f 0e00 	mov.w	lr, #0
  404a94:	3c01      	subs	r4, #1
  404a96:	f300 80ab 	bgt.w	404bf0 <__aeabi_dmul+0x238>
  404a9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404a9e:	bfde      	ittt	le
  404aa0:	2000      	movle	r0, #0
  404aa2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404aa6:	bd70      	pople	{r4, r5, r6, pc}
  404aa8:	f1c4 0400 	rsb	r4, r4, #0
  404aac:	3c20      	subs	r4, #32
  404aae:	da35      	bge.n	404b1c <__aeabi_dmul+0x164>
  404ab0:	340c      	adds	r4, #12
  404ab2:	dc1b      	bgt.n	404aec <__aeabi_dmul+0x134>
  404ab4:	f104 0414 	add.w	r4, r4, #20
  404ab8:	f1c4 0520 	rsb	r5, r4, #32
  404abc:	fa00 f305 	lsl.w	r3, r0, r5
  404ac0:	fa20 f004 	lsr.w	r0, r0, r4
  404ac4:	fa01 f205 	lsl.w	r2, r1, r5
  404ac8:	ea40 0002 	orr.w	r0, r0, r2
  404acc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404ad4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404ad8:	fa21 f604 	lsr.w	r6, r1, r4
  404adc:	eb42 0106 	adc.w	r1, r2, r6
  404ae0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404ae4:	bf08      	it	eq
  404ae6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404aea:	bd70      	pop	{r4, r5, r6, pc}
  404aec:	f1c4 040c 	rsb	r4, r4, #12
  404af0:	f1c4 0520 	rsb	r5, r4, #32
  404af4:	fa00 f304 	lsl.w	r3, r0, r4
  404af8:	fa20 f005 	lsr.w	r0, r0, r5
  404afc:	fa01 f204 	lsl.w	r2, r1, r4
  404b00:	ea40 0002 	orr.w	r0, r0, r2
  404b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404b08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404b0c:	f141 0100 	adc.w	r1, r1, #0
  404b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404b14:	bf08      	it	eq
  404b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404b1a:	bd70      	pop	{r4, r5, r6, pc}
  404b1c:	f1c4 0520 	rsb	r5, r4, #32
  404b20:	fa00 f205 	lsl.w	r2, r0, r5
  404b24:	ea4e 0e02 	orr.w	lr, lr, r2
  404b28:	fa20 f304 	lsr.w	r3, r0, r4
  404b2c:	fa01 f205 	lsl.w	r2, r1, r5
  404b30:	ea43 0302 	orr.w	r3, r3, r2
  404b34:	fa21 f004 	lsr.w	r0, r1, r4
  404b38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404b3c:	fa21 f204 	lsr.w	r2, r1, r4
  404b40:	ea20 0002 	bic.w	r0, r0, r2
  404b44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404b4c:	bf08      	it	eq
  404b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404b52:	bd70      	pop	{r4, r5, r6, pc}
  404b54:	f094 0f00 	teq	r4, #0
  404b58:	d10f      	bne.n	404b7a <__aeabi_dmul+0x1c2>
  404b5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404b5e:	0040      	lsls	r0, r0, #1
  404b60:	eb41 0101 	adc.w	r1, r1, r1
  404b64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404b68:	bf08      	it	eq
  404b6a:	3c01      	subeq	r4, #1
  404b6c:	d0f7      	beq.n	404b5e <__aeabi_dmul+0x1a6>
  404b6e:	ea41 0106 	orr.w	r1, r1, r6
  404b72:	f095 0f00 	teq	r5, #0
  404b76:	bf18      	it	ne
  404b78:	4770      	bxne	lr
  404b7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404b7e:	0052      	lsls	r2, r2, #1
  404b80:	eb43 0303 	adc.w	r3, r3, r3
  404b84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404b88:	bf08      	it	eq
  404b8a:	3d01      	subeq	r5, #1
  404b8c:	d0f7      	beq.n	404b7e <__aeabi_dmul+0x1c6>
  404b8e:	ea43 0306 	orr.w	r3, r3, r6
  404b92:	4770      	bx	lr
  404b94:	ea94 0f0c 	teq	r4, ip
  404b98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404b9c:	bf18      	it	ne
  404b9e:	ea95 0f0c 	teqne	r5, ip
  404ba2:	d00c      	beq.n	404bbe <__aeabi_dmul+0x206>
  404ba4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404ba8:	bf18      	it	ne
  404baa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404bae:	d1d1      	bne.n	404b54 <__aeabi_dmul+0x19c>
  404bb0:	ea81 0103 	eor.w	r1, r1, r3
  404bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404bb8:	f04f 0000 	mov.w	r0, #0
  404bbc:	bd70      	pop	{r4, r5, r6, pc}
  404bbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404bc2:	bf06      	itte	eq
  404bc4:	4610      	moveq	r0, r2
  404bc6:	4619      	moveq	r1, r3
  404bc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404bcc:	d019      	beq.n	404c02 <__aeabi_dmul+0x24a>
  404bce:	ea94 0f0c 	teq	r4, ip
  404bd2:	d102      	bne.n	404bda <__aeabi_dmul+0x222>
  404bd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404bd8:	d113      	bne.n	404c02 <__aeabi_dmul+0x24a>
  404bda:	ea95 0f0c 	teq	r5, ip
  404bde:	d105      	bne.n	404bec <__aeabi_dmul+0x234>
  404be0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404be4:	bf1c      	itt	ne
  404be6:	4610      	movne	r0, r2
  404be8:	4619      	movne	r1, r3
  404bea:	d10a      	bne.n	404c02 <__aeabi_dmul+0x24a>
  404bec:	ea81 0103 	eor.w	r1, r1, r3
  404bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404bf4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404bf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404bfc:	f04f 0000 	mov.w	r0, #0
  404c00:	bd70      	pop	{r4, r5, r6, pc}
  404c02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404c06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404c0a:	bd70      	pop	{r4, r5, r6, pc}

00404c0c <__aeabi_ddiv>:
  404c0c:	b570      	push	{r4, r5, r6, lr}
  404c0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404c12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404c16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404c1a:	bf1d      	ittte	ne
  404c1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404c20:	ea94 0f0c 	teqne	r4, ip
  404c24:	ea95 0f0c 	teqne	r5, ip
  404c28:	f000 f8a7 	bleq	404d7a <__aeabi_ddiv+0x16e>
  404c2c:	eba4 0405 	sub.w	r4, r4, r5
  404c30:	ea81 0e03 	eor.w	lr, r1, r3
  404c34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404c38:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404c3c:	f000 8088 	beq.w	404d50 <__aeabi_ddiv+0x144>
  404c40:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404c44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404c48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404c4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404c50:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404c54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404c58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404c5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404c60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404c64:	429d      	cmp	r5, r3
  404c66:	bf08      	it	eq
  404c68:	4296      	cmpeq	r6, r2
  404c6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404c6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404c72:	d202      	bcs.n	404c7a <__aeabi_ddiv+0x6e>
  404c74:	085b      	lsrs	r3, r3, #1
  404c76:	ea4f 0232 	mov.w	r2, r2, rrx
  404c7a:	1ab6      	subs	r6, r6, r2
  404c7c:	eb65 0503 	sbc.w	r5, r5, r3
  404c80:	085b      	lsrs	r3, r3, #1
  404c82:	ea4f 0232 	mov.w	r2, r2, rrx
  404c86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404c8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404c8e:	ebb6 0e02 	subs.w	lr, r6, r2
  404c92:	eb75 0e03 	sbcs.w	lr, r5, r3
  404c96:	bf22      	ittt	cs
  404c98:	1ab6      	subcs	r6, r6, r2
  404c9a:	4675      	movcs	r5, lr
  404c9c:	ea40 000c 	orrcs.w	r0, r0, ip
  404ca0:	085b      	lsrs	r3, r3, #1
  404ca2:	ea4f 0232 	mov.w	r2, r2, rrx
  404ca6:	ebb6 0e02 	subs.w	lr, r6, r2
  404caa:	eb75 0e03 	sbcs.w	lr, r5, r3
  404cae:	bf22      	ittt	cs
  404cb0:	1ab6      	subcs	r6, r6, r2
  404cb2:	4675      	movcs	r5, lr
  404cb4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404cb8:	085b      	lsrs	r3, r3, #1
  404cba:	ea4f 0232 	mov.w	r2, r2, rrx
  404cbe:	ebb6 0e02 	subs.w	lr, r6, r2
  404cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
  404cc6:	bf22      	ittt	cs
  404cc8:	1ab6      	subcs	r6, r6, r2
  404cca:	4675      	movcs	r5, lr
  404ccc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404cd0:	085b      	lsrs	r3, r3, #1
  404cd2:	ea4f 0232 	mov.w	r2, r2, rrx
  404cd6:	ebb6 0e02 	subs.w	lr, r6, r2
  404cda:	eb75 0e03 	sbcs.w	lr, r5, r3
  404cde:	bf22      	ittt	cs
  404ce0:	1ab6      	subcs	r6, r6, r2
  404ce2:	4675      	movcs	r5, lr
  404ce4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404ce8:	ea55 0e06 	orrs.w	lr, r5, r6
  404cec:	d018      	beq.n	404d20 <__aeabi_ddiv+0x114>
  404cee:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404cf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404cf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404cfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404cfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404d02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404d06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404d0a:	d1c0      	bne.n	404c8e <__aeabi_ddiv+0x82>
  404d0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404d10:	d10b      	bne.n	404d2a <__aeabi_ddiv+0x11e>
  404d12:	ea41 0100 	orr.w	r1, r1, r0
  404d16:	f04f 0000 	mov.w	r0, #0
  404d1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404d1e:	e7b6      	b.n	404c8e <__aeabi_ddiv+0x82>
  404d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404d24:	bf04      	itt	eq
  404d26:	4301      	orreq	r1, r0
  404d28:	2000      	moveq	r0, #0
  404d2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404d2e:	bf88      	it	hi
  404d30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404d34:	f63f aeaf 	bhi.w	404a96 <__aeabi_dmul+0xde>
  404d38:	ebb5 0c03 	subs.w	ip, r5, r3
  404d3c:	bf04      	itt	eq
  404d3e:	ebb6 0c02 	subseq.w	ip, r6, r2
  404d42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404d46:	f150 0000 	adcs.w	r0, r0, #0
  404d4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404d4e:	bd70      	pop	{r4, r5, r6, pc}
  404d50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404d54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404d58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404d5c:	bfc2      	ittt	gt
  404d5e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404d62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404d66:	bd70      	popgt	{r4, r5, r6, pc}
  404d68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404d6c:	f04f 0e00 	mov.w	lr, #0
  404d70:	3c01      	subs	r4, #1
  404d72:	e690      	b.n	404a96 <__aeabi_dmul+0xde>
  404d74:	ea45 0e06 	orr.w	lr, r5, r6
  404d78:	e68d      	b.n	404a96 <__aeabi_dmul+0xde>
  404d7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404d7e:	ea94 0f0c 	teq	r4, ip
  404d82:	bf08      	it	eq
  404d84:	ea95 0f0c 	teqeq	r5, ip
  404d88:	f43f af3b 	beq.w	404c02 <__aeabi_dmul+0x24a>
  404d8c:	ea94 0f0c 	teq	r4, ip
  404d90:	d10a      	bne.n	404da8 <__aeabi_ddiv+0x19c>
  404d92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404d96:	f47f af34 	bne.w	404c02 <__aeabi_dmul+0x24a>
  404d9a:	ea95 0f0c 	teq	r5, ip
  404d9e:	f47f af25 	bne.w	404bec <__aeabi_dmul+0x234>
  404da2:	4610      	mov	r0, r2
  404da4:	4619      	mov	r1, r3
  404da6:	e72c      	b.n	404c02 <__aeabi_dmul+0x24a>
  404da8:	ea95 0f0c 	teq	r5, ip
  404dac:	d106      	bne.n	404dbc <__aeabi_ddiv+0x1b0>
  404dae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404db2:	f43f aefd 	beq.w	404bb0 <__aeabi_dmul+0x1f8>
  404db6:	4610      	mov	r0, r2
  404db8:	4619      	mov	r1, r3
  404dba:	e722      	b.n	404c02 <__aeabi_dmul+0x24a>
  404dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404dc0:	bf18      	it	ne
  404dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404dc6:	f47f aec5 	bne.w	404b54 <__aeabi_dmul+0x19c>
  404dca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404dce:	f47f af0d 	bne.w	404bec <__aeabi_dmul+0x234>
  404dd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404dd6:	f47f aeeb 	bne.w	404bb0 <__aeabi_dmul+0x1f8>
  404dda:	e712      	b.n	404c02 <__aeabi_dmul+0x24a>

00404ddc <__aeabi_d2uiz>:
  404ddc:	004a      	lsls	r2, r1, #1
  404dde:	d211      	bcs.n	404e04 <__aeabi_d2uiz+0x28>
  404de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404de4:	d211      	bcs.n	404e0a <__aeabi_d2uiz+0x2e>
  404de6:	d50d      	bpl.n	404e04 <__aeabi_d2uiz+0x28>
  404de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404df0:	d40e      	bmi.n	404e10 <__aeabi_d2uiz+0x34>
  404df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404dfe:	fa23 f002 	lsr.w	r0, r3, r2
  404e02:	4770      	bx	lr
  404e04:	f04f 0000 	mov.w	r0, #0
  404e08:	4770      	bx	lr
  404e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  404e0e:	d102      	bne.n	404e16 <__aeabi_d2uiz+0x3a>
  404e10:	f04f 30ff 	mov.w	r0, #4294967295
  404e14:	4770      	bx	lr
  404e16:	f04f 0000 	mov.w	r0, #0
  404e1a:	4770      	bx	lr

00404e1c <__aeabi_d2f>:
  404e1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404e20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404e24:	bf24      	itt	cs
  404e26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404e2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  404e2e:	d90d      	bls.n	404e4c <__aeabi_d2f+0x30>
  404e30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404e34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404e38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404e3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404e40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404e44:	bf08      	it	eq
  404e46:	f020 0001 	biceq.w	r0, r0, #1
  404e4a:	4770      	bx	lr
  404e4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404e50:	d121      	bne.n	404e96 <__aeabi_d2f+0x7a>
  404e52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404e56:	bfbc      	itt	lt
  404e58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  404e5c:	4770      	bxlt	lr
  404e5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404e62:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404e66:	f1c2 0218 	rsb	r2, r2, #24
  404e6a:	f1c2 0c20 	rsb	ip, r2, #32
  404e6e:	fa10 f30c 	lsls.w	r3, r0, ip
  404e72:	fa20 f002 	lsr.w	r0, r0, r2
  404e76:	bf18      	it	ne
  404e78:	f040 0001 	orrne.w	r0, r0, #1
  404e7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404e80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404e84:	fa03 fc0c 	lsl.w	ip, r3, ip
  404e88:	ea40 000c 	orr.w	r0, r0, ip
  404e8c:	fa23 f302 	lsr.w	r3, r3, r2
  404e90:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404e94:	e7cc      	b.n	404e30 <__aeabi_d2f+0x14>
  404e96:	ea7f 5362 	mvns.w	r3, r2, asr #21
  404e9a:	d107      	bne.n	404eac <__aeabi_d2f+0x90>
  404e9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404ea0:	bf1e      	ittt	ne
  404ea2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404ea6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  404eaa:	4770      	bxne	lr
  404eac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404eb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404eb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404eb8:	4770      	bx	lr
  404eba:	bf00      	nop

00404ebc <__aeabi_frsub>:
  404ebc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  404ec0:	e002      	b.n	404ec8 <__addsf3>
  404ec2:	bf00      	nop

00404ec4 <__aeabi_fsub>:
  404ec4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00404ec8 <__addsf3>:
  404ec8:	0042      	lsls	r2, r0, #1
  404eca:	bf1f      	itttt	ne
  404ecc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  404ed0:	ea92 0f03 	teqne	r2, r3
  404ed4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  404ed8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404edc:	d06a      	beq.n	404fb4 <__addsf3+0xec>
  404ede:	ea4f 6212 	mov.w	r2, r2, lsr #24
  404ee2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  404ee6:	bfc1      	itttt	gt
  404ee8:	18d2      	addgt	r2, r2, r3
  404eea:	4041      	eorgt	r1, r0
  404eec:	4048      	eorgt	r0, r1
  404eee:	4041      	eorgt	r1, r0
  404ef0:	bfb8      	it	lt
  404ef2:	425b      	neglt	r3, r3
  404ef4:	2b19      	cmp	r3, #25
  404ef6:	bf88      	it	hi
  404ef8:	4770      	bxhi	lr
  404efa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  404efe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404f02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  404f06:	bf18      	it	ne
  404f08:	4240      	negne	r0, r0
  404f0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404f0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  404f12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  404f16:	bf18      	it	ne
  404f18:	4249      	negne	r1, r1
  404f1a:	ea92 0f03 	teq	r2, r3
  404f1e:	d03f      	beq.n	404fa0 <__addsf3+0xd8>
  404f20:	f1a2 0201 	sub.w	r2, r2, #1
  404f24:	fa41 fc03 	asr.w	ip, r1, r3
  404f28:	eb10 000c 	adds.w	r0, r0, ip
  404f2c:	f1c3 0320 	rsb	r3, r3, #32
  404f30:	fa01 f103 	lsl.w	r1, r1, r3
  404f34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404f38:	d502      	bpl.n	404f40 <__addsf3+0x78>
  404f3a:	4249      	negs	r1, r1
  404f3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  404f40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404f44:	d313      	bcc.n	404f6e <__addsf3+0xa6>
  404f46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  404f4a:	d306      	bcc.n	404f5a <__addsf3+0x92>
  404f4c:	0840      	lsrs	r0, r0, #1
  404f4e:	ea4f 0131 	mov.w	r1, r1, rrx
  404f52:	f102 0201 	add.w	r2, r2, #1
  404f56:	2afe      	cmp	r2, #254	; 0xfe
  404f58:	d251      	bcs.n	404ffe <__addsf3+0x136>
  404f5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  404f5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404f62:	bf08      	it	eq
  404f64:	f020 0001 	biceq.w	r0, r0, #1
  404f68:	ea40 0003 	orr.w	r0, r0, r3
  404f6c:	4770      	bx	lr
  404f6e:	0049      	lsls	r1, r1, #1
  404f70:	eb40 0000 	adc.w	r0, r0, r0
  404f74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  404f78:	f1a2 0201 	sub.w	r2, r2, #1
  404f7c:	d1ed      	bne.n	404f5a <__addsf3+0x92>
  404f7e:	fab0 fc80 	clz	ip, r0
  404f82:	f1ac 0c08 	sub.w	ip, ip, #8
  404f86:	ebb2 020c 	subs.w	r2, r2, ip
  404f8a:	fa00 f00c 	lsl.w	r0, r0, ip
  404f8e:	bfaa      	itet	ge
  404f90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404f94:	4252      	neglt	r2, r2
  404f96:	4318      	orrge	r0, r3
  404f98:	bfbc      	itt	lt
  404f9a:	40d0      	lsrlt	r0, r2
  404f9c:	4318      	orrlt	r0, r3
  404f9e:	4770      	bx	lr
  404fa0:	f092 0f00 	teq	r2, #0
  404fa4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  404fa8:	bf06      	itte	eq
  404faa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  404fae:	3201      	addeq	r2, #1
  404fb0:	3b01      	subne	r3, #1
  404fb2:	e7b5      	b.n	404f20 <__addsf3+0x58>
  404fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404fbc:	bf18      	it	ne
  404fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404fc2:	d021      	beq.n	405008 <__addsf3+0x140>
  404fc4:	ea92 0f03 	teq	r2, r3
  404fc8:	d004      	beq.n	404fd4 <__addsf3+0x10c>
  404fca:	f092 0f00 	teq	r2, #0
  404fce:	bf08      	it	eq
  404fd0:	4608      	moveq	r0, r1
  404fd2:	4770      	bx	lr
  404fd4:	ea90 0f01 	teq	r0, r1
  404fd8:	bf1c      	itt	ne
  404fda:	2000      	movne	r0, #0
  404fdc:	4770      	bxne	lr
  404fde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  404fe2:	d104      	bne.n	404fee <__addsf3+0x126>
  404fe4:	0040      	lsls	r0, r0, #1
  404fe6:	bf28      	it	cs
  404fe8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  404fec:	4770      	bx	lr
  404fee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  404ff2:	bf3c      	itt	cc
  404ff4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  404ff8:	4770      	bxcc	lr
  404ffa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404ffe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405002:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405006:	4770      	bx	lr
  405008:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40500c:	bf16      	itet	ne
  40500e:	4608      	movne	r0, r1
  405010:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405014:	4601      	movne	r1, r0
  405016:	0242      	lsls	r2, r0, #9
  405018:	bf06      	itte	eq
  40501a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40501e:	ea90 0f01 	teqeq	r0, r1
  405022:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405026:	4770      	bx	lr

00405028 <__aeabi_ui2f>:
  405028:	f04f 0300 	mov.w	r3, #0
  40502c:	e004      	b.n	405038 <__aeabi_i2f+0x8>
  40502e:	bf00      	nop

00405030 <__aeabi_i2f>:
  405030:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405034:	bf48      	it	mi
  405036:	4240      	negmi	r0, r0
  405038:	ea5f 0c00 	movs.w	ip, r0
  40503c:	bf08      	it	eq
  40503e:	4770      	bxeq	lr
  405040:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405044:	4601      	mov	r1, r0
  405046:	f04f 0000 	mov.w	r0, #0
  40504a:	e01c      	b.n	405086 <__aeabi_l2f+0x2a>

0040504c <__aeabi_ul2f>:
  40504c:	ea50 0201 	orrs.w	r2, r0, r1
  405050:	bf08      	it	eq
  405052:	4770      	bxeq	lr
  405054:	f04f 0300 	mov.w	r3, #0
  405058:	e00a      	b.n	405070 <__aeabi_l2f+0x14>
  40505a:	bf00      	nop

0040505c <__aeabi_l2f>:
  40505c:	ea50 0201 	orrs.w	r2, r0, r1
  405060:	bf08      	it	eq
  405062:	4770      	bxeq	lr
  405064:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405068:	d502      	bpl.n	405070 <__aeabi_l2f+0x14>
  40506a:	4240      	negs	r0, r0
  40506c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405070:	ea5f 0c01 	movs.w	ip, r1
  405074:	bf02      	ittt	eq
  405076:	4684      	moveq	ip, r0
  405078:	4601      	moveq	r1, r0
  40507a:	2000      	moveq	r0, #0
  40507c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405080:	bf08      	it	eq
  405082:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405086:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40508a:	fabc f28c 	clz	r2, ip
  40508e:	3a08      	subs	r2, #8
  405090:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405094:	db10      	blt.n	4050b8 <__aeabi_l2f+0x5c>
  405096:	fa01 fc02 	lsl.w	ip, r1, r2
  40509a:	4463      	add	r3, ip
  40509c:	fa00 fc02 	lsl.w	ip, r0, r2
  4050a0:	f1c2 0220 	rsb	r2, r2, #32
  4050a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4050a8:	fa20 f202 	lsr.w	r2, r0, r2
  4050ac:	eb43 0002 	adc.w	r0, r3, r2
  4050b0:	bf08      	it	eq
  4050b2:	f020 0001 	biceq.w	r0, r0, #1
  4050b6:	4770      	bx	lr
  4050b8:	f102 0220 	add.w	r2, r2, #32
  4050bc:	fa01 fc02 	lsl.w	ip, r1, r2
  4050c0:	f1c2 0220 	rsb	r2, r2, #32
  4050c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4050c8:	fa21 f202 	lsr.w	r2, r1, r2
  4050cc:	eb43 0002 	adc.w	r0, r3, r2
  4050d0:	bf08      	it	eq
  4050d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4050d6:	4770      	bx	lr

004050d8 <__aeabi_fmul>:
  4050d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4050dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4050e0:	bf1e      	ittt	ne
  4050e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4050e6:	ea92 0f0c 	teqne	r2, ip
  4050ea:	ea93 0f0c 	teqne	r3, ip
  4050ee:	d06f      	beq.n	4051d0 <__aeabi_fmul+0xf8>
  4050f0:	441a      	add	r2, r3
  4050f2:	ea80 0c01 	eor.w	ip, r0, r1
  4050f6:	0240      	lsls	r0, r0, #9
  4050f8:	bf18      	it	ne
  4050fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4050fe:	d01e      	beq.n	40513e <__aeabi_fmul+0x66>
  405100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405104:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405108:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40510c:	fba0 3101 	umull	r3, r1, r0, r1
  405110:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405114:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405118:	bf3e      	ittt	cc
  40511a:	0049      	lslcc	r1, r1, #1
  40511c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405120:	005b      	lslcc	r3, r3, #1
  405122:	ea40 0001 	orr.w	r0, r0, r1
  405126:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40512a:	2afd      	cmp	r2, #253	; 0xfd
  40512c:	d81d      	bhi.n	40516a <__aeabi_fmul+0x92>
  40512e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405132:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405136:	bf08      	it	eq
  405138:	f020 0001 	biceq.w	r0, r0, #1
  40513c:	4770      	bx	lr
  40513e:	f090 0f00 	teq	r0, #0
  405142:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405146:	bf08      	it	eq
  405148:	0249      	lsleq	r1, r1, #9
  40514a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40514e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405152:	3a7f      	subs	r2, #127	; 0x7f
  405154:	bfc2      	ittt	gt
  405156:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40515a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40515e:	4770      	bxgt	lr
  405160:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405164:	f04f 0300 	mov.w	r3, #0
  405168:	3a01      	subs	r2, #1
  40516a:	dc5d      	bgt.n	405228 <__aeabi_fmul+0x150>
  40516c:	f112 0f19 	cmn.w	r2, #25
  405170:	bfdc      	itt	le
  405172:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405176:	4770      	bxle	lr
  405178:	f1c2 0200 	rsb	r2, r2, #0
  40517c:	0041      	lsls	r1, r0, #1
  40517e:	fa21 f102 	lsr.w	r1, r1, r2
  405182:	f1c2 0220 	rsb	r2, r2, #32
  405186:	fa00 fc02 	lsl.w	ip, r0, r2
  40518a:	ea5f 0031 	movs.w	r0, r1, rrx
  40518e:	f140 0000 	adc.w	r0, r0, #0
  405192:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405196:	bf08      	it	eq
  405198:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40519c:	4770      	bx	lr
  40519e:	f092 0f00 	teq	r2, #0
  4051a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4051a6:	bf02      	ittt	eq
  4051a8:	0040      	lsleq	r0, r0, #1
  4051aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4051ae:	3a01      	subeq	r2, #1
  4051b0:	d0f9      	beq.n	4051a6 <__aeabi_fmul+0xce>
  4051b2:	ea40 000c 	orr.w	r0, r0, ip
  4051b6:	f093 0f00 	teq	r3, #0
  4051ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4051be:	bf02      	ittt	eq
  4051c0:	0049      	lsleq	r1, r1, #1
  4051c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4051c6:	3b01      	subeq	r3, #1
  4051c8:	d0f9      	beq.n	4051be <__aeabi_fmul+0xe6>
  4051ca:	ea41 010c 	orr.w	r1, r1, ip
  4051ce:	e78f      	b.n	4050f0 <__aeabi_fmul+0x18>
  4051d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4051d4:	ea92 0f0c 	teq	r2, ip
  4051d8:	bf18      	it	ne
  4051da:	ea93 0f0c 	teqne	r3, ip
  4051de:	d00a      	beq.n	4051f6 <__aeabi_fmul+0x11e>
  4051e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4051e4:	bf18      	it	ne
  4051e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4051ea:	d1d8      	bne.n	40519e <__aeabi_fmul+0xc6>
  4051ec:	ea80 0001 	eor.w	r0, r0, r1
  4051f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4051f4:	4770      	bx	lr
  4051f6:	f090 0f00 	teq	r0, #0
  4051fa:	bf17      	itett	ne
  4051fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405200:	4608      	moveq	r0, r1
  405202:	f091 0f00 	teqne	r1, #0
  405206:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40520a:	d014      	beq.n	405236 <__aeabi_fmul+0x15e>
  40520c:	ea92 0f0c 	teq	r2, ip
  405210:	d101      	bne.n	405216 <__aeabi_fmul+0x13e>
  405212:	0242      	lsls	r2, r0, #9
  405214:	d10f      	bne.n	405236 <__aeabi_fmul+0x15e>
  405216:	ea93 0f0c 	teq	r3, ip
  40521a:	d103      	bne.n	405224 <__aeabi_fmul+0x14c>
  40521c:	024b      	lsls	r3, r1, #9
  40521e:	bf18      	it	ne
  405220:	4608      	movne	r0, r1
  405222:	d108      	bne.n	405236 <__aeabi_fmul+0x15e>
  405224:	ea80 0001 	eor.w	r0, r0, r1
  405228:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40522c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405230:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405234:	4770      	bx	lr
  405236:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40523a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40523e:	4770      	bx	lr

00405240 <__aeabi_fdiv>:
  405240:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405248:	bf1e      	ittt	ne
  40524a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40524e:	ea92 0f0c 	teqne	r2, ip
  405252:	ea93 0f0c 	teqne	r3, ip
  405256:	d069      	beq.n	40532c <__aeabi_fdiv+0xec>
  405258:	eba2 0203 	sub.w	r2, r2, r3
  40525c:	ea80 0c01 	eor.w	ip, r0, r1
  405260:	0249      	lsls	r1, r1, #9
  405262:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405266:	d037      	beq.n	4052d8 <__aeabi_fdiv+0x98>
  405268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40526c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405270:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405274:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405278:	428b      	cmp	r3, r1
  40527a:	bf38      	it	cc
  40527c:	005b      	lslcc	r3, r3, #1
  40527e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405282:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405286:	428b      	cmp	r3, r1
  405288:	bf24      	itt	cs
  40528a:	1a5b      	subcs	r3, r3, r1
  40528c:	ea40 000c 	orrcs.w	r0, r0, ip
  405290:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405294:	bf24      	itt	cs
  405296:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40529a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40529e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4052a2:	bf24      	itt	cs
  4052a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4052a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4052ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4052b0:	bf24      	itt	cs
  4052b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4052b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4052ba:	011b      	lsls	r3, r3, #4
  4052bc:	bf18      	it	ne
  4052be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4052c2:	d1e0      	bne.n	405286 <__aeabi_fdiv+0x46>
  4052c4:	2afd      	cmp	r2, #253	; 0xfd
  4052c6:	f63f af50 	bhi.w	40516a <__aeabi_fmul+0x92>
  4052ca:	428b      	cmp	r3, r1
  4052cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4052d0:	bf08      	it	eq
  4052d2:	f020 0001 	biceq.w	r0, r0, #1
  4052d6:	4770      	bx	lr
  4052d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4052dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4052e0:	327f      	adds	r2, #127	; 0x7f
  4052e2:	bfc2      	ittt	gt
  4052e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4052e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4052ec:	4770      	bxgt	lr
  4052ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4052f2:	f04f 0300 	mov.w	r3, #0
  4052f6:	3a01      	subs	r2, #1
  4052f8:	e737      	b.n	40516a <__aeabi_fmul+0x92>
  4052fa:	f092 0f00 	teq	r2, #0
  4052fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405302:	bf02      	ittt	eq
  405304:	0040      	lsleq	r0, r0, #1
  405306:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40530a:	3a01      	subeq	r2, #1
  40530c:	d0f9      	beq.n	405302 <__aeabi_fdiv+0xc2>
  40530e:	ea40 000c 	orr.w	r0, r0, ip
  405312:	f093 0f00 	teq	r3, #0
  405316:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40531a:	bf02      	ittt	eq
  40531c:	0049      	lsleq	r1, r1, #1
  40531e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405322:	3b01      	subeq	r3, #1
  405324:	d0f9      	beq.n	40531a <__aeabi_fdiv+0xda>
  405326:	ea41 010c 	orr.w	r1, r1, ip
  40532a:	e795      	b.n	405258 <__aeabi_fdiv+0x18>
  40532c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405330:	ea92 0f0c 	teq	r2, ip
  405334:	d108      	bne.n	405348 <__aeabi_fdiv+0x108>
  405336:	0242      	lsls	r2, r0, #9
  405338:	f47f af7d 	bne.w	405236 <__aeabi_fmul+0x15e>
  40533c:	ea93 0f0c 	teq	r3, ip
  405340:	f47f af70 	bne.w	405224 <__aeabi_fmul+0x14c>
  405344:	4608      	mov	r0, r1
  405346:	e776      	b.n	405236 <__aeabi_fmul+0x15e>
  405348:	ea93 0f0c 	teq	r3, ip
  40534c:	d104      	bne.n	405358 <__aeabi_fdiv+0x118>
  40534e:	024b      	lsls	r3, r1, #9
  405350:	f43f af4c 	beq.w	4051ec <__aeabi_fmul+0x114>
  405354:	4608      	mov	r0, r1
  405356:	e76e      	b.n	405236 <__aeabi_fmul+0x15e>
  405358:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40535c:	bf18      	it	ne
  40535e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405362:	d1ca      	bne.n	4052fa <__aeabi_fdiv+0xba>
  405364:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405368:	f47f af5c 	bne.w	405224 <__aeabi_fmul+0x14c>
  40536c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405370:	f47f af3c 	bne.w	4051ec <__aeabi_fmul+0x114>
  405374:	e75f      	b.n	405236 <__aeabi_fmul+0x15e>
  405376:	bf00      	nop

00405378 <__gesf2>:
  405378:	f04f 3cff 	mov.w	ip, #4294967295
  40537c:	e006      	b.n	40538c <__cmpsf2+0x4>
  40537e:	bf00      	nop

00405380 <__lesf2>:
  405380:	f04f 0c01 	mov.w	ip, #1
  405384:	e002      	b.n	40538c <__cmpsf2+0x4>
  405386:	bf00      	nop

00405388 <__cmpsf2>:
  405388:	f04f 0c01 	mov.w	ip, #1
  40538c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405390:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405394:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405398:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40539c:	bf18      	it	ne
  40539e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4053a2:	d011      	beq.n	4053c8 <__cmpsf2+0x40>
  4053a4:	b001      	add	sp, #4
  4053a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4053aa:	bf18      	it	ne
  4053ac:	ea90 0f01 	teqne	r0, r1
  4053b0:	bf58      	it	pl
  4053b2:	ebb2 0003 	subspl.w	r0, r2, r3
  4053b6:	bf88      	it	hi
  4053b8:	17c8      	asrhi	r0, r1, #31
  4053ba:	bf38      	it	cc
  4053bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4053c0:	bf18      	it	ne
  4053c2:	f040 0001 	orrne.w	r0, r0, #1
  4053c6:	4770      	bx	lr
  4053c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4053cc:	d102      	bne.n	4053d4 <__cmpsf2+0x4c>
  4053ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4053d2:	d105      	bne.n	4053e0 <__cmpsf2+0x58>
  4053d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4053d8:	d1e4      	bne.n	4053a4 <__cmpsf2+0x1c>
  4053da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4053de:	d0e1      	beq.n	4053a4 <__cmpsf2+0x1c>
  4053e0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4053e4:	4770      	bx	lr
  4053e6:	bf00      	nop

004053e8 <__aeabi_cfrcmple>:
  4053e8:	4684      	mov	ip, r0
  4053ea:	4608      	mov	r0, r1
  4053ec:	4661      	mov	r1, ip
  4053ee:	e7ff      	b.n	4053f0 <__aeabi_cfcmpeq>

004053f0 <__aeabi_cfcmpeq>:
  4053f0:	b50f      	push	{r0, r1, r2, r3, lr}
  4053f2:	f7ff ffc9 	bl	405388 <__cmpsf2>
  4053f6:	2800      	cmp	r0, #0
  4053f8:	bf48      	it	mi
  4053fa:	f110 0f00 	cmnmi.w	r0, #0
  4053fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405400 <__aeabi_fcmpeq>:
  405400:	f84d ed08 	str.w	lr, [sp, #-8]!
  405404:	f7ff fff4 	bl	4053f0 <__aeabi_cfcmpeq>
  405408:	bf0c      	ite	eq
  40540a:	2001      	moveq	r0, #1
  40540c:	2000      	movne	r0, #0
  40540e:	f85d fb08 	ldr.w	pc, [sp], #8
  405412:	bf00      	nop

00405414 <__aeabi_fcmplt>:
  405414:	f84d ed08 	str.w	lr, [sp, #-8]!
  405418:	f7ff ffea 	bl	4053f0 <__aeabi_cfcmpeq>
  40541c:	bf34      	ite	cc
  40541e:	2001      	movcc	r0, #1
  405420:	2000      	movcs	r0, #0
  405422:	f85d fb08 	ldr.w	pc, [sp], #8
  405426:	bf00      	nop

00405428 <__aeabi_fcmple>:
  405428:	f84d ed08 	str.w	lr, [sp, #-8]!
  40542c:	f7ff ffe0 	bl	4053f0 <__aeabi_cfcmpeq>
  405430:	bf94      	ite	ls
  405432:	2001      	movls	r0, #1
  405434:	2000      	movhi	r0, #0
  405436:	f85d fb08 	ldr.w	pc, [sp], #8
  40543a:	bf00      	nop

0040543c <__aeabi_fcmpge>:
  40543c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405440:	f7ff ffd2 	bl	4053e8 <__aeabi_cfrcmple>
  405444:	bf94      	ite	ls
  405446:	2001      	movls	r0, #1
  405448:	2000      	movhi	r0, #0
  40544a:	f85d fb08 	ldr.w	pc, [sp], #8
  40544e:	bf00      	nop

00405450 <__aeabi_fcmpgt>:
  405450:	f84d ed08 	str.w	lr, [sp, #-8]!
  405454:	f7ff ffc8 	bl	4053e8 <__aeabi_cfrcmple>
  405458:	bf34      	ite	cc
  40545a:	2001      	movcc	r0, #1
  40545c:	2000      	movcs	r0, #0
  40545e:	f85d fb08 	ldr.w	pc, [sp], #8
  405462:	bf00      	nop

00405464 <__aeabi_fcmpun>:
  405464:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405468:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40546c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405470:	d102      	bne.n	405478 <__aeabi_fcmpun+0x14>
  405472:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405476:	d108      	bne.n	40548a <__aeabi_fcmpun+0x26>
  405478:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40547c:	d102      	bne.n	405484 <__aeabi_fcmpun+0x20>
  40547e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405482:	d102      	bne.n	40548a <__aeabi_fcmpun+0x26>
  405484:	f04f 0000 	mov.w	r0, #0
  405488:	4770      	bx	lr
  40548a:	f04f 0001 	mov.w	r0, #1
  40548e:	4770      	bx	lr

00405490 <__errno>:
  405490:	4b01      	ldr	r3, [pc, #4]	; (405498 <__errno+0x8>)
  405492:	6818      	ldr	r0, [r3, #0]
  405494:	4770      	bx	lr
  405496:	bf00      	nop
  405498:	20000020 	.word	0x20000020

0040549c <__libc_init_array>:
  40549c:	b570      	push	{r4, r5, r6, lr}
  40549e:	4e0f      	ldr	r6, [pc, #60]	; (4054dc <__libc_init_array+0x40>)
  4054a0:	4d0f      	ldr	r5, [pc, #60]	; (4054e0 <__libc_init_array+0x44>)
  4054a2:	1b76      	subs	r6, r6, r5
  4054a4:	10b6      	asrs	r6, r6, #2
  4054a6:	bf18      	it	ne
  4054a8:	2400      	movne	r4, #0
  4054aa:	d005      	beq.n	4054b8 <__libc_init_array+0x1c>
  4054ac:	3401      	adds	r4, #1
  4054ae:	f855 3b04 	ldr.w	r3, [r5], #4
  4054b2:	4798      	blx	r3
  4054b4:	42a6      	cmp	r6, r4
  4054b6:	d1f9      	bne.n	4054ac <__libc_init_array+0x10>
  4054b8:	4e0a      	ldr	r6, [pc, #40]	; (4054e4 <__libc_init_array+0x48>)
  4054ba:	4d0b      	ldr	r5, [pc, #44]	; (4054e8 <__libc_init_array+0x4c>)
  4054bc:	1b76      	subs	r6, r6, r5
  4054be:	f003 fa6b 	bl	408998 <_init>
  4054c2:	10b6      	asrs	r6, r6, #2
  4054c4:	bf18      	it	ne
  4054c6:	2400      	movne	r4, #0
  4054c8:	d006      	beq.n	4054d8 <__libc_init_array+0x3c>
  4054ca:	3401      	adds	r4, #1
  4054cc:	f855 3b04 	ldr.w	r3, [r5], #4
  4054d0:	4798      	blx	r3
  4054d2:	42a6      	cmp	r6, r4
  4054d4:	d1f9      	bne.n	4054ca <__libc_init_array+0x2e>
  4054d6:	bd70      	pop	{r4, r5, r6, pc}
  4054d8:	bd70      	pop	{r4, r5, r6, pc}
  4054da:	bf00      	nop
  4054dc:	004089a4 	.word	0x004089a4
  4054e0:	004089a4 	.word	0x004089a4
  4054e4:	004089ac 	.word	0x004089ac
  4054e8:	004089a4 	.word	0x004089a4

004054ec <iprintf>:
  4054ec:	b40f      	push	{r0, r1, r2, r3}
  4054ee:	b500      	push	{lr}
  4054f0:	4907      	ldr	r1, [pc, #28]	; (405510 <iprintf+0x24>)
  4054f2:	b083      	sub	sp, #12
  4054f4:	ab04      	add	r3, sp, #16
  4054f6:	6808      	ldr	r0, [r1, #0]
  4054f8:	f853 2b04 	ldr.w	r2, [r3], #4
  4054fc:	6881      	ldr	r1, [r0, #8]
  4054fe:	9301      	str	r3, [sp, #4]
  405500:	f000 facc 	bl	405a9c <_vfiprintf_r>
  405504:	b003      	add	sp, #12
  405506:	f85d eb04 	ldr.w	lr, [sp], #4
  40550a:	b004      	add	sp, #16
  40550c:	4770      	bx	lr
  40550e:	bf00      	nop
  405510:	20000020 	.word	0x20000020

00405514 <memcpy>:
  405514:	4684      	mov	ip, r0
  405516:	ea41 0300 	orr.w	r3, r1, r0
  40551a:	f013 0303 	ands.w	r3, r3, #3
  40551e:	d16d      	bne.n	4055fc <memcpy+0xe8>
  405520:	3a40      	subs	r2, #64	; 0x40
  405522:	d341      	bcc.n	4055a8 <memcpy+0x94>
  405524:	f851 3b04 	ldr.w	r3, [r1], #4
  405528:	f840 3b04 	str.w	r3, [r0], #4
  40552c:	f851 3b04 	ldr.w	r3, [r1], #4
  405530:	f840 3b04 	str.w	r3, [r0], #4
  405534:	f851 3b04 	ldr.w	r3, [r1], #4
  405538:	f840 3b04 	str.w	r3, [r0], #4
  40553c:	f851 3b04 	ldr.w	r3, [r1], #4
  405540:	f840 3b04 	str.w	r3, [r0], #4
  405544:	f851 3b04 	ldr.w	r3, [r1], #4
  405548:	f840 3b04 	str.w	r3, [r0], #4
  40554c:	f851 3b04 	ldr.w	r3, [r1], #4
  405550:	f840 3b04 	str.w	r3, [r0], #4
  405554:	f851 3b04 	ldr.w	r3, [r1], #4
  405558:	f840 3b04 	str.w	r3, [r0], #4
  40555c:	f851 3b04 	ldr.w	r3, [r1], #4
  405560:	f840 3b04 	str.w	r3, [r0], #4
  405564:	f851 3b04 	ldr.w	r3, [r1], #4
  405568:	f840 3b04 	str.w	r3, [r0], #4
  40556c:	f851 3b04 	ldr.w	r3, [r1], #4
  405570:	f840 3b04 	str.w	r3, [r0], #4
  405574:	f851 3b04 	ldr.w	r3, [r1], #4
  405578:	f840 3b04 	str.w	r3, [r0], #4
  40557c:	f851 3b04 	ldr.w	r3, [r1], #4
  405580:	f840 3b04 	str.w	r3, [r0], #4
  405584:	f851 3b04 	ldr.w	r3, [r1], #4
  405588:	f840 3b04 	str.w	r3, [r0], #4
  40558c:	f851 3b04 	ldr.w	r3, [r1], #4
  405590:	f840 3b04 	str.w	r3, [r0], #4
  405594:	f851 3b04 	ldr.w	r3, [r1], #4
  405598:	f840 3b04 	str.w	r3, [r0], #4
  40559c:	f851 3b04 	ldr.w	r3, [r1], #4
  4055a0:	f840 3b04 	str.w	r3, [r0], #4
  4055a4:	3a40      	subs	r2, #64	; 0x40
  4055a6:	d2bd      	bcs.n	405524 <memcpy+0x10>
  4055a8:	3230      	adds	r2, #48	; 0x30
  4055aa:	d311      	bcc.n	4055d0 <memcpy+0xbc>
  4055ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4055b0:	f840 3b04 	str.w	r3, [r0], #4
  4055b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4055b8:	f840 3b04 	str.w	r3, [r0], #4
  4055bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4055c0:	f840 3b04 	str.w	r3, [r0], #4
  4055c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4055c8:	f840 3b04 	str.w	r3, [r0], #4
  4055cc:	3a10      	subs	r2, #16
  4055ce:	d2ed      	bcs.n	4055ac <memcpy+0x98>
  4055d0:	320c      	adds	r2, #12
  4055d2:	d305      	bcc.n	4055e0 <memcpy+0xcc>
  4055d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4055d8:	f840 3b04 	str.w	r3, [r0], #4
  4055dc:	3a04      	subs	r2, #4
  4055de:	d2f9      	bcs.n	4055d4 <memcpy+0xc0>
  4055e0:	3204      	adds	r2, #4
  4055e2:	d008      	beq.n	4055f6 <memcpy+0xe2>
  4055e4:	07d2      	lsls	r2, r2, #31
  4055e6:	bf1c      	itt	ne
  4055e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4055ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4055f0:	d301      	bcc.n	4055f6 <memcpy+0xe2>
  4055f2:	880b      	ldrh	r3, [r1, #0]
  4055f4:	8003      	strh	r3, [r0, #0]
  4055f6:	4660      	mov	r0, ip
  4055f8:	4770      	bx	lr
  4055fa:	bf00      	nop
  4055fc:	2a08      	cmp	r2, #8
  4055fe:	d313      	bcc.n	405628 <memcpy+0x114>
  405600:	078b      	lsls	r3, r1, #30
  405602:	d08d      	beq.n	405520 <memcpy+0xc>
  405604:	f010 0303 	ands.w	r3, r0, #3
  405608:	d08a      	beq.n	405520 <memcpy+0xc>
  40560a:	f1c3 0304 	rsb	r3, r3, #4
  40560e:	1ad2      	subs	r2, r2, r3
  405610:	07db      	lsls	r3, r3, #31
  405612:	bf1c      	itt	ne
  405614:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405618:	f800 3b01 	strbne.w	r3, [r0], #1
  40561c:	d380      	bcc.n	405520 <memcpy+0xc>
  40561e:	f831 3b02 	ldrh.w	r3, [r1], #2
  405622:	f820 3b02 	strh.w	r3, [r0], #2
  405626:	e77b      	b.n	405520 <memcpy+0xc>
  405628:	3a04      	subs	r2, #4
  40562a:	d3d9      	bcc.n	4055e0 <memcpy+0xcc>
  40562c:	3a01      	subs	r2, #1
  40562e:	f811 3b01 	ldrb.w	r3, [r1], #1
  405632:	f800 3b01 	strb.w	r3, [r0], #1
  405636:	d2f9      	bcs.n	40562c <memcpy+0x118>
  405638:	780b      	ldrb	r3, [r1, #0]
  40563a:	7003      	strb	r3, [r0, #0]
  40563c:	784b      	ldrb	r3, [r1, #1]
  40563e:	7043      	strb	r3, [r0, #1]
  405640:	788b      	ldrb	r3, [r1, #2]
  405642:	7083      	strb	r3, [r0, #2]
  405644:	4660      	mov	r0, ip
  405646:	4770      	bx	lr

00405648 <memset>:
  405648:	b470      	push	{r4, r5, r6}
  40564a:	0786      	lsls	r6, r0, #30
  40564c:	d046      	beq.n	4056dc <memset+0x94>
  40564e:	1e54      	subs	r4, r2, #1
  405650:	2a00      	cmp	r2, #0
  405652:	d041      	beq.n	4056d8 <memset+0x90>
  405654:	b2ca      	uxtb	r2, r1
  405656:	4603      	mov	r3, r0
  405658:	e002      	b.n	405660 <memset+0x18>
  40565a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40565e:	d33b      	bcc.n	4056d8 <memset+0x90>
  405660:	f803 2b01 	strb.w	r2, [r3], #1
  405664:	079d      	lsls	r5, r3, #30
  405666:	d1f8      	bne.n	40565a <memset+0x12>
  405668:	2c03      	cmp	r4, #3
  40566a:	d92e      	bls.n	4056ca <memset+0x82>
  40566c:	b2cd      	uxtb	r5, r1
  40566e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405672:	2c0f      	cmp	r4, #15
  405674:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405678:	d919      	bls.n	4056ae <memset+0x66>
  40567a:	f103 0210 	add.w	r2, r3, #16
  40567e:	4626      	mov	r6, r4
  405680:	3e10      	subs	r6, #16
  405682:	2e0f      	cmp	r6, #15
  405684:	f842 5c10 	str.w	r5, [r2, #-16]
  405688:	f842 5c0c 	str.w	r5, [r2, #-12]
  40568c:	f842 5c08 	str.w	r5, [r2, #-8]
  405690:	f842 5c04 	str.w	r5, [r2, #-4]
  405694:	f102 0210 	add.w	r2, r2, #16
  405698:	d8f2      	bhi.n	405680 <memset+0x38>
  40569a:	f1a4 0210 	sub.w	r2, r4, #16
  40569e:	f022 020f 	bic.w	r2, r2, #15
  4056a2:	f004 040f 	and.w	r4, r4, #15
  4056a6:	3210      	adds	r2, #16
  4056a8:	2c03      	cmp	r4, #3
  4056aa:	4413      	add	r3, r2
  4056ac:	d90d      	bls.n	4056ca <memset+0x82>
  4056ae:	461e      	mov	r6, r3
  4056b0:	4622      	mov	r2, r4
  4056b2:	3a04      	subs	r2, #4
  4056b4:	2a03      	cmp	r2, #3
  4056b6:	f846 5b04 	str.w	r5, [r6], #4
  4056ba:	d8fa      	bhi.n	4056b2 <memset+0x6a>
  4056bc:	1f22      	subs	r2, r4, #4
  4056be:	f022 0203 	bic.w	r2, r2, #3
  4056c2:	3204      	adds	r2, #4
  4056c4:	4413      	add	r3, r2
  4056c6:	f004 0403 	and.w	r4, r4, #3
  4056ca:	b12c      	cbz	r4, 4056d8 <memset+0x90>
  4056cc:	b2c9      	uxtb	r1, r1
  4056ce:	441c      	add	r4, r3
  4056d0:	f803 1b01 	strb.w	r1, [r3], #1
  4056d4:	429c      	cmp	r4, r3
  4056d6:	d1fb      	bne.n	4056d0 <memset+0x88>
  4056d8:	bc70      	pop	{r4, r5, r6}
  4056da:	4770      	bx	lr
  4056dc:	4614      	mov	r4, r2
  4056de:	4603      	mov	r3, r0
  4056e0:	e7c2      	b.n	405668 <memset+0x20>
  4056e2:	bf00      	nop

004056e4 <_puts_r>:
  4056e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4056e6:	4605      	mov	r5, r0
  4056e8:	b089      	sub	sp, #36	; 0x24
  4056ea:	4608      	mov	r0, r1
  4056ec:	460c      	mov	r4, r1
  4056ee:	f000 f927 	bl	405940 <strlen>
  4056f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4056f4:	4f21      	ldr	r7, [pc, #132]	; (40577c <_puts_r+0x98>)
  4056f6:	9404      	str	r4, [sp, #16]
  4056f8:	2601      	movs	r6, #1
  4056fa:	1c44      	adds	r4, r0, #1
  4056fc:	a904      	add	r1, sp, #16
  4056fe:	2202      	movs	r2, #2
  405700:	9403      	str	r4, [sp, #12]
  405702:	9005      	str	r0, [sp, #20]
  405704:	68ac      	ldr	r4, [r5, #8]
  405706:	9706      	str	r7, [sp, #24]
  405708:	9607      	str	r6, [sp, #28]
  40570a:	9101      	str	r1, [sp, #4]
  40570c:	9202      	str	r2, [sp, #8]
  40570e:	b353      	cbz	r3, 405766 <_puts_r+0x82>
  405710:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405712:	f013 0f01 	tst.w	r3, #1
  405716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40571a:	b29a      	uxth	r2, r3
  40571c:	d101      	bne.n	405722 <_puts_r+0x3e>
  40571e:	0590      	lsls	r0, r2, #22
  405720:	d525      	bpl.n	40576e <_puts_r+0x8a>
  405722:	0491      	lsls	r1, r2, #18
  405724:	d406      	bmi.n	405734 <_puts_r+0x50>
  405726:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40572c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405730:	81a3      	strh	r3, [r4, #12]
  405732:	6662      	str	r2, [r4, #100]	; 0x64
  405734:	4628      	mov	r0, r5
  405736:	aa01      	add	r2, sp, #4
  405738:	4621      	mov	r1, r4
  40573a:	f001 fbb1 	bl	406ea0 <__sfvwrite_r>
  40573e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405740:	2800      	cmp	r0, #0
  405742:	bf0c      	ite	eq
  405744:	250a      	moveq	r5, #10
  405746:	f04f 35ff 	movne.w	r5, #4294967295
  40574a:	07da      	lsls	r2, r3, #31
  40574c:	d402      	bmi.n	405754 <_puts_r+0x70>
  40574e:	89a3      	ldrh	r3, [r4, #12]
  405750:	059b      	lsls	r3, r3, #22
  405752:	d502      	bpl.n	40575a <_puts_r+0x76>
  405754:	4628      	mov	r0, r5
  405756:	b009      	add	sp, #36	; 0x24
  405758:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40575a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40575c:	f001 fd56 	bl	40720c <__retarget_lock_release_recursive>
  405760:	4628      	mov	r0, r5
  405762:	b009      	add	sp, #36	; 0x24
  405764:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405766:	4628      	mov	r0, r5
  405768:	f001 f98e 	bl	406a88 <__sinit>
  40576c:	e7d0      	b.n	405710 <_puts_r+0x2c>
  40576e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405770:	f001 fd4a 	bl	407208 <__retarget_lock_acquire_recursive>
  405774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405778:	b29a      	uxth	r2, r3
  40577a:	e7d2      	b.n	405722 <_puts_r+0x3e>
  40577c:	00408830 	.word	0x00408830

00405780 <puts>:
  405780:	4b02      	ldr	r3, [pc, #8]	; (40578c <puts+0xc>)
  405782:	4601      	mov	r1, r0
  405784:	6818      	ldr	r0, [r3, #0]
  405786:	f7ff bfad 	b.w	4056e4 <_puts_r>
  40578a:	bf00      	nop
  40578c:	20000020 	.word	0x20000020

00405790 <setbuf>:
  405790:	2900      	cmp	r1, #0
  405792:	bf0c      	ite	eq
  405794:	2202      	moveq	r2, #2
  405796:	2200      	movne	r2, #0
  405798:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40579c:	f000 b800 	b.w	4057a0 <setvbuf>

004057a0 <setvbuf>:
  4057a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4057a4:	4c61      	ldr	r4, [pc, #388]	; (40592c <setvbuf+0x18c>)
  4057a6:	6825      	ldr	r5, [r4, #0]
  4057a8:	b083      	sub	sp, #12
  4057aa:	4604      	mov	r4, r0
  4057ac:	460f      	mov	r7, r1
  4057ae:	4690      	mov	r8, r2
  4057b0:	461e      	mov	r6, r3
  4057b2:	b115      	cbz	r5, 4057ba <setvbuf+0x1a>
  4057b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4057b6:	2b00      	cmp	r3, #0
  4057b8:	d064      	beq.n	405884 <setvbuf+0xe4>
  4057ba:	f1b8 0f02 	cmp.w	r8, #2
  4057be:	d006      	beq.n	4057ce <setvbuf+0x2e>
  4057c0:	f1b8 0f01 	cmp.w	r8, #1
  4057c4:	f200 809f 	bhi.w	405906 <setvbuf+0x166>
  4057c8:	2e00      	cmp	r6, #0
  4057ca:	f2c0 809c 	blt.w	405906 <setvbuf+0x166>
  4057ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4057d0:	07d8      	lsls	r0, r3, #31
  4057d2:	d534      	bpl.n	40583e <setvbuf+0x9e>
  4057d4:	4621      	mov	r1, r4
  4057d6:	4628      	mov	r0, r5
  4057d8:	f001 f8fe 	bl	4069d8 <_fflush_r>
  4057dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4057de:	b141      	cbz	r1, 4057f2 <setvbuf+0x52>
  4057e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4057e4:	4299      	cmp	r1, r3
  4057e6:	d002      	beq.n	4057ee <setvbuf+0x4e>
  4057e8:	4628      	mov	r0, r5
  4057ea:	f001 fa73 	bl	406cd4 <_free_r>
  4057ee:	2300      	movs	r3, #0
  4057f0:	6323      	str	r3, [r4, #48]	; 0x30
  4057f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4057f6:	2200      	movs	r2, #0
  4057f8:	61a2      	str	r2, [r4, #24]
  4057fa:	6062      	str	r2, [r4, #4]
  4057fc:	061a      	lsls	r2, r3, #24
  4057fe:	d43a      	bmi.n	405876 <setvbuf+0xd6>
  405800:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405804:	f023 0303 	bic.w	r3, r3, #3
  405808:	f1b8 0f02 	cmp.w	r8, #2
  40580c:	81a3      	strh	r3, [r4, #12]
  40580e:	d01d      	beq.n	40584c <setvbuf+0xac>
  405810:	ab01      	add	r3, sp, #4
  405812:	466a      	mov	r2, sp
  405814:	4621      	mov	r1, r4
  405816:	4628      	mov	r0, r5
  405818:	f001 fcfa 	bl	407210 <__swhatbuf_r>
  40581c:	89a3      	ldrh	r3, [r4, #12]
  40581e:	4318      	orrs	r0, r3
  405820:	81a0      	strh	r0, [r4, #12]
  405822:	2e00      	cmp	r6, #0
  405824:	d132      	bne.n	40588c <setvbuf+0xec>
  405826:	9e00      	ldr	r6, [sp, #0]
  405828:	4630      	mov	r0, r6
  40582a:	f001 fd69 	bl	407300 <malloc>
  40582e:	4607      	mov	r7, r0
  405830:	2800      	cmp	r0, #0
  405832:	d06b      	beq.n	40590c <setvbuf+0x16c>
  405834:	89a3      	ldrh	r3, [r4, #12]
  405836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40583a:	81a3      	strh	r3, [r4, #12]
  40583c:	e028      	b.n	405890 <setvbuf+0xf0>
  40583e:	89a3      	ldrh	r3, [r4, #12]
  405840:	0599      	lsls	r1, r3, #22
  405842:	d4c7      	bmi.n	4057d4 <setvbuf+0x34>
  405844:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405846:	f001 fcdf 	bl	407208 <__retarget_lock_acquire_recursive>
  40584a:	e7c3      	b.n	4057d4 <setvbuf+0x34>
  40584c:	2500      	movs	r5, #0
  40584e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405850:	2600      	movs	r6, #0
  405852:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405856:	f043 0302 	orr.w	r3, r3, #2
  40585a:	2001      	movs	r0, #1
  40585c:	60a6      	str	r6, [r4, #8]
  40585e:	07ce      	lsls	r6, r1, #31
  405860:	81a3      	strh	r3, [r4, #12]
  405862:	6022      	str	r2, [r4, #0]
  405864:	6122      	str	r2, [r4, #16]
  405866:	6160      	str	r0, [r4, #20]
  405868:	d401      	bmi.n	40586e <setvbuf+0xce>
  40586a:	0598      	lsls	r0, r3, #22
  40586c:	d53e      	bpl.n	4058ec <setvbuf+0x14c>
  40586e:	4628      	mov	r0, r5
  405870:	b003      	add	sp, #12
  405872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405876:	6921      	ldr	r1, [r4, #16]
  405878:	4628      	mov	r0, r5
  40587a:	f001 fa2b 	bl	406cd4 <_free_r>
  40587e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405882:	e7bd      	b.n	405800 <setvbuf+0x60>
  405884:	4628      	mov	r0, r5
  405886:	f001 f8ff 	bl	406a88 <__sinit>
  40588a:	e796      	b.n	4057ba <setvbuf+0x1a>
  40588c:	2f00      	cmp	r7, #0
  40588e:	d0cb      	beq.n	405828 <setvbuf+0x88>
  405890:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405892:	2b00      	cmp	r3, #0
  405894:	d033      	beq.n	4058fe <setvbuf+0x15e>
  405896:	9b00      	ldr	r3, [sp, #0]
  405898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40589c:	6027      	str	r7, [r4, #0]
  40589e:	429e      	cmp	r6, r3
  4058a0:	bf1c      	itt	ne
  4058a2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4058a6:	81a2      	strhne	r2, [r4, #12]
  4058a8:	f1b8 0f01 	cmp.w	r8, #1
  4058ac:	bf04      	itt	eq
  4058ae:	f042 0201 	orreq.w	r2, r2, #1
  4058b2:	81a2      	strheq	r2, [r4, #12]
  4058b4:	b292      	uxth	r2, r2
  4058b6:	f012 0308 	ands.w	r3, r2, #8
  4058ba:	6127      	str	r7, [r4, #16]
  4058bc:	6166      	str	r6, [r4, #20]
  4058be:	d00e      	beq.n	4058de <setvbuf+0x13e>
  4058c0:	07d1      	lsls	r1, r2, #31
  4058c2:	d51a      	bpl.n	4058fa <setvbuf+0x15a>
  4058c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4058c6:	4276      	negs	r6, r6
  4058c8:	2300      	movs	r3, #0
  4058ca:	f015 0501 	ands.w	r5, r5, #1
  4058ce:	61a6      	str	r6, [r4, #24]
  4058d0:	60a3      	str	r3, [r4, #8]
  4058d2:	d009      	beq.n	4058e8 <setvbuf+0x148>
  4058d4:	2500      	movs	r5, #0
  4058d6:	4628      	mov	r0, r5
  4058d8:	b003      	add	sp, #12
  4058da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4058de:	60a3      	str	r3, [r4, #8]
  4058e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4058e2:	f015 0501 	ands.w	r5, r5, #1
  4058e6:	d1f5      	bne.n	4058d4 <setvbuf+0x134>
  4058e8:	0593      	lsls	r3, r2, #22
  4058ea:	d4c0      	bmi.n	40586e <setvbuf+0xce>
  4058ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4058ee:	f001 fc8d 	bl	40720c <__retarget_lock_release_recursive>
  4058f2:	4628      	mov	r0, r5
  4058f4:	b003      	add	sp, #12
  4058f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4058fa:	60a6      	str	r6, [r4, #8]
  4058fc:	e7f0      	b.n	4058e0 <setvbuf+0x140>
  4058fe:	4628      	mov	r0, r5
  405900:	f001 f8c2 	bl	406a88 <__sinit>
  405904:	e7c7      	b.n	405896 <setvbuf+0xf6>
  405906:	f04f 35ff 	mov.w	r5, #4294967295
  40590a:	e7b0      	b.n	40586e <setvbuf+0xce>
  40590c:	f8dd 9000 	ldr.w	r9, [sp]
  405910:	45b1      	cmp	r9, r6
  405912:	d004      	beq.n	40591e <setvbuf+0x17e>
  405914:	4648      	mov	r0, r9
  405916:	f001 fcf3 	bl	407300 <malloc>
  40591a:	4607      	mov	r7, r0
  40591c:	b920      	cbnz	r0, 405928 <setvbuf+0x188>
  40591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405922:	f04f 35ff 	mov.w	r5, #4294967295
  405926:	e792      	b.n	40584e <setvbuf+0xae>
  405928:	464e      	mov	r6, r9
  40592a:	e783      	b.n	405834 <setvbuf+0x94>
  40592c:	20000020 	.word	0x20000020
	...

00405940 <strlen>:
  405940:	f890 f000 	pld	[r0]
  405944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405948:	f020 0107 	bic.w	r1, r0, #7
  40594c:	f06f 0c00 	mvn.w	ip, #0
  405950:	f010 0407 	ands.w	r4, r0, #7
  405954:	f891 f020 	pld	[r1, #32]
  405958:	f040 8049 	bne.w	4059ee <strlen+0xae>
  40595c:	f04f 0400 	mov.w	r4, #0
  405960:	f06f 0007 	mvn.w	r0, #7
  405964:	e9d1 2300 	ldrd	r2, r3, [r1]
  405968:	f891 f040 	pld	[r1, #64]	; 0x40
  40596c:	f100 0008 	add.w	r0, r0, #8
  405970:	fa82 f24c 	uadd8	r2, r2, ip
  405974:	faa4 f28c 	sel	r2, r4, ip
  405978:	fa83 f34c 	uadd8	r3, r3, ip
  40597c:	faa2 f38c 	sel	r3, r2, ip
  405980:	bb4b      	cbnz	r3, 4059d6 <strlen+0x96>
  405982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405986:	fa82 f24c 	uadd8	r2, r2, ip
  40598a:	f100 0008 	add.w	r0, r0, #8
  40598e:	faa4 f28c 	sel	r2, r4, ip
  405992:	fa83 f34c 	uadd8	r3, r3, ip
  405996:	faa2 f38c 	sel	r3, r2, ip
  40599a:	b9e3      	cbnz	r3, 4059d6 <strlen+0x96>
  40599c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4059a0:	fa82 f24c 	uadd8	r2, r2, ip
  4059a4:	f100 0008 	add.w	r0, r0, #8
  4059a8:	faa4 f28c 	sel	r2, r4, ip
  4059ac:	fa83 f34c 	uadd8	r3, r3, ip
  4059b0:	faa2 f38c 	sel	r3, r2, ip
  4059b4:	b97b      	cbnz	r3, 4059d6 <strlen+0x96>
  4059b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4059ba:	f101 0120 	add.w	r1, r1, #32
  4059be:	fa82 f24c 	uadd8	r2, r2, ip
  4059c2:	f100 0008 	add.w	r0, r0, #8
  4059c6:	faa4 f28c 	sel	r2, r4, ip
  4059ca:	fa83 f34c 	uadd8	r3, r3, ip
  4059ce:	faa2 f38c 	sel	r3, r2, ip
  4059d2:	2b00      	cmp	r3, #0
  4059d4:	d0c6      	beq.n	405964 <strlen+0x24>
  4059d6:	2a00      	cmp	r2, #0
  4059d8:	bf04      	itt	eq
  4059da:	3004      	addeq	r0, #4
  4059dc:	461a      	moveq	r2, r3
  4059de:	ba12      	rev	r2, r2
  4059e0:	fab2 f282 	clz	r2, r2
  4059e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4059e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4059ec:	4770      	bx	lr
  4059ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4059f2:	f004 0503 	and.w	r5, r4, #3
  4059f6:	f1c4 0000 	rsb	r0, r4, #0
  4059fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4059fe:	f014 0f04 	tst.w	r4, #4
  405a02:	f891 f040 	pld	[r1, #64]	; 0x40
  405a06:	fa0c f505 	lsl.w	r5, ip, r5
  405a0a:	ea62 0205 	orn	r2, r2, r5
  405a0e:	bf1c      	itt	ne
  405a10:	ea63 0305 	ornne	r3, r3, r5
  405a14:	4662      	movne	r2, ip
  405a16:	f04f 0400 	mov.w	r4, #0
  405a1a:	e7a9      	b.n	405970 <strlen+0x30>

00405a1c <__sprint_r.part.0>:
  405a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405a22:	049c      	lsls	r4, r3, #18
  405a24:	4693      	mov	fp, r2
  405a26:	d52f      	bpl.n	405a88 <__sprint_r.part.0+0x6c>
  405a28:	6893      	ldr	r3, [r2, #8]
  405a2a:	6812      	ldr	r2, [r2, #0]
  405a2c:	b353      	cbz	r3, 405a84 <__sprint_r.part.0+0x68>
  405a2e:	460e      	mov	r6, r1
  405a30:	4607      	mov	r7, r0
  405a32:	f102 0908 	add.w	r9, r2, #8
  405a36:	e919 0420 	ldmdb	r9, {r5, sl}
  405a3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405a3e:	d017      	beq.n	405a70 <__sprint_r.part.0+0x54>
  405a40:	3d04      	subs	r5, #4
  405a42:	2400      	movs	r4, #0
  405a44:	e001      	b.n	405a4a <__sprint_r.part.0+0x2e>
  405a46:	45a0      	cmp	r8, r4
  405a48:	d010      	beq.n	405a6c <__sprint_r.part.0+0x50>
  405a4a:	4632      	mov	r2, r6
  405a4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405a50:	4638      	mov	r0, r7
  405a52:	f001 f8bb 	bl	406bcc <_fputwc_r>
  405a56:	1c43      	adds	r3, r0, #1
  405a58:	f104 0401 	add.w	r4, r4, #1
  405a5c:	d1f3      	bne.n	405a46 <__sprint_r.part.0+0x2a>
  405a5e:	2300      	movs	r3, #0
  405a60:	f8cb 3008 	str.w	r3, [fp, #8]
  405a64:	f8cb 3004 	str.w	r3, [fp, #4]
  405a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405a70:	f02a 0a03 	bic.w	sl, sl, #3
  405a74:	eba3 030a 	sub.w	r3, r3, sl
  405a78:	f8cb 3008 	str.w	r3, [fp, #8]
  405a7c:	f109 0908 	add.w	r9, r9, #8
  405a80:	2b00      	cmp	r3, #0
  405a82:	d1d8      	bne.n	405a36 <__sprint_r.part.0+0x1a>
  405a84:	2000      	movs	r0, #0
  405a86:	e7ea      	b.n	405a5e <__sprint_r.part.0+0x42>
  405a88:	f001 fa0a 	bl	406ea0 <__sfvwrite_r>
  405a8c:	2300      	movs	r3, #0
  405a8e:	f8cb 3008 	str.w	r3, [fp, #8]
  405a92:	f8cb 3004 	str.w	r3, [fp, #4]
  405a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a9a:	bf00      	nop

00405a9c <_vfiprintf_r>:
  405a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aa0:	b0ad      	sub	sp, #180	; 0xb4
  405aa2:	461d      	mov	r5, r3
  405aa4:	468b      	mov	fp, r1
  405aa6:	4690      	mov	r8, r2
  405aa8:	9307      	str	r3, [sp, #28]
  405aaa:	9006      	str	r0, [sp, #24]
  405aac:	b118      	cbz	r0, 405ab6 <_vfiprintf_r+0x1a>
  405aae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ab0:	2b00      	cmp	r3, #0
  405ab2:	f000 80f3 	beq.w	405c9c <_vfiprintf_r+0x200>
  405ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405aba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405abe:	07df      	lsls	r7, r3, #31
  405ac0:	b281      	uxth	r1, r0
  405ac2:	d402      	bmi.n	405aca <_vfiprintf_r+0x2e>
  405ac4:	058e      	lsls	r6, r1, #22
  405ac6:	f140 80fc 	bpl.w	405cc2 <_vfiprintf_r+0x226>
  405aca:	048c      	lsls	r4, r1, #18
  405acc:	d40a      	bmi.n	405ae4 <_vfiprintf_r+0x48>
  405ace:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405ad2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405ada:	f8ab 100c 	strh.w	r1, [fp, #12]
  405ade:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405ae2:	b289      	uxth	r1, r1
  405ae4:	0708      	lsls	r0, r1, #28
  405ae6:	f140 80b3 	bpl.w	405c50 <_vfiprintf_r+0x1b4>
  405aea:	f8db 3010 	ldr.w	r3, [fp, #16]
  405aee:	2b00      	cmp	r3, #0
  405af0:	f000 80ae 	beq.w	405c50 <_vfiprintf_r+0x1b4>
  405af4:	f001 031a 	and.w	r3, r1, #26
  405af8:	2b0a      	cmp	r3, #10
  405afa:	f000 80b5 	beq.w	405c68 <_vfiprintf_r+0x1cc>
  405afe:	2300      	movs	r3, #0
  405b00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405b04:	930b      	str	r3, [sp, #44]	; 0x2c
  405b06:	9311      	str	r3, [sp, #68]	; 0x44
  405b08:	9310      	str	r3, [sp, #64]	; 0x40
  405b0a:	9303      	str	r3, [sp, #12]
  405b0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405b10:	46ca      	mov	sl, r9
  405b12:	f8cd b010 	str.w	fp, [sp, #16]
  405b16:	f898 3000 	ldrb.w	r3, [r8]
  405b1a:	4644      	mov	r4, r8
  405b1c:	b1fb      	cbz	r3, 405b5e <_vfiprintf_r+0xc2>
  405b1e:	2b25      	cmp	r3, #37	; 0x25
  405b20:	d102      	bne.n	405b28 <_vfiprintf_r+0x8c>
  405b22:	e01c      	b.n	405b5e <_vfiprintf_r+0xc2>
  405b24:	2b25      	cmp	r3, #37	; 0x25
  405b26:	d003      	beq.n	405b30 <_vfiprintf_r+0x94>
  405b28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405b2c:	2b00      	cmp	r3, #0
  405b2e:	d1f9      	bne.n	405b24 <_vfiprintf_r+0x88>
  405b30:	eba4 0508 	sub.w	r5, r4, r8
  405b34:	b19d      	cbz	r5, 405b5e <_vfiprintf_r+0xc2>
  405b36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b3a:	f8ca 8000 	str.w	r8, [sl]
  405b3e:	3301      	adds	r3, #1
  405b40:	442a      	add	r2, r5
  405b42:	2b07      	cmp	r3, #7
  405b44:	f8ca 5004 	str.w	r5, [sl, #4]
  405b48:	9211      	str	r2, [sp, #68]	; 0x44
  405b4a:	9310      	str	r3, [sp, #64]	; 0x40
  405b4c:	dd7a      	ble.n	405c44 <_vfiprintf_r+0x1a8>
  405b4e:	2a00      	cmp	r2, #0
  405b50:	f040 84b0 	bne.w	4064b4 <_vfiprintf_r+0xa18>
  405b54:	9b03      	ldr	r3, [sp, #12]
  405b56:	9210      	str	r2, [sp, #64]	; 0x40
  405b58:	442b      	add	r3, r5
  405b5a:	46ca      	mov	sl, r9
  405b5c:	9303      	str	r3, [sp, #12]
  405b5e:	7823      	ldrb	r3, [r4, #0]
  405b60:	2b00      	cmp	r3, #0
  405b62:	f000 83e0 	beq.w	406326 <_vfiprintf_r+0x88a>
  405b66:	2000      	movs	r0, #0
  405b68:	f04f 0300 	mov.w	r3, #0
  405b6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405b70:	f104 0801 	add.w	r8, r4, #1
  405b74:	7862      	ldrb	r2, [r4, #1]
  405b76:	4605      	mov	r5, r0
  405b78:	4606      	mov	r6, r0
  405b7a:	4603      	mov	r3, r0
  405b7c:	f04f 34ff 	mov.w	r4, #4294967295
  405b80:	f108 0801 	add.w	r8, r8, #1
  405b84:	f1a2 0120 	sub.w	r1, r2, #32
  405b88:	2958      	cmp	r1, #88	; 0x58
  405b8a:	f200 82de 	bhi.w	40614a <_vfiprintf_r+0x6ae>
  405b8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405b92:	0221      	.short	0x0221
  405b94:	02dc02dc 	.word	0x02dc02dc
  405b98:	02dc0229 	.word	0x02dc0229
  405b9c:	02dc02dc 	.word	0x02dc02dc
  405ba0:	02dc02dc 	.word	0x02dc02dc
  405ba4:	028902dc 	.word	0x028902dc
  405ba8:	02dc0295 	.word	0x02dc0295
  405bac:	02bd00a2 	.word	0x02bd00a2
  405bb0:	019f02dc 	.word	0x019f02dc
  405bb4:	01a401a4 	.word	0x01a401a4
  405bb8:	01a401a4 	.word	0x01a401a4
  405bbc:	01a401a4 	.word	0x01a401a4
  405bc0:	01a401a4 	.word	0x01a401a4
  405bc4:	02dc01a4 	.word	0x02dc01a4
  405bc8:	02dc02dc 	.word	0x02dc02dc
  405bcc:	02dc02dc 	.word	0x02dc02dc
  405bd0:	02dc02dc 	.word	0x02dc02dc
  405bd4:	02dc02dc 	.word	0x02dc02dc
  405bd8:	01b202dc 	.word	0x01b202dc
  405bdc:	02dc02dc 	.word	0x02dc02dc
  405be0:	02dc02dc 	.word	0x02dc02dc
  405be4:	02dc02dc 	.word	0x02dc02dc
  405be8:	02dc02dc 	.word	0x02dc02dc
  405bec:	02dc02dc 	.word	0x02dc02dc
  405bf0:	02dc0197 	.word	0x02dc0197
  405bf4:	02dc02dc 	.word	0x02dc02dc
  405bf8:	02dc02dc 	.word	0x02dc02dc
  405bfc:	02dc019b 	.word	0x02dc019b
  405c00:	025302dc 	.word	0x025302dc
  405c04:	02dc02dc 	.word	0x02dc02dc
  405c08:	02dc02dc 	.word	0x02dc02dc
  405c0c:	02dc02dc 	.word	0x02dc02dc
  405c10:	02dc02dc 	.word	0x02dc02dc
  405c14:	02dc02dc 	.word	0x02dc02dc
  405c18:	021b025a 	.word	0x021b025a
  405c1c:	02dc02dc 	.word	0x02dc02dc
  405c20:	026e02dc 	.word	0x026e02dc
  405c24:	02dc021b 	.word	0x02dc021b
  405c28:	027302dc 	.word	0x027302dc
  405c2c:	01f502dc 	.word	0x01f502dc
  405c30:	02090182 	.word	0x02090182
  405c34:	02dc02d7 	.word	0x02dc02d7
  405c38:	02dc029a 	.word	0x02dc029a
  405c3c:	02dc00a7 	.word	0x02dc00a7
  405c40:	022e02dc 	.word	0x022e02dc
  405c44:	f10a 0a08 	add.w	sl, sl, #8
  405c48:	9b03      	ldr	r3, [sp, #12]
  405c4a:	442b      	add	r3, r5
  405c4c:	9303      	str	r3, [sp, #12]
  405c4e:	e786      	b.n	405b5e <_vfiprintf_r+0xc2>
  405c50:	4659      	mov	r1, fp
  405c52:	9806      	ldr	r0, [sp, #24]
  405c54:	f000 fdac 	bl	4067b0 <__swsetup_r>
  405c58:	bb18      	cbnz	r0, 405ca2 <_vfiprintf_r+0x206>
  405c5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405c5e:	f001 031a 	and.w	r3, r1, #26
  405c62:	2b0a      	cmp	r3, #10
  405c64:	f47f af4b 	bne.w	405afe <_vfiprintf_r+0x62>
  405c68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405c6c:	2b00      	cmp	r3, #0
  405c6e:	f6ff af46 	blt.w	405afe <_vfiprintf_r+0x62>
  405c72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405c76:	07db      	lsls	r3, r3, #31
  405c78:	d405      	bmi.n	405c86 <_vfiprintf_r+0x1ea>
  405c7a:	058f      	lsls	r7, r1, #22
  405c7c:	d403      	bmi.n	405c86 <_vfiprintf_r+0x1ea>
  405c7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c82:	f001 fac3 	bl	40720c <__retarget_lock_release_recursive>
  405c86:	462b      	mov	r3, r5
  405c88:	4642      	mov	r2, r8
  405c8a:	4659      	mov	r1, fp
  405c8c:	9806      	ldr	r0, [sp, #24]
  405c8e:	f000 fd4d 	bl	40672c <__sbprintf>
  405c92:	9003      	str	r0, [sp, #12]
  405c94:	9803      	ldr	r0, [sp, #12]
  405c96:	b02d      	add	sp, #180	; 0xb4
  405c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c9c:	f000 fef4 	bl	406a88 <__sinit>
  405ca0:	e709      	b.n	405ab6 <_vfiprintf_r+0x1a>
  405ca2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405ca6:	07d9      	lsls	r1, r3, #31
  405ca8:	d404      	bmi.n	405cb4 <_vfiprintf_r+0x218>
  405caa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405cae:	059a      	lsls	r2, r3, #22
  405cb0:	f140 84aa 	bpl.w	406608 <_vfiprintf_r+0xb6c>
  405cb4:	f04f 33ff 	mov.w	r3, #4294967295
  405cb8:	9303      	str	r3, [sp, #12]
  405cba:	9803      	ldr	r0, [sp, #12]
  405cbc:	b02d      	add	sp, #180	; 0xb4
  405cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405cc6:	f001 fa9f 	bl	407208 <__retarget_lock_acquire_recursive>
  405cca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405cce:	b281      	uxth	r1, r0
  405cd0:	e6fb      	b.n	405aca <_vfiprintf_r+0x2e>
  405cd2:	4276      	negs	r6, r6
  405cd4:	9207      	str	r2, [sp, #28]
  405cd6:	f043 0304 	orr.w	r3, r3, #4
  405cda:	f898 2000 	ldrb.w	r2, [r8]
  405cde:	e74f      	b.n	405b80 <_vfiprintf_r+0xe4>
  405ce0:	9608      	str	r6, [sp, #32]
  405ce2:	069e      	lsls	r6, r3, #26
  405ce4:	f100 8450 	bmi.w	406588 <_vfiprintf_r+0xaec>
  405ce8:	9907      	ldr	r1, [sp, #28]
  405cea:	06dd      	lsls	r5, r3, #27
  405cec:	460a      	mov	r2, r1
  405cee:	f100 83ef 	bmi.w	4064d0 <_vfiprintf_r+0xa34>
  405cf2:	0658      	lsls	r0, r3, #25
  405cf4:	f140 83ec 	bpl.w	4064d0 <_vfiprintf_r+0xa34>
  405cf8:	880e      	ldrh	r6, [r1, #0]
  405cfa:	3104      	adds	r1, #4
  405cfc:	2700      	movs	r7, #0
  405cfe:	2201      	movs	r2, #1
  405d00:	9107      	str	r1, [sp, #28]
  405d02:	f04f 0100 	mov.w	r1, #0
  405d06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405d0a:	2500      	movs	r5, #0
  405d0c:	1c61      	adds	r1, r4, #1
  405d0e:	f000 8116 	beq.w	405f3e <_vfiprintf_r+0x4a2>
  405d12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405d16:	9102      	str	r1, [sp, #8]
  405d18:	ea56 0107 	orrs.w	r1, r6, r7
  405d1c:	f040 8114 	bne.w	405f48 <_vfiprintf_r+0x4ac>
  405d20:	2c00      	cmp	r4, #0
  405d22:	f040 835c 	bne.w	4063de <_vfiprintf_r+0x942>
  405d26:	2a00      	cmp	r2, #0
  405d28:	f040 83b7 	bne.w	40649a <_vfiprintf_r+0x9fe>
  405d2c:	f013 0301 	ands.w	r3, r3, #1
  405d30:	9305      	str	r3, [sp, #20]
  405d32:	f000 8457 	beq.w	4065e4 <_vfiprintf_r+0xb48>
  405d36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405d3a:	2330      	movs	r3, #48	; 0x30
  405d3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405d40:	9b05      	ldr	r3, [sp, #20]
  405d42:	42a3      	cmp	r3, r4
  405d44:	bfb8      	it	lt
  405d46:	4623      	movlt	r3, r4
  405d48:	9301      	str	r3, [sp, #4]
  405d4a:	b10d      	cbz	r5, 405d50 <_vfiprintf_r+0x2b4>
  405d4c:	3301      	adds	r3, #1
  405d4e:	9301      	str	r3, [sp, #4]
  405d50:	9b02      	ldr	r3, [sp, #8]
  405d52:	f013 0302 	ands.w	r3, r3, #2
  405d56:	9309      	str	r3, [sp, #36]	; 0x24
  405d58:	d002      	beq.n	405d60 <_vfiprintf_r+0x2c4>
  405d5a:	9b01      	ldr	r3, [sp, #4]
  405d5c:	3302      	adds	r3, #2
  405d5e:	9301      	str	r3, [sp, #4]
  405d60:	9b02      	ldr	r3, [sp, #8]
  405d62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405d66:	930a      	str	r3, [sp, #40]	; 0x28
  405d68:	f040 8217 	bne.w	40619a <_vfiprintf_r+0x6fe>
  405d6c:	9b08      	ldr	r3, [sp, #32]
  405d6e:	9a01      	ldr	r2, [sp, #4]
  405d70:	1a9d      	subs	r5, r3, r2
  405d72:	2d00      	cmp	r5, #0
  405d74:	f340 8211 	ble.w	40619a <_vfiprintf_r+0x6fe>
  405d78:	2d10      	cmp	r5, #16
  405d7a:	f340 8490 	ble.w	40669e <_vfiprintf_r+0xc02>
  405d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d82:	4ec4      	ldr	r6, [pc, #784]	; (406094 <_vfiprintf_r+0x5f8>)
  405d84:	46d6      	mov	lr, sl
  405d86:	2710      	movs	r7, #16
  405d88:	46a2      	mov	sl, r4
  405d8a:	4619      	mov	r1, r3
  405d8c:	9c06      	ldr	r4, [sp, #24]
  405d8e:	e007      	b.n	405da0 <_vfiprintf_r+0x304>
  405d90:	f101 0c02 	add.w	ip, r1, #2
  405d94:	f10e 0e08 	add.w	lr, lr, #8
  405d98:	4601      	mov	r1, r0
  405d9a:	3d10      	subs	r5, #16
  405d9c:	2d10      	cmp	r5, #16
  405d9e:	dd11      	ble.n	405dc4 <_vfiprintf_r+0x328>
  405da0:	1c48      	adds	r0, r1, #1
  405da2:	3210      	adds	r2, #16
  405da4:	2807      	cmp	r0, #7
  405da6:	9211      	str	r2, [sp, #68]	; 0x44
  405da8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405dac:	9010      	str	r0, [sp, #64]	; 0x40
  405dae:	ddef      	ble.n	405d90 <_vfiprintf_r+0x2f4>
  405db0:	2a00      	cmp	r2, #0
  405db2:	f040 81e4 	bne.w	40617e <_vfiprintf_r+0x6e2>
  405db6:	3d10      	subs	r5, #16
  405db8:	2d10      	cmp	r5, #16
  405dba:	4611      	mov	r1, r2
  405dbc:	f04f 0c01 	mov.w	ip, #1
  405dc0:	46ce      	mov	lr, r9
  405dc2:	dced      	bgt.n	405da0 <_vfiprintf_r+0x304>
  405dc4:	4654      	mov	r4, sl
  405dc6:	4661      	mov	r1, ip
  405dc8:	46f2      	mov	sl, lr
  405dca:	442a      	add	r2, r5
  405dcc:	2907      	cmp	r1, #7
  405dce:	9211      	str	r2, [sp, #68]	; 0x44
  405dd0:	f8ca 6000 	str.w	r6, [sl]
  405dd4:	f8ca 5004 	str.w	r5, [sl, #4]
  405dd8:	9110      	str	r1, [sp, #64]	; 0x40
  405dda:	f300 82ec 	bgt.w	4063b6 <_vfiprintf_r+0x91a>
  405dde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405de2:	f10a 0a08 	add.w	sl, sl, #8
  405de6:	1c48      	adds	r0, r1, #1
  405de8:	2d00      	cmp	r5, #0
  405dea:	f040 81de 	bne.w	4061aa <_vfiprintf_r+0x70e>
  405dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405df0:	2b00      	cmp	r3, #0
  405df2:	f000 81f8 	beq.w	4061e6 <_vfiprintf_r+0x74a>
  405df6:	3202      	adds	r2, #2
  405df8:	a90e      	add	r1, sp, #56	; 0x38
  405dfa:	2302      	movs	r3, #2
  405dfc:	2807      	cmp	r0, #7
  405dfe:	9211      	str	r2, [sp, #68]	; 0x44
  405e00:	9010      	str	r0, [sp, #64]	; 0x40
  405e02:	e88a 000a 	stmia.w	sl, {r1, r3}
  405e06:	f340 81ea 	ble.w	4061de <_vfiprintf_r+0x742>
  405e0a:	2a00      	cmp	r2, #0
  405e0c:	f040 838c 	bne.w	406528 <_vfiprintf_r+0xa8c>
  405e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e12:	2b80      	cmp	r3, #128	; 0x80
  405e14:	f04f 0001 	mov.w	r0, #1
  405e18:	4611      	mov	r1, r2
  405e1a:	46ca      	mov	sl, r9
  405e1c:	f040 81e7 	bne.w	4061ee <_vfiprintf_r+0x752>
  405e20:	9b08      	ldr	r3, [sp, #32]
  405e22:	9d01      	ldr	r5, [sp, #4]
  405e24:	1b5e      	subs	r6, r3, r5
  405e26:	2e00      	cmp	r6, #0
  405e28:	f340 81e1 	ble.w	4061ee <_vfiprintf_r+0x752>
  405e2c:	2e10      	cmp	r6, #16
  405e2e:	4d9a      	ldr	r5, [pc, #616]	; (406098 <_vfiprintf_r+0x5fc>)
  405e30:	f340 8450 	ble.w	4066d4 <_vfiprintf_r+0xc38>
  405e34:	46d4      	mov	ip, sl
  405e36:	2710      	movs	r7, #16
  405e38:	46a2      	mov	sl, r4
  405e3a:	9c06      	ldr	r4, [sp, #24]
  405e3c:	e007      	b.n	405e4e <_vfiprintf_r+0x3b2>
  405e3e:	f101 0e02 	add.w	lr, r1, #2
  405e42:	f10c 0c08 	add.w	ip, ip, #8
  405e46:	4601      	mov	r1, r0
  405e48:	3e10      	subs	r6, #16
  405e4a:	2e10      	cmp	r6, #16
  405e4c:	dd11      	ble.n	405e72 <_vfiprintf_r+0x3d6>
  405e4e:	1c48      	adds	r0, r1, #1
  405e50:	3210      	adds	r2, #16
  405e52:	2807      	cmp	r0, #7
  405e54:	9211      	str	r2, [sp, #68]	; 0x44
  405e56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405e5a:	9010      	str	r0, [sp, #64]	; 0x40
  405e5c:	ddef      	ble.n	405e3e <_vfiprintf_r+0x3a2>
  405e5e:	2a00      	cmp	r2, #0
  405e60:	f040 829d 	bne.w	40639e <_vfiprintf_r+0x902>
  405e64:	3e10      	subs	r6, #16
  405e66:	2e10      	cmp	r6, #16
  405e68:	f04f 0e01 	mov.w	lr, #1
  405e6c:	4611      	mov	r1, r2
  405e6e:	46cc      	mov	ip, r9
  405e70:	dced      	bgt.n	405e4e <_vfiprintf_r+0x3b2>
  405e72:	4654      	mov	r4, sl
  405e74:	46e2      	mov	sl, ip
  405e76:	4432      	add	r2, r6
  405e78:	f1be 0f07 	cmp.w	lr, #7
  405e7c:	9211      	str	r2, [sp, #68]	; 0x44
  405e7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  405e82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405e86:	f300 8369 	bgt.w	40655c <_vfiprintf_r+0xac0>
  405e8a:	f10a 0a08 	add.w	sl, sl, #8
  405e8e:	f10e 0001 	add.w	r0, lr, #1
  405e92:	4671      	mov	r1, lr
  405e94:	e1ab      	b.n	4061ee <_vfiprintf_r+0x752>
  405e96:	9608      	str	r6, [sp, #32]
  405e98:	f013 0220 	ands.w	r2, r3, #32
  405e9c:	f040 838c 	bne.w	4065b8 <_vfiprintf_r+0xb1c>
  405ea0:	f013 0110 	ands.w	r1, r3, #16
  405ea4:	f040 831a 	bne.w	4064dc <_vfiprintf_r+0xa40>
  405ea8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405eac:	f000 8316 	beq.w	4064dc <_vfiprintf_r+0xa40>
  405eb0:	9807      	ldr	r0, [sp, #28]
  405eb2:	460a      	mov	r2, r1
  405eb4:	4601      	mov	r1, r0
  405eb6:	3104      	adds	r1, #4
  405eb8:	8806      	ldrh	r6, [r0, #0]
  405eba:	9107      	str	r1, [sp, #28]
  405ebc:	2700      	movs	r7, #0
  405ebe:	e720      	b.n	405d02 <_vfiprintf_r+0x266>
  405ec0:	9608      	str	r6, [sp, #32]
  405ec2:	f043 0310 	orr.w	r3, r3, #16
  405ec6:	e7e7      	b.n	405e98 <_vfiprintf_r+0x3fc>
  405ec8:	9608      	str	r6, [sp, #32]
  405eca:	f043 0310 	orr.w	r3, r3, #16
  405ece:	e708      	b.n	405ce2 <_vfiprintf_r+0x246>
  405ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ed4:	f898 2000 	ldrb.w	r2, [r8]
  405ed8:	e652      	b.n	405b80 <_vfiprintf_r+0xe4>
  405eda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ede:	2600      	movs	r6, #0
  405ee0:	f818 2b01 	ldrb.w	r2, [r8], #1
  405ee4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405ee8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405eec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ef0:	2909      	cmp	r1, #9
  405ef2:	d9f5      	bls.n	405ee0 <_vfiprintf_r+0x444>
  405ef4:	e646      	b.n	405b84 <_vfiprintf_r+0xe8>
  405ef6:	9608      	str	r6, [sp, #32]
  405ef8:	2800      	cmp	r0, #0
  405efa:	f040 8408 	bne.w	40670e <_vfiprintf_r+0xc72>
  405efe:	f043 0310 	orr.w	r3, r3, #16
  405f02:	069e      	lsls	r6, r3, #26
  405f04:	f100 834c 	bmi.w	4065a0 <_vfiprintf_r+0xb04>
  405f08:	06dd      	lsls	r5, r3, #27
  405f0a:	f100 82f3 	bmi.w	4064f4 <_vfiprintf_r+0xa58>
  405f0e:	0658      	lsls	r0, r3, #25
  405f10:	f140 82f0 	bpl.w	4064f4 <_vfiprintf_r+0xa58>
  405f14:	9d07      	ldr	r5, [sp, #28]
  405f16:	f9b5 6000 	ldrsh.w	r6, [r5]
  405f1a:	462a      	mov	r2, r5
  405f1c:	17f7      	asrs	r7, r6, #31
  405f1e:	3204      	adds	r2, #4
  405f20:	4630      	mov	r0, r6
  405f22:	4639      	mov	r1, r7
  405f24:	9207      	str	r2, [sp, #28]
  405f26:	2800      	cmp	r0, #0
  405f28:	f171 0200 	sbcs.w	r2, r1, #0
  405f2c:	f2c0 835d 	blt.w	4065ea <_vfiprintf_r+0xb4e>
  405f30:	1c61      	adds	r1, r4, #1
  405f32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405f36:	f04f 0201 	mov.w	r2, #1
  405f3a:	f47f aeea 	bne.w	405d12 <_vfiprintf_r+0x276>
  405f3e:	ea56 0107 	orrs.w	r1, r6, r7
  405f42:	f000 824d 	beq.w	4063e0 <_vfiprintf_r+0x944>
  405f46:	9302      	str	r3, [sp, #8]
  405f48:	2a01      	cmp	r2, #1
  405f4a:	f000 828c 	beq.w	406466 <_vfiprintf_r+0x9ca>
  405f4e:	2a02      	cmp	r2, #2
  405f50:	f040 825c 	bne.w	40640c <_vfiprintf_r+0x970>
  405f54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405f56:	46cb      	mov	fp, r9
  405f58:	0933      	lsrs	r3, r6, #4
  405f5a:	f006 010f 	and.w	r1, r6, #15
  405f5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405f62:	093a      	lsrs	r2, r7, #4
  405f64:	461e      	mov	r6, r3
  405f66:	4617      	mov	r7, r2
  405f68:	5c43      	ldrb	r3, [r0, r1]
  405f6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405f6e:	ea56 0307 	orrs.w	r3, r6, r7
  405f72:	d1f1      	bne.n	405f58 <_vfiprintf_r+0x4bc>
  405f74:	eba9 030b 	sub.w	r3, r9, fp
  405f78:	9305      	str	r3, [sp, #20]
  405f7a:	e6e1      	b.n	405d40 <_vfiprintf_r+0x2a4>
  405f7c:	2800      	cmp	r0, #0
  405f7e:	f040 83c0 	bne.w	406702 <_vfiprintf_r+0xc66>
  405f82:	0699      	lsls	r1, r3, #26
  405f84:	f100 8367 	bmi.w	406656 <_vfiprintf_r+0xbba>
  405f88:	06da      	lsls	r2, r3, #27
  405f8a:	f100 80f1 	bmi.w	406170 <_vfiprintf_r+0x6d4>
  405f8e:	065b      	lsls	r3, r3, #25
  405f90:	f140 80ee 	bpl.w	406170 <_vfiprintf_r+0x6d4>
  405f94:	9a07      	ldr	r2, [sp, #28]
  405f96:	6813      	ldr	r3, [r2, #0]
  405f98:	3204      	adds	r2, #4
  405f9a:	9207      	str	r2, [sp, #28]
  405f9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405fa0:	801a      	strh	r2, [r3, #0]
  405fa2:	e5b8      	b.n	405b16 <_vfiprintf_r+0x7a>
  405fa4:	9807      	ldr	r0, [sp, #28]
  405fa6:	4a3d      	ldr	r2, [pc, #244]	; (40609c <_vfiprintf_r+0x600>)
  405fa8:	9608      	str	r6, [sp, #32]
  405faa:	920b      	str	r2, [sp, #44]	; 0x2c
  405fac:	6806      	ldr	r6, [r0, #0]
  405fae:	2278      	movs	r2, #120	; 0x78
  405fb0:	2130      	movs	r1, #48	; 0x30
  405fb2:	3004      	adds	r0, #4
  405fb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405fb8:	f043 0302 	orr.w	r3, r3, #2
  405fbc:	9007      	str	r0, [sp, #28]
  405fbe:	2700      	movs	r7, #0
  405fc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405fc4:	2202      	movs	r2, #2
  405fc6:	e69c      	b.n	405d02 <_vfiprintf_r+0x266>
  405fc8:	9608      	str	r6, [sp, #32]
  405fca:	2800      	cmp	r0, #0
  405fcc:	d099      	beq.n	405f02 <_vfiprintf_r+0x466>
  405fce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fd2:	e796      	b.n	405f02 <_vfiprintf_r+0x466>
  405fd4:	f898 2000 	ldrb.w	r2, [r8]
  405fd8:	2d00      	cmp	r5, #0
  405fda:	f47f add1 	bne.w	405b80 <_vfiprintf_r+0xe4>
  405fde:	2001      	movs	r0, #1
  405fe0:	2520      	movs	r5, #32
  405fe2:	e5cd      	b.n	405b80 <_vfiprintf_r+0xe4>
  405fe4:	f043 0301 	orr.w	r3, r3, #1
  405fe8:	f898 2000 	ldrb.w	r2, [r8]
  405fec:	e5c8      	b.n	405b80 <_vfiprintf_r+0xe4>
  405fee:	9608      	str	r6, [sp, #32]
  405ff0:	2800      	cmp	r0, #0
  405ff2:	f040 8393 	bne.w	40671c <_vfiprintf_r+0xc80>
  405ff6:	4929      	ldr	r1, [pc, #164]	; (40609c <_vfiprintf_r+0x600>)
  405ff8:	910b      	str	r1, [sp, #44]	; 0x2c
  405ffa:	069f      	lsls	r7, r3, #26
  405ffc:	f100 82e8 	bmi.w	4065d0 <_vfiprintf_r+0xb34>
  406000:	9807      	ldr	r0, [sp, #28]
  406002:	06de      	lsls	r6, r3, #27
  406004:	4601      	mov	r1, r0
  406006:	f100 8270 	bmi.w	4064ea <_vfiprintf_r+0xa4e>
  40600a:	065d      	lsls	r5, r3, #25
  40600c:	f140 826d 	bpl.w	4064ea <_vfiprintf_r+0xa4e>
  406010:	3104      	adds	r1, #4
  406012:	8806      	ldrh	r6, [r0, #0]
  406014:	9107      	str	r1, [sp, #28]
  406016:	2700      	movs	r7, #0
  406018:	07d8      	lsls	r0, r3, #31
  40601a:	f140 8222 	bpl.w	406462 <_vfiprintf_r+0x9c6>
  40601e:	ea56 0107 	orrs.w	r1, r6, r7
  406022:	f000 821e 	beq.w	406462 <_vfiprintf_r+0x9c6>
  406026:	2130      	movs	r1, #48	; 0x30
  406028:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40602c:	f043 0302 	orr.w	r3, r3, #2
  406030:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406034:	2202      	movs	r2, #2
  406036:	e664      	b.n	405d02 <_vfiprintf_r+0x266>
  406038:	9608      	str	r6, [sp, #32]
  40603a:	2800      	cmp	r0, #0
  40603c:	f040 836b 	bne.w	406716 <_vfiprintf_r+0xc7a>
  406040:	4917      	ldr	r1, [pc, #92]	; (4060a0 <_vfiprintf_r+0x604>)
  406042:	910b      	str	r1, [sp, #44]	; 0x2c
  406044:	e7d9      	b.n	405ffa <_vfiprintf_r+0x55e>
  406046:	9907      	ldr	r1, [sp, #28]
  406048:	9608      	str	r6, [sp, #32]
  40604a:	680a      	ldr	r2, [r1, #0]
  40604c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406050:	f04f 0000 	mov.w	r0, #0
  406054:	460a      	mov	r2, r1
  406056:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40605a:	3204      	adds	r2, #4
  40605c:	2001      	movs	r0, #1
  40605e:	9001      	str	r0, [sp, #4]
  406060:	9207      	str	r2, [sp, #28]
  406062:	9005      	str	r0, [sp, #20]
  406064:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406068:	9302      	str	r3, [sp, #8]
  40606a:	2400      	movs	r4, #0
  40606c:	e670      	b.n	405d50 <_vfiprintf_r+0x2b4>
  40606e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406072:	f898 2000 	ldrb.w	r2, [r8]
  406076:	e583      	b.n	405b80 <_vfiprintf_r+0xe4>
  406078:	f898 2000 	ldrb.w	r2, [r8]
  40607c:	2a6c      	cmp	r2, #108	; 0x6c
  40607e:	bf03      	ittte	eq
  406080:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406084:	f043 0320 	orreq.w	r3, r3, #32
  406088:	f108 0801 	addeq.w	r8, r8, #1
  40608c:	f043 0310 	orrne.w	r3, r3, #16
  406090:	e576      	b.n	405b80 <_vfiprintf_r+0xe4>
  406092:	bf00      	nop
  406094:	00408864 	.word	0x00408864
  406098:	00408874 	.word	0x00408874
  40609c:	00408848 	.word	0x00408848
  4060a0:	00408834 	.word	0x00408834
  4060a4:	9907      	ldr	r1, [sp, #28]
  4060a6:	680e      	ldr	r6, [r1, #0]
  4060a8:	460a      	mov	r2, r1
  4060aa:	2e00      	cmp	r6, #0
  4060ac:	f102 0204 	add.w	r2, r2, #4
  4060b0:	f6ff ae0f 	blt.w	405cd2 <_vfiprintf_r+0x236>
  4060b4:	9207      	str	r2, [sp, #28]
  4060b6:	f898 2000 	ldrb.w	r2, [r8]
  4060ba:	e561      	b.n	405b80 <_vfiprintf_r+0xe4>
  4060bc:	f898 2000 	ldrb.w	r2, [r8]
  4060c0:	2001      	movs	r0, #1
  4060c2:	252b      	movs	r5, #43	; 0x2b
  4060c4:	e55c      	b.n	405b80 <_vfiprintf_r+0xe4>
  4060c6:	9907      	ldr	r1, [sp, #28]
  4060c8:	9608      	str	r6, [sp, #32]
  4060ca:	f8d1 b000 	ldr.w	fp, [r1]
  4060ce:	f04f 0200 	mov.w	r2, #0
  4060d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4060d6:	1d0e      	adds	r6, r1, #4
  4060d8:	f1bb 0f00 	cmp.w	fp, #0
  4060dc:	f000 82e5 	beq.w	4066aa <_vfiprintf_r+0xc0e>
  4060e0:	1c67      	adds	r7, r4, #1
  4060e2:	f000 82c4 	beq.w	40666e <_vfiprintf_r+0xbd2>
  4060e6:	4622      	mov	r2, r4
  4060e8:	2100      	movs	r1, #0
  4060ea:	4658      	mov	r0, fp
  4060ec:	9301      	str	r3, [sp, #4]
  4060ee:	f001 fbd7 	bl	4078a0 <memchr>
  4060f2:	9b01      	ldr	r3, [sp, #4]
  4060f4:	2800      	cmp	r0, #0
  4060f6:	f000 82e5 	beq.w	4066c4 <_vfiprintf_r+0xc28>
  4060fa:	eba0 020b 	sub.w	r2, r0, fp
  4060fe:	9205      	str	r2, [sp, #20]
  406100:	9607      	str	r6, [sp, #28]
  406102:	9302      	str	r3, [sp, #8]
  406104:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406108:	2400      	movs	r4, #0
  40610a:	e619      	b.n	405d40 <_vfiprintf_r+0x2a4>
  40610c:	f898 2000 	ldrb.w	r2, [r8]
  406110:	2a2a      	cmp	r2, #42	; 0x2a
  406112:	f108 0701 	add.w	r7, r8, #1
  406116:	f000 82e9 	beq.w	4066ec <_vfiprintf_r+0xc50>
  40611a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40611e:	2909      	cmp	r1, #9
  406120:	46b8      	mov	r8, r7
  406122:	f04f 0400 	mov.w	r4, #0
  406126:	f63f ad2d 	bhi.w	405b84 <_vfiprintf_r+0xe8>
  40612a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40612e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406132:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406136:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40613a:	2909      	cmp	r1, #9
  40613c:	d9f5      	bls.n	40612a <_vfiprintf_r+0x68e>
  40613e:	e521      	b.n	405b84 <_vfiprintf_r+0xe8>
  406140:	f043 0320 	orr.w	r3, r3, #32
  406144:	f898 2000 	ldrb.w	r2, [r8]
  406148:	e51a      	b.n	405b80 <_vfiprintf_r+0xe4>
  40614a:	9608      	str	r6, [sp, #32]
  40614c:	2800      	cmp	r0, #0
  40614e:	f040 82db 	bne.w	406708 <_vfiprintf_r+0xc6c>
  406152:	2a00      	cmp	r2, #0
  406154:	f000 80e7 	beq.w	406326 <_vfiprintf_r+0x88a>
  406158:	2101      	movs	r1, #1
  40615a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40615e:	f04f 0200 	mov.w	r2, #0
  406162:	9101      	str	r1, [sp, #4]
  406164:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406168:	9105      	str	r1, [sp, #20]
  40616a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40616e:	e77b      	b.n	406068 <_vfiprintf_r+0x5cc>
  406170:	9a07      	ldr	r2, [sp, #28]
  406172:	6813      	ldr	r3, [r2, #0]
  406174:	3204      	adds	r2, #4
  406176:	9207      	str	r2, [sp, #28]
  406178:	9a03      	ldr	r2, [sp, #12]
  40617a:	601a      	str	r2, [r3, #0]
  40617c:	e4cb      	b.n	405b16 <_vfiprintf_r+0x7a>
  40617e:	aa0f      	add	r2, sp, #60	; 0x3c
  406180:	9904      	ldr	r1, [sp, #16]
  406182:	4620      	mov	r0, r4
  406184:	f7ff fc4a 	bl	405a1c <__sprint_r.part.0>
  406188:	2800      	cmp	r0, #0
  40618a:	f040 8139 	bne.w	406400 <_vfiprintf_r+0x964>
  40618e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406190:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406192:	f101 0c01 	add.w	ip, r1, #1
  406196:	46ce      	mov	lr, r9
  406198:	e5ff      	b.n	405d9a <_vfiprintf_r+0x2fe>
  40619a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40619c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40619e:	1c48      	adds	r0, r1, #1
  4061a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4061a4:	2d00      	cmp	r5, #0
  4061a6:	f43f ae22 	beq.w	405dee <_vfiprintf_r+0x352>
  4061aa:	3201      	adds	r2, #1
  4061ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4061b0:	2101      	movs	r1, #1
  4061b2:	2807      	cmp	r0, #7
  4061b4:	9211      	str	r2, [sp, #68]	; 0x44
  4061b6:	9010      	str	r0, [sp, #64]	; 0x40
  4061b8:	f8ca 5000 	str.w	r5, [sl]
  4061bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4061c0:	f340 8108 	ble.w	4063d4 <_vfiprintf_r+0x938>
  4061c4:	2a00      	cmp	r2, #0
  4061c6:	f040 81bc 	bne.w	406542 <_vfiprintf_r+0xaa6>
  4061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061cc:	2b00      	cmp	r3, #0
  4061ce:	f43f ae1f 	beq.w	405e10 <_vfiprintf_r+0x374>
  4061d2:	ab0e      	add	r3, sp, #56	; 0x38
  4061d4:	2202      	movs	r2, #2
  4061d6:	4608      	mov	r0, r1
  4061d8:	931c      	str	r3, [sp, #112]	; 0x70
  4061da:	921d      	str	r2, [sp, #116]	; 0x74
  4061dc:	46ca      	mov	sl, r9
  4061de:	4601      	mov	r1, r0
  4061e0:	f10a 0a08 	add.w	sl, sl, #8
  4061e4:	3001      	adds	r0, #1
  4061e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061e8:	2b80      	cmp	r3, #128	; 0x80
  4061ea:	f43f ae19 	beq.w	405e20 <_vfiprintf_r+0x384>
  4061ee:	9b05      	ldr	r3, [sp, #20]
  4061f0:	1ae4      	subs	r4, r4, r3
  4061f2:	2c00      	cmp	r4, #0
  4061f4:	dd2e      	ble.n	406254 <_vfiprintf_r+0x7b8>
  4061f6:	2c10      	cmp	r4, #16
  4061f8:	4db3      	ldr	r5, [pc, #716]	; (4064c8 <_vfiprintf_r+0xa2c>)
  4061fa:	dd1e      	ble.n	40623a <_vfiprintf_r+0x79e>
  4061fc:	46d6      	mov	lr, sl
  4061fe:	2610      	movs	r6, #16
  406200:	9f06      	ldr	r7, [sp, #24]
  406202:	f8dd a010 	ldr.w	sl, [sp, #16]
  406206:	e006      	b.n	406216 <_vfiprintf_r+0x77a>
  406208:	1c88      	adds	r0, r1, #2
  40620a:	f10e 0e08 	add.w	lr, lr, #8
  40620e:	4619      	mov	r1, r3
  406210:	3c10      	subs	r4, #16
  406212:	2c10      	cmp	r4, #16
  406214:	dd10      	ble.n	406238 <_vfiprintf_r+0x79c>
  406216:	1c4b      	adds	r3, r1, #1
  406218:	3210      	adds	r2, #16
  40621a:	2b07      	cmp	r3, #7
  40621c:	9211      	str	r2, [sp, #68]	; 0x44
  40621e:	e88e 0060 	stmia.w	lr, {r5, r6}
  406222:	9310      	str	r3, [sp, #64]	; 0x40
  406224:	ddf0      	ble.n	406208 <_vfiprintf_r+0x76c>
  406226:	2a00      	cmp	r2, #0
  406228:	d165      	bne.n	4062f6 <_vfiprintf_r+0x85a>
  40622a:	3c10      	subs	r4, #16
  40622c:	2c10      	cmp	r4, #16
  40622e:	f04f 0001 	mov.w	r0, #1
  406232:	4611      	mov	r1, r2
  406234:	46ce      	mov	lr, r9
  406236:	dcee      	bgt.n	406216 <_vfiprintf_r+0x77a>
  406238:	46f2      	mov	sl, lr
  40623a:	4422      	add	r2, r4
  40623c:	2807      	cmp	r0, #7
  40623e:	9211      	str	r2, [sp, #68]	; 0x44
  406240:	f8ca 5000 	str.w	r5, [sl]
  406244:	f8ca 4004 	str.w	r4, [sl, #4]
  406248:	9010      	str	r0, [sp, #64]	; 0x40
  40624a:	f300 8085 	bgt.w	406358 <_vfiprintf_r+0x8bc>
  40624e:	f10a 0a08 	add.w	sl, sl, #8
  406252:	3001      	adds	r0, #1
  406254:	9905      	ldr	r1, [sp, #20]
  406256:	f8ca b000 	str.w	fp, [sl]
  40625a:	440a      	add	r2, r1
  40625c:	2807      	cmp	r0, #7
  40625e:	9211      	str	r2, [sp, #68]	; 0x44
  406260:	f8ca 1004 	str.w	r1, [sl, #4]
  406264:	9010      	str	r0, [sp, #64]	; 0x40
  406266:	f340 8082 	ble.w	40636e <_vfiprintf_r+0x8d2>
  40626a:	2a00      	cmp	r2, #0
  40626c:	f040 8118 	bne.w	4064a0 <_vfiprintf_r+0xa04>
  406270:	9b02      	ldr	r3, [sp, #8]
  406272:	9210      	str	r2, [sp, #64]	; 0x40
  406274:	0758      	lsls	r0, r3, #29
  406276:	d535      	bpl.n	4062e4 <_vfiprintf_r+0x848>
  406278:	9b08      	ldr	r3, [sp, #32]
  40627a:	9901      	ldr	r1, [sp, #4]
  40627c:	1a5c      	subs	r4, r3, r1
  40627e:	2c00      	cmp	r4, #0
  406280:	f340 80e7 	ble.w	406452 <_vfiprintf_r+0x9b6>
  406284:	46ca      	mov	sl, r9
  406286:	2c10      	cmp	r4, #16
  406288:	f340 8218 	ble.w	4066bc <_vfiprintf_r+0xc20>
  40628c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40628e:	4e8f      	ldr	r6, [pc, #572]	; (4064cc <_vfiprintf_r+0xa30>)
  406290:	9f06      	ldr	r7, [sp, #24]
  406292:	f8dd b010 	ldr.w	fp, [sp, #16]
  406296:	2510      	movs	r5, #16
  406298:	e006      	b.n	4062a8 <_vfiprintf_r+0x80c>
  40629a:	1c88      	adds	r0, r1, #2
  40629c:	f10a 0a08 	add.w	sl, sl, #8
  4062a0:	4619      	mov	r1, r3
  4062a2:	3c10      	subs	r4, #16
  4062a4:	2c10      	cmp	r4, #16
  4062a6:	dd11      	ble.n	4062cc <_vfiprintf_r+0x830>
  4062a8:	1c4b      	adds	r3, r1, #1
  4062aa:	3210      	adds	r2, #16
  4062ac:	2b07      	cmp	r3, #7
  4062ae:	9211      	str	r2, [sp, #68]	; 0x44
  4062b0:	f8ca 6000 	str.w	r6, [sl]
  4062b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4062b8:	9310      	str	r3, [sp, #64]	; 0x40
  4062ba:	ddee      	ble.n	40629a <_vfiprintf_r+0x7fe>
  4062bc:	bb42      	cbnz	r2, 406310 <_vfiprintf_r+0x874>
  4062be:	3c10      	subs	r4, #16
  4062c0:	2c10      	cmp	r4, #16
  4062c2:	f04f 0001 	mov.w	r0, #1
  4062c6:	4611      	mov	r1, r2
  4062c8:	46ca      	mov	sl, r9
  4062ca:	dced      	bgt.n	4062a8 <_vfiprintf_r+0x80c>
  4062cc:	4422      	add	r2, r4
  4062ce:	2807      	cmp	r0, #7
  4062d0:	9211      	str	r2, [sp, #68]	; 0x44
  4062d2:	f8ca 6000 	str.w	r6, [sl]
  4062d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4062da:	9010      	str	r0, [sp, #64]	; 0x40
  4062dc:	dd51      	ble.n	406382 <_vfiprintf_r+0x8e6>
  4062de:	2a00      	cmp	r2, #0
  4062e0:	f040 819b 	bne.w	40661a <_vfiprintf_r+0xb7e>
  4062e4:	9b03      	ldr	r3, [sp, #12]
  4062e6:	9a08      	ldr	r2, [sp, #32]
  4062e8:	9901      	ldr	r1, [sp, #4]
  4062ea:	428a      	cmp	r2, r1
  4062ec:	bfac      	ite	ge
  4062ee:	189b      	addge	r3, r3, r2
  4062f0:	185b      	addlt	r3, r3, r1
  4062f2:	9303      	str	r3, [sp, #12]
  4062f4:	e04e      	b.n	406394 <_vfiprintf_r+0x8f8>
  4062f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4062f8:	4651      	mov	r1, sl
  4062fa:	4638      	mov	r0, r7
  4062fc:	f7ff fb8e 	bl	405a1c <__sprint_r.part.0>
  406300:	2800      	cmp	r0, #0
  406302:	f040 813f 	bne.w	406584 <_vfiprintf_r+0xae8>
  406306:	9910      	ldr	r1, [sp, #64]	; 0x40
  406308:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40630a:	1c48      	adds	r0, r1, #1
  40630c:	46ce      	mov	lr, r9
  40630e:	e77f      	b.n	406210 <_vfiprintf_r+0x774>
  406310:	aa0f      	add	r2, sp, #60	; 0x3c
  406312:	4659      	mov	r1, fp
  406314:	4638      	mov	r0, r7
  406316:	f7ff fb81 	bl	405a1c <__sprint_r.part.0>
  40631a:	b960      	cbnz	r0, 406336 <_vfiprintf_r+0x89a>
  40631c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40631e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406320:	1c48      	adds	r0, r1, #1
  406322:	46ca      	mov	sl, r9
  406324:	e7bd      	b.n	4062a2 <_vfiprintf_r+0x806>
  406326:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406328:	f8dd b010 	ldr.w	fp, [sp, #16]
  40632c:	2b00      	cmp	r3, #0
  40632e:	f040 81d4 	bne.w	4066da <_vfiprintf_r+0xc3e>
  406332:	2300      	movs	r3, #0
  406334:	9310      	str	r3, [sp, #64]	; 0x40
  406336:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40633a:	f013 0f01 	tst.w	r3, #1
  40633e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406342:	d102      	bne.n	40634a <_vfiprintf_r+0x8ae>
  406344:	059a      	lsls	r2, r3, #22
  406346:	f140 80de 	bpl.w	406506 <_vfiprintf_r+0xa6a>
  40634a:	065b      	lsls	r3, r3, #25
  40634c:	f53f acb2 	bmi.w	405cb4 <_vfiprintf_r+0x218>
  406350:	9803      	ldr	r0, [sp, #12]
  406352:	b02d      	add	sp, #180	; 0xb4
  406354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406358:	2a00      	cmp	r2, #0
  40635a:	f040 8106 	bne.w	40656a <_vfiprintf_r+0xace>
  40635e:	9a05      	ldr	r2, [sp, #20]
  406360:	921d      	str	r2, [sp, #116]	; 0x74
  406362:	2301      	movs	r3, #1
  406364:	9211      	str	r2, [sp, #68]	; 0x44
  406366:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40636a:	9310      	str	r3, [sp, #64]	; 0x40
  40636c:	46ca      	mov	sl, r9
  40636e:	f10a 0a08 	add.w	sl, sl, #8
  406372:	9b02      	ldr	r3, [sp, #8]
  406374:	0759      	lsls	r1, r3, #29
  406376:	d504      	bpl.n	406382 <_vfiprintf_r+0x8e6>
  406378:	9b08      	ldr	r3, [sp, #32]
  40637a:	9901      	ldr	r1, [sp, #4]
  40637c:	1a5c      	subs	r4, r3, r1
  40637e:	2c00      	cmp	r4, #0
  406380:	dc81      	bgt.n	406286 <_vfiprintf_r+0x7ea>
  406382:	9b03      	ldr	r3, [sp, #12]
  406384:	9908      	ldr	r1, [sp, #32]
  406386:	9801      	ldr	r0, [sp, #4]
  406388:	4281      	cmp	r1, r0
  40638a:	bfac      	ite	ge
  40638c:	185b      	addge	r3, r3, r1
  40638e:	181b      	addlt	r3, r3, r0
  406390:	9303      	str	r3, [sp, #12]
  406392:	bb72      	cbnz	r2, 4063f2 <_vfiprintf_r+0x956>
  406394:	2300      	movs	r3, #0
  406396:	9310      	str	r3, [sp, #64]	; 0x40
  406398:	46ca      	mov	sl, r9
  40639a:	f7ff bbbc 	b.w	405b16 <_vfiprintf_r+0x7a>
  40639e:	aa0f      	add	r2, sp, #60	; 0x3c
  4063a0:	9904      	ldr	r1, [sp, #16]
  4063a2:	4620      	mov	r0, r4
  4063a4:	f7ff fb3a 	bl	405a1c <__sprint_r.part.0>
  4063a8:	bb50      	cbnz	r0, 406400 <_vfiprintf_r+0x964>
  4063aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063ae:	f101 0e01 	add.w	lr, r1, #1
  4063b2:	46cc      	mov	ip, r9
  4063b4:	e548      	b.n	405e48 <_vfiprintf_r+0x3ac>
  4063b6:	2a00      	cmp	r2, #0
  4063b8:	f040 8140 	bne.w	40663c <_vfiprintf_r+0xba0>
  4063bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4063c0:	2900      	cmp	r1, #0
  4063c2:	f000 811b 	beq.w	4065fc <_vfiprintf_r+0xb60>
  4063c6:	2201      	movs	r2, #1
  4063c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4063cc:	4610      	mov	r0, r2
  4063ce:	921d      	str	r2, [sp, #116]	; 0x74
  4063d0:	911c      	str	r1, [sp, #112]	; 0x70
  4063d2:	46ca      	mov	sl, r9
  4063d4:	4601      	mov	r1, r0
  4063d6:	f10a 0a08 	add.w	sl, sl, #8
  4063da:	3001      	adds	r0, #1
  4063dc:	e507      	b.n	405dee <_vfiprintf_r+0x352>
  4063de:	9b02      	ldr	r3, [sp, #8]
  4063e0:	2a01      	cmp	r2, #1
  4063e2:	f000 8098 	beq.w	406516 <_vfiprintf_r+0xa7a>
  4063e6:	2a02      	cmp	r2, #2
  4063e8:	d10d      	bne.n	406406 <_vfiprintf_r+0x96a>
  4063ea:	9302      	str	r3, [sp, #8]
  4063ec:	2600      	movs	r6, #0
  4063ee:	2700      	movs	r7, #0
  4063f0:	e5b0      	b.n	405f54 <_vfiprintf_r+0x4b8>
  4063f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4063f4:	9904      	ldr	r1, [sp, #16]
  4063f6:	9806      	ldr	r0, [sp, #24]
  4063f8:	f7ff fb10 	bl	405a1c <__sprint_r.part.0>
  4063fc:	2800      	cmp	r0, #0
  4063fe:	d0c9      	beq.n	406394 <_vfiprintf_r+0x8f8>
  406400:	f8dd b010 	ldr.w	fp, [sp, #16]
  406404:	e797      	b.n	406336 <_vfiprintf_r+0x89a>
  406406:	9302      	str	r3, [sp, #8]
  406408:	2600      	movs	r6, #0
  40640a:	2700      	movs	r7, #0
  40640c:	4649      	mov	r1, r9
  40640e:	e000      	b.n	406412 <_vfiprintf_r+0x976>
  406410:	4659      	mov	r1, fp
  406412:	08f2      	lsrs	r2, r6, #3
  406414:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406418:	08f8      	lsrs	r0, r7, #3
  40641a:	f006 0307 	and.w	r3, r6, #7
  40641e:	4607      	mov	r7, r0
  406420:	4616      	mov	r6, r2
  406422:	3330      	adds	r3, #48	; 0x30
  406424:	ea56 0207 	orrs.w	r2, r6, r7
  406428:	f801 3c01 	strb.w	r3, [r1, #-1]
  40642c:	f101 3bff 	add.w	fp, r1, #4294967295
  406430:	d1ee      	bne.n	406410 <_vfiprintf_r+0x974>
  406432:	9a02      	ldr	r2, [sp, #8]
  406434:	07d6      	lsls	r6, r2, #31
  406436:	f57f ad9d 	bpl.w	405f74 <_vfiprintf_r+0x4d8>
  40643a:	2b30      	cmp	r3, #48	; 0x30
  40643c:	f43f ad9a 	beq.w	405f74 <_vfiprintf_r+0x4d8>
  406440:	3902      	subs	r1, #2
  406442:	2330      	movs	r3, #48	; 0x30
  406444:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406448:	eba9 0301 	sub.w	r3, r9, r1
  40644c:	9305      	str	r3, [sp, #20]
  40644e:	468b      	mov	fp, r1
  406450:	e476      	b.n	405d40 <_vfiprintf_r+0x2a4>
  406452:	9b03      	ldr	r3, [sp, #12]
  406454:	9a08      	ldr	r2, [sp, #32]
  406456:	428a      	cmp	r2, r1
  406458:	bfac      	ite	ge
  40645a:	189b      	addge	r3, r3, r2
  40645c:	185b      	addlt	r3, r3, r1
  40645e:	9303      	str	r3, [sp, #12]
  406460:	e798      	b.n	406394 <_vfiprintf_r+0x8f8>
  406462:	2202      	movs	r2, #2
  406464:	e44d      	b.n	405d02 <_vfiprintf_r+0x266>
  406466:	2f00      	cmp	r7, #0
  406468:	bf08      	it	eq
  40646a:	2e0a      	cmpeq	r6, #10
  40646c:	d352      	bcc.n	406514 <_vfiprintf_r+0xa78>
  40646e:	46cb      	mov	fp, r9
  406470:	4630      	mov	r0, r6
  406472:	4639      	mov	r1, r7
  406474:	220a      	movs	r2, #10
  406476:	2300      	movs	r3, #0
  406478:	f001 fe9c 	bl	4081b4 <__aeabi_uldivmod>
  40647c:	3230      	adds	r2, #48	; 0x30
  40647e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406482:	4630      	mov	r0, r6
  406484:	4639      	mov	r1, r7
  406486:	2300      	movs	r3, #0
  406488:	220a      	movs	r2, #10
  40648a:	f001 fe93 	bl	4081b4 <__aeabi_uldivmod>
  40648e:	4606      	mov	r6, r0
  406490:	460f      	mov	r7, r1
  406492:	ea56 0307 	orrs.w	r3, r6, r7
  406496:	d1eb      	bne.n	406470 <_vfiprintf_r+0x9d4>
  406498:	e56c      	b.n	405f74 <_vfiprintf_r+0x4d8>
  40649a:	9405      	str	r4, [sp, #20]
  40649c:	46cb      	mov	fp, r9
  40649e:	e44f      	b.n	405d40 <_vfiprintf_r+0x2a4>
  4064a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4064a2:	9904      	ldr	r1, [sp, #16]
  4064a4:	9806      	ldr	r0, [sp, #24]
  4064a6:	f7ff fab9 	bl	405a1c <__sprint_r.part.0>
  4064aa:	2800      	cmp	r0, #0
  4064ac:	d1a8      	bne.n	406400 <_vfiprintf_r+0x964>
  4064ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064b0:	46ca      	mov	sl, r9
  4064b2:	e75e      	b.n	406372 <_vfiprintf_r+0x8d6>
  4064b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4064b6:	9904      	ldr	r1, [sp, #16]
  4064b8:	9806      	ldr	r0, [sp, #24]
  4064ba:	f7ff faaf 	bl	405a1c <__sprint_r.part.0>
  4064be:	2800      	cmp	r0, #0
  4064c0:	d19e      	bne.n	406400 <_vfiprintf_r+0x964>
  4064c2:	46ca      	mov	sl, r9
  4064c4:	f7ff bbc0 	b.w	405c48 <_vfiprintf_r+0x1ac>
  4064c8:	00408874 	.word	0x00408874
  4064cc:	00408864 	.word	0x00408864
  4064d0:	3104      	adds	r1, #4
  4064d2:	6816      	ldr	r6, [r2, #0]
  4064d4:	9107      	str	r1, [sp, #28]
  4064d6:	2201      	movs	r2, #1
  4064d8:	2700      	movs	r7, #0
  4064da:	e412      	b.n	405d02 <_vfiprintf_r+0x266>
  4064dc:	9807      	ldr	r0, [sp, #28]
  4064de:	4601      	mov	r1, r0
  4064e0:	3104      	adds	r1, #4
  4064e2:	6806      	ldr	r6, [r0, #0]
  4064e4:	9107      	str	r1, [sp, #28]
  4064e6:	2700      	movs	r7, #0
  4064e8:	e40b      	b.n	405d02 <_vfiprintf_r+0x266>
  4064ea:	680e      	ldr	r6, [r1, #0]
  4064ec:	3104      	adds	r1, #4
  4064ee:	9107      	str	r1, [sp, #28]
  4064f0:	2700      	movs	r7, #0
  4064f2:	e591      	b.n	406018 <_vfiprintf_r+0x57c>
  4064f4:	9907      	ldr	r1, [sp, #28]
  4064f6:	680e      	ldr	r6, [r1, #0]
  4064f8:	460a      	mov	r2, r1
  4064fa:	17f7      	asrs	r7, r6, #31
  4064fc:	3204      	adds	r2, #4
  4064fe:	9207      	str	r2, [sp, #28]
  406500:	4630      	mov	r0, r6
  406502:	4639      	mov	r1, r7
  406504:	e50f      	b.n	405f26 <_vfiprintf_r+0x48a>
  406506:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40650a:	f000 fe7f 	bl	40720c <__retarget_lock_release_recursive>
  40650e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406512:	e71a      	b.n	40634a <_vfiprintf_r+0x8ae>
  406514:	9b02      	ldr	r3, [sp, #8]
  406516:	9302      	str	r3, [sp, #8]
  406518:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40651c:	3630      	adds	r6, #48	; 0x30
  40651e:	2301      	movs	r3, #1
  406520:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406524:	9305      	str	r3, [sp, #20]
  406526:	e40b      	b.n	405d40 <_vfiprintf_r+0x2a4>
  406528:	aa0f      	add	r2, sp, #60	; 0x3c
  40652a:	9904      	ldr	r1, [sp, #16]
  40652c:	9806      	ldr	r0, [sp, #24]
  40652e:	f7ff fa75 	bl	405a1c <__sprint_r.part.0>
  406532:	2800      	cmp	r0, #0
  406534:	f47f af64 	bne.w	406400 <_vfiprintf_r+0x964>
  406538:	9910      	ldr	r1, [sp, #64]	; 0x40
  40653a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40653c:	1c48      	adds	r0, r1, #1
  40653e:	46ca      	mov	sl, r9
  406540:	e651      	b.n	4061e6 <_vfiprintf_r+0x74a>
  406542:	aa0f      	add	r2, sp, #60	; 0x3c
  406544:	9904      	ldr	r1, [sp, #16]
  406546:	9806      	ldr	r0, [sp, #24]
  406548:	f7ff fa68 	bl	405a1c <__sprint_r.part.0>
  40654c:	2800      	cmp	r0, #0
  40654e:	f47f af57 	bne.w	406400 <_vfiprintf_r+0x964>
  406552:	9910      	ldr	r1, [sp, #64]	; 0x40
  406554:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406556:	1c48      	adds	r0, r1, #1
  406558:	46ca      	mov	sl, r9
  40655a:	e448      	b.n	405dee <_vfiprintf_r+0x352>
  40655c:	2a00      	cmp	r2, #0
  40655e:	f040 8091 	bne.w	406684 <_vfiprintf_r+0xbe8>
  406562:	2001      	movs	r0, #1
  406564:	4611      	mov	r1, r2
  406566:	46ca      	mov	sl, r9
  406568:	e641      	b.n	4061ee <_vfiprintf_r+0x752>
  40656a:	aa0f      	add	r2, sp, #60	; 0x3c
  40656c:	9904      	ldr	r1, [sp, #16]
  40656e:	9806      	ldr	r0, [sp, #24]
  406570:	f7ff fa54 	bl	405a1c <__sprint_r.part.0>
  406574:	2800      	cmp	r0, #0
  406576:	f47f af43 	bne.w	406400 <_vfiprintf_r+0x964>
  40657a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40657c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40657e:	3001      	adds	r0, #1
  406580:	46ca      	mov	sl, r9
  406582:	e667      	b.n	406254 <_vfiprintf_r+0x7b8>
  406584:	46d3      	mov	fp, sl
  406586:	e6d6      	b.n	406336 <_vfiprintf_r+0x89a>
  406588:	9e07      	ldr	r6, [sp, #28]
  40658a:	3607      	adds	r6, #7
  40658c:	f026 0207 	bic.w	r2, r6, #7
  406590:	f102 0108 	add.w	r1, r2, #8
  406594:	e9d2 6700 	ldrd	r6, r7, [r2]
  406598:	9107      	str	r1, [sp, #28]
  40659a:	2201      	movs	r2, #1
  40659c:	f7ff bbb1 	b.w	405d02 <_vfiprintf_r+0x266>
  4065a0:	9e07      	ldr	r6, [sp, #28]
  4065a2:	3607      	adds	r6, #7
  4065a4:	f026 0607 	bic.w	r6, r6, #7
  4065a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4065ac:	f106 0208 	add.w	r2, r6, #8
  4065b0:	9207      	str	r2, [sp, #28]
  4065b2:	4606      	mov	r6, r0
  4065b4:	460f      	mov	r7, r1
  4065b6:	e4b6      	b.n	405f26 <_vfiprintf_r+0x48a>
  4065b8:	9e07      	ldr	r6, [sp, #28]
  4065ba:	3607      	adds	r6, #7
  4065bc:	f026 0207 	bic.w	r2, r6, #7
  4065c0:	f102 0108 	add.w	r1, r2, #8
  4065c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4065c8:	9107      	str	r1, [sp, #28]
  4065ca:	2200      	movs	r2, #0
  4065cc:	f7ff bb99 	b.w	405d02 <_vfiprintf_r+0x266>
  4065d0:	9e07      	ldr	r6, [sp, #28]
  4065d2:	3607      	adds	r6, #7
  4065d4:	f026 0107 	bic.w	r1, r6, #7
  4065d8:	f101 0008 	add.w	r0, r1, #8
  4065dc:	9007      	str	r0, [sp, #28]
  4065de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4065e2:	e519      	b.n	406018 <_vfiprintf_r+0x57c>
  4065e4:	46cb      	mov	fp, r9
  4065e6:	f7ff bbab 	b.w	405d40 <_vfiprintf_r+0x2a4>
  4065ea:	252d      	movs	r5, #45	; 0x2d
  4065ec:	4276      	negs	r6, r6
  4065ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4065f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065f6:	2201      	movs	r2, #1
  4065f8:	f7ff bb88 	b.w	405d0c <_vfiprintf_r+0x270>
  4065fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4065fe:	b9b3      	cbnz	r3, 40662e <_vfiprintf_r+0xb92>
  406600:	4611      	mov	r1, r2
  406602:	2001      	movs	r0, #1
  406604:	46ca      	mov	sl, r9
  406606:	e5f2      	b.n	4061ee <_vfiprintf_r+0x752>
  406608:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40660c:	f000 fdfe 	bl	40720c <__retarget_lock_release_recursive>
  406610:	f04f 33ff 	mov.w	r3, #4294967295
  406614:	9303      	str	r3, [sp, #12]
  406616:	f7ff bb50 	b.w	405cba <_vfiprintf_r+0x21e>
  40661a:	aa0f      	add	r2, sp, #60	; 0x3c
  40661c:	9904      	ldr	r1, [sp, #16]
  40661e:	9806      	ldr	r0, [sp, #24]
  406620:	f7ff f9fc 	bl	405a1c <__sprint_r.part.0>
  406624:	2800      	cmp	r0, #0
  406626:	f47f aeeb 	bne.w	406400 <_vfiprintf_r+0x964>
  40662a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40662c:	e6a9      	b.n	406382 <_vfiprintf_r+0x8e6>
  40662e:	ab0e      	add	r3, sp, #56	; 0x38
  406630:	2202      	movs	r2, #2
  406632:	931c      	str	r3, [sp, #112]	; 0x70
  406634:	921d      	str	r2, [sp, #116]	; 0x74
  406636:	2001      	movs	r0, #1
  406638:	46ca      	mov	sl, r9
  40663a:	e5d0      	b.n	4061de <_vfiprintf_r+0x742>
  40663c:	aa0f      	add	r2, sp, #60	; 0x3c
  40663e:	9904      	ldr	r1, [sp, #16]
  406640:	9806      	ldr	r0, [sp, #24]
  406642:	f7ff f9eb 	bl	405a1c <__sprint_r.part.0>
  406646:	2800      	cmp	r0, #0
  406648:	f47f aeda 	bne.w	406400 <_vfiprintf_r+0x964>
  40664c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40664e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406650:	1c48      	adds	r0, r1, #1
  406652:	46ca      	mov	sl, r9
  406654:	e5a4      	b.n	4061a0 <_vfiprintf_r+0x704>
  406656:	9a07      	ldr	r2, [sp, #28]
  406658:	9903      	ldr	r1, [sp, #12]
  40665a:	6813      	ldr	r3, [r2, #0]
  40665c:	17cd      	asrs	r5, r1, #31
  40665e:	4608      	mov	r0, r1
  406660:	3204      	adds	r2, #4
  406662:	4629      	mov	r1, r5
  406664:	9207      	str	r2, [sp, #28]
  406666:	e9c3 0100 	strd	r0, r1, [r3]
  40666a:	f7ff ba54 	b.w	405b16 <_vfiprintf_r+0x7a>
  40666e:	4658      	mov	r0, fp
  406670:	9607      	str	r6, [sp, #28]
  406672:	9302      	str	r3, [sp, #8]
  406674:	f7ff f964 	bl	405940 <strlen>
  406678:	2400      	movs	r4, #0
  40667a:	9005      	str	r0, [sp, #20]
  40667c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406680:	f7ff bb5e 	b.w	405d40 <_vfiprintf_r+0x2a4>
  406684:	aa0f      	add	r2, sp, #60	; 0x3c
  406686:	9904      	ldr	r1, [sp, #16]
  406688:	9806      	ldr	r0, [sp, #24]
  40668a:	f7ff f9c7 	bl	405a1c <__sprint_r.part.0>
  40668e:	2800      	cmp	r0, #0
  406690:	f47f aeb6 	bne.w	406400 <_vfiprintf_r+0x964>
  406694:	9910      	ldr	r1, [sp, #64]	; 0x40
  406696:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406698:	1c48      	adds	r0, r1, #1
  40669a:	46ca      	mov	sl, r9
  40669c:	e5a7      	b.n	4061ee <_vfiprintf_r+0x752>
  40669e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4066a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4066a2:	4e20      	ldr	r6, [pc, #128]	; (406724 <_vfiprintf_r+0xc88>)
  4066a4:	3101      	adds	r1, #1
  4066a6:	f7ff bb90 	b.w	405dca <_vfiprintf_r+0x32e>
  4066aa:	2c06      	cmp	r4, #6
  4066ac:	bf28      	it	cs
  4066ae:	2406      	movcs	r4, #6
  4066b0:	9405      	str	r4, [sp, #20]
  4066b2:	9607      	str	r6, [sp, #28]
  4066b4:	9401      	str	r4, [sp, #4]
  4066b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 406728 <_vfiprintf_r+0xc8c>
  4066ba:	e4d5      	b.n	406068 <_vfiprintf_r+0x5cc>
  4066bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4066be:	4e19      	ldr	r6, [pc, #100]	; (406724 <_vfiprintf_r+0xc88>)
  4066c0:	3001      	adds	r0, #1
  4066c2:	e603      	b.n	4062cc <_vfiprintf_r+0x830>
  4066c4:	9405      	str	r4, [sp, #20]
  4066c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4066ca:	9607      	str	r6, [sp, #28]
  4066cc:	9302      	str	r3, [sp, #8]
  4066ce:	4604      	mov	r4, r0
  4066d0:	f7ff bb36 	b.w	405d40 <_vfiprintf_r+0x2a4>
  4066d4:	4686      	mov	lr, r0
  4066d6:	f7ff bbce 	b.w	405e76 <_vfiprintf_r+0x3da>
  4066da:	9806      	ldr	r0, [sp, #24]
  4066dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4066de:	4659      	mov	r1, fp
  4066e0:	f7ff f99c 	bl	405a1c <__sprint_r.part.0>
  4066e4:	2800      	cmp	r0, #0
  4066e6:	f43f ae24 	beq.w	406332 <_vfiprintf_r+0x896>
  4066ea:	e624      	b.n	406336 <_vfiprintf_r+0x89a>
  4066ec:	9907      	ldr	r1, [sp, #28]
  4066ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4066f2:	680c      	ldr	r4, [r1, #0]
  4066f4:	3104      	adds	r1, #4
  4066f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4066fa:	46b8      	mov	r8, r7
  4066fc:	9107      	str	r1, [sp, #28]
  4066fe:	f7ff ba3f 	b.w	405b80 <_vfiprintf_r+0xe4>
  406702:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406706:	e43c      	b.n	405f82 <_vfiprintf_r+0x4e6>
  406708:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40670c:	e521      	b.n	406152 <_vfiprintf_r+0x6b6>
  40670e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406712:	f7ff bbf4 	b.w	405efe <_vfiprintf_r+0x462>
  406716:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40671a:	e491      	b.n	406040 <_vfiprintf_r+0x5a4>
  40671c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406720:	e469      	b.n	405ff6 <_vfiprintf_r+0x55a>
  406722:	bf00      	nop
  406724:	00408864 	.word	0x00408864
  406728:	0040885c 	.word	0x0040885c

0040672c <__sbprintf>:
  40672c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406730:	460c      	mov	r4, r1
  406732:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406736:	8989      	ldrh	r1, [r1, #12]
  406738:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40673a:	89e5      	ldrh	r5, [r4, #14]
  40673c:	9619      	str	r6, [sp, #100]	; 0x64
  40673e:	f021 0102 	bic.w	r1, r1, #2
  406742:	4606      	mov	r6, r0
  406744:	69e0      	ldr	r0, [r4, #28]
  406746:	f8ad 100c 	strh.w	r1, [sp, #12]
  40674a:	4617      	mov	r7, r2
  40674c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406750:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406752:	f8ad 500e 	strh.w	r5, [sp, #14]
  406756:	4698      	mov	r8, r3
  406758:	ad1a      	add	r5, sp, #104	; 0x68
  40675a:	2300      	movs	r3, #0
  40675c:	9007      	str	r0, [sp, #28]
  40675e:	a816      	add	r0, sp, #88	; 0x58
  406760:	9209      	str	r2, [sp, #36]	; 0x24
  406762:	9306      	str	r3, [sp, #24]
  406764:	9500      	str	r5, [sp, #0]
  406766:	9504      	str	r5, [sp, #16]
  406768:	9102      	str	r1, [sp, #8]
  40676a:	9105      	str	r1, [sp, #20]
  40676c:	f000 fd48 	bl	407200 <__retarget_lock_init_recursive>
  406770:	4643      	mov	r3, r8
  406772:	463a      	mov	r2, r7
  406774:	4669      	mov	r1, sp
  406776:	4630      	mov	r0, r6
  406778:	f7ff f990 	bl	405a9c <_vfiprintf_r>
  40677c:	1e05      	subs	r5, r0, #0
  40677e:	db07      	blt.n	406790 <__sbprintf+0x64>
  406780:	4630      	mov	r0, r6
  406782:	4669      	mov	r1, sp
  406784:	f000 f928 	bl	4069d8 <_fflush_r>
  406788:	2800      	cmp	r0, #0
  40678a:	bf18      	it	ne
  40678c:	f04f 35ff 	movne.w	r5, #4294967295
  406790:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406794:	065b      	lsls	r3, r3, #25
  406796:	d503      	bpl.n	4067a0 <__sbprintf+0x74>
  406798:	89a3      	ldrh	r3, [r4, #12]
  40679a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40679e:	81a3      	strh	r3, [r4, #12]
  4067a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4067a2:	f000 fd2f 	bl	407204 <__retarget_lock_close_recursive>
  4067a6:	4628      	mov	r0, r5
  4067a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4067ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004067b0 <__swsetup_r>:
  4067b0:	b538      	push	{r3, r4, r5, lr}
  4067b2:	4b30      	ldr	r3, [pc, #192]	; (406874 <__swsetup_r+0xc4>)
  4067b4:	681b      	ldr	r3, [r3, #0]
  4067b6:	4605      	mov	r5, r0
  4067b8:	460c      	mov	r4, r1
  4067ba:	b113      	cbz	r3, 4067c2 <__swsetup_r+0x12>
  4067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4067be:	2a00      	cmp	r2, #0
  4067c0:	d038      	beq.n	406834 <__swsetup_r+0x84>
  4067c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4067c6:	b293      	uxth	r3, r2
  4067c8:	0718      	lsls	r0, r3, #28
  4067ca:	d50c      	bpl.n	4067e6 <__swsetup_r+0x36>
  4067cc:	6920      	ldr	r0, [r4, #16]
  4067ce:	b1a8      	cbz	r0, 4067fc <__swsetup_r+0x4c>
  4067d0:	f013 0201 	ands.w	r2, r3, #1
  4067d4:	d01e      	beq.n	406814 <__swsetup_r+0x64>
  4067d6:	6963      	ldr	r3, [r4, #20]
  4067d8:	2200      	movs	r2, #0
  4067da:	425b      	negs	r3, r3
  4067dc:	61a3      	str	r3, [r4, #24]
  4067de:	60a2      	str	r2, [r4, #8]
  4067e0:	b1f0      	cbz	r0, 406820 <__swsetup_r+0x70>
  4067e2:	2000      	movs	r0, #0
  4067e4:	bd38      	pop	{r3, r4, r5, pc}
  4067e6:	06d9      	lsls	r1, r3, #27
  4067e8:	d53c      	bpl.n	406864 <__swsetup_r+0xb4>
  4067ea:	0758      	lsls	r0, r3, #29
  4067ec:	d426      	bmi.n	40683c <__swsetup_r+0x8c>
  4067ee:	6920      	ldr	r0, [r4, #16]
  4067f0:	f042 0308 	orr.w	r3, r2, #8
  4067f4:	81a3      	strh	r3, [r4, #12]
  4067f6:	b29b      	uxth	r3, r3
  4067f8:	2800      	cmp	r0, #0
  4067fa:	d1e9      	bne.n	4067d0 <__swsetup_r+0x20>
  4067fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406800:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406804:	d0e4      	beq.n	4067d0 <__swsetup_r+0x20>
  406806:	4628      	mov	r0, r5
  406808:	4621      	mov	r1, r4
  40680a:	f000 fd2f 	bl	40726c <__smakebuf_r>
  40680e:	89a3      	ldrh	r3, [r4, #12]
  406810:	6920      	ldr	r0, [r4, #16]
  406812:	e7dd      	b.n	4067d0 <__swsetup_r+0x20>
  406814:	0799      	lsls	r1, r3, #30
  406816:	bf58      	it	pl
  406818:	6962      	ldrpl	r2, [r4, #20]
  40681a:	60a2      	str	r2, [r4, #8]
  40681c:	2800      	cmp	r0, #0
  40681e:	d1e0      	bne.n	4067e2 <__swsetup_r+0x32>
  406820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406824:	061a      	lsls	r2, r3, #24
  406826:	d5dd      	bpl.n	4067e4 <__swsetup_r+0x34>
  406828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40682c:	81a3      	strh	r3, [r4, #12]
  40682e:	f04f 30ff 	mov.w	r0, #4294967295
  406832:	bd38      	pop	{r3, r4, r5, pc}
  406834:	4618      	mov	r0, r3
  406836:	f000 f927 	bl	406a88 <__sinit>
  40683a:	e7c2      	b.n	4067c2 <__swsetup_r+0x12>
  40683c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40683e:	b151      	cbz	r1, 406856 <__swsetup_r+0xa6>
  406840:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406844:	4299      	cmp	r1, r3
  406846:	d004      	beq.n	406852 <__swsetup_r+0xa2>
  406848:	4628      	mov	r0, r5
  40684a:	f000 fa43 	bl	406cd4 <_free_r>
  40684e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406852:	2300      	movs	r3, #0
  406854:	6323      	str	r3, [r4, #48]	; 0x30
  406856:	2300      	movs	r3, #0
  406858:	6920      	ldr	r0, [r4, #16]
  40685a:	6063      	str	r3, [r4, #4]
  40685c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406860:	6020      	str	r0, [r4, #0]
  406862:	e7c5      	b.n	4067f0 <__swsetup_r+0x40>
  406864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406868:	2309      	movs	r3, #9
  40686a:	602b      	str	r3, [r5, #0]
  40686c:	f04f 30ff 	mov.w	r0, #4294967295
  406870:	81a2      	strh	r2, [r4, #12]
  406872:	bd38      	pop	{r3, r4, r5, pc}
  406874:	20000020 	.word	0x20000020

00406878 <register_fini>:
  406878:	4b02      	ldr	r3, [pc, #8]	; (406884 <register_fini+0xc>)
  40687a:	b113      	cbz	r3, 406882 <register_fini+0xa>
  40687c:	4802      	ldr	r0, [pc, #8]	; (406888 <register_fini+0x10>)
  40687e:	f000 b805 	b.w	40688c <atexit>
  406882:	4770      	bx	lr
  406884:	00000000 	.word	0x00000000
  406888:	00406af9 	.word	0x00406af9

0040688c <atexit>:
  40688c:	2300      	movs	r3, #0
  40688e:	4601      	mov	r1, r0
  406890:	461a      	mov	r2, r3
  406892:	4618      	mov	r0, r3
  406894:	f001 bb66 	b.w	407f64 <__register_exitproc>

00406898 <__sflush_r>:
  406898:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40689c:	b29a      	uxth	r2, r3
  40689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4068a2:	460d      	mov	r5, r1
  4068a4:	0711      	lsls	r1, r2, #28
  4068a6:	4680      	mov	r8, r0
  4068a8:	d43a      	bmi.n	406920 <__sflush_r+0x88>
  4068aa:	686a      	ldr	r2, [r5, #4]
  4068ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4068b0:	2a00      	cmp	r2, #0
  4068b2:	81ab      	strh	r3, [r5, #12]
  4068b4:	dd6f      	ble.n	406996 <__sflush_r+0xfe>
  4068b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4068b8:	2c00      	cmp	r4, #0
  4068ba:	d049      	beq.n	406950 <__sflush_r+0xb8>
  4068bc:	2200      	movs	r2, #0
  4068be:	b29b      	uxth	r3, r3
  4068c0:	f8d8 6000 	ldr.w	r6, [r8]
  4068c4:	f8c8 2000 	str.w	r2, [r8]
  4068c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4068cc:	d067      	beq.n	40699e <__sflush_r+0x106>
  4068ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4068d0:	075f      	lsls	r7, r3, #29
  4068d2:	d505      	bpl.n	4068e0 <__sflush_r+0x48>
  4068d4:	6869      	ldr	r1, [r5, #4]
  4068d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4068d8:	1a52      	subs	r2, r2, r1
  4068da:	b10b      	cbz	r3, 4068e0 <__sflush_r+0x48>
  4068dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4068de:	1ad2      	subs	r2, r2, r3
  4068e0:	2300      	movs	r3, #0
  4068e2:	69e9      	ldr	r1, [r5, #28]
  4068e4:	4640      	mov	r0, r8
  4068e6:	47a0      	blx	r4
  4068e8:	1c44      	adds	r4, r0, #1
  4068ea:	d03c      	beq.n	406966 <__sflush_r+0xce>
  4068ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4068f0:	692a      	ldr	r2, [r5, #16]
  4068f2:	602a      	str	r2, [r5, #0]
  4068f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4068f8:	2200      	movs	r2, #0
  4068fa:	81ab      	strh	r3, [r5, #12]
  4068fc:	04db      	lsls	r3, r3, #19
  4068fe:	606a      	str	r2, [r5, #4]
  406900:	d447      	bmi.n	406992 <__sflush_r+0xfa>
  406902:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406904:	f8c8 6000 	str.w	r6, [r8]
  406908:	b311      	cbz	r1, 406950 <__sflush_r+0xb8>
  40690a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40690e:	4299      	cmp	r1, r3
  406910:	d002      	beq.n	406918 <__sflush_r+0x80>
  406912:	4640      	mov	r0, r8
  406914:	f000 f9de 	bl	406cd4 <_free_r>
  406918:	2000      	movs	r0, #0
  40691a:	6328      	str	r0, [r5, #48]	; 0x30
  40691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406920:	692e      	ldr	r6, [r5, #16]
  406922:	b1ae      	cbz	r6, 406950 <__sflush_r+0xb8>
  406924:	682c      	ldr	r4, [r5, #0]
  406926:	602e      	str	r6, [r5, #0]
  406928:	0791      	lsls	r1, r2, #30
  40692a:	bf0c      	ite	eq
  40692c:	696b      	ldreq	r3, [r5, #20]
  40692e:	2300      	movne	r3, #0
  406930:	1ba4      	subs	r4, r4, r6
  406932:	60ab      	str	r3, [r5, #8]
  406934:	e00a      	b.n	40694c <__sflush_r+0xb4>
  406936:	4623      	mov	r3, r4
  406938:	4632      	mov	r2, r6
  40693a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40693c:	69e9      	ldr	r1, [r5, #28]
  40693e:	4640      	mov	r0, r8
  406940:	47b8      	blx	r7
  406942:	2800      	cmp	r0, #0
  406944:	eba4 0400 	sub.w	r4, r4, r0
  406948:	4406      	add	r6, r0
  40694a:	dd04      	ble.n	406956 <__sflush_r+0xbe>
  40694c:	2c00      	cmp	r4, #0
  40694e:	dcf2      	bgt.n	406936 <__sflush_r+0x9e>
  406950:	2000      	movs	r0, #0
  406952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406956:	89ab      	ldrh	r3, [r5, #12]
  406958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40695c:	81ab      	strh	r3, [r5, #12]
  40695e:	f04f 30ff 	mov.w	r0, #4294967295
  406962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406966:	f8d8 4000 	ldr.w	r4, [r8]
  40696a:	2c1d      	cmp	r4, #29
  40696c:	d8f3      	bhi.n	406956 <__sflush_r+0xbe>
  40696e:	4b19      	ldr	r3, [pc, #100]	; (4069d4 <__sflush_r+0x13c>)
  406970:	40e3      	lsrs	r3, r4
  406972:	43db      	mvns	r3, r3
  406974:	f013 0301 	ands.w	r3, r3, #1
  406978:	d1ed      	bne.n	406956 <__sflush_r+0xbe>
  40697a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40697e:	606b      	str	r3, [r5, #4]
  406980:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406984:	6929      	ldr	r1, [r5, #16]
  406986:	81ab      	strh	r3, [r5, #12]
  406988:	04da      	lsls	r2, r3, #19
  40698a:	6029      	str	r1, [r5, #0]
  40698c:	d5b9      	bpl.n	406902 <__sflush_r+0x6a>
  40698e:	2c00      	cmp	r4, #0
  406990:	d1b7      	bne.n	406902 <__sflush_r+0x6a>
  406992:	6528      	str	r0, [r5, #80]	; 0x50
  406994:	e7b5      	b.n	406902 <__sflush_r+0x6a>
  406996:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406998:	2a00      	cmp	r2, #0
  40699a:	dc8c      	bgt.n	4068b6 <__sflush_r+0x1e>
  40699c:	e7d8      	b.n	406950 <__sflush_r+0xb8>
  40699e:	2301      	movs	r3, #1
  4069a0:	69e9      	ldr	r1, [r5, #28]
  4069a2:	4640      	mov	r0, r8
  4069a4:	47a0      	blx	r4
  4069a6:	1c43      	adds	r3, r0, #1
  4069a8:	4602      	mov	r2, r0
  4069aa:	d002      	beq.n	4069b2 <__sflush_r+0x11a>
  4069ac:	89ab      	ldrh	r3, [r5, #12]
  4069ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4069b0:	e78e      	b.n	4068d0 <__sflush_r+0x38>
  4069b2:	f8d8 3000 	ldr.w	r3, [r8]
  4069b6:	2b00      	cmp	r3, #0
  4069b8:	d0f8      	beq.n	4069ac <__sflush_r+0x114>
  4069ba:	2b1d      	cmp	r3, #29
  4069bc:	d001      	beq.n	4069c2 <__sflush_r+0x12a>
  4069be:	2b16      	cmp	r3, #22
  4069c0:	d102      	bne.n	4069c8 <__sflush_r+0x130>
  4069c2:	f8c8 6000 	str.w	r6, [r8]
  4069c6:	e7c3      	b.n	406950 <__sflush_r+0xb8>
  4069c8:	89ab      	ldrh	r3, [r5, #12]
  4069ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069ce:	81ab      	strh	r3, [r5, #12]
  4069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069d4:	20400001 	.word	0x20400001

004069d8 <_fflush_r>:
  4069d8:	b538      	push	{r3, r4, r5, lr}
  4069da:	460d      	mov	r5, r1
  4069dc:	4604      	mov	r4, r0
  4069de:	b108      	cbz	r0, 4069e4 <_fflush_r+0xc>
  4069e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4069e2:	b1bb      	cbz	r3, 406a14 <_fflush_r+0x3c>
  4069e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4069e8:	b188      	cbz	r0, 406a0e <_fflush_r+0x36>
  4069ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4069ec:	07db      	lsls	r3, r3, #31
  4069ee:	d401      	bmi.n	4069f4 <_fflush_r+0x1c>
  4069f0:	0581      	lsls	r1, r0, #22
  4069f2:	d517      	bpl.n	406a24 <_fflush_r+0x4c>
  4069f4:	4620      	mov	r0, r4
  4069f6:	4629      	mov	r1, r5
  4069f8:	f7ff ff4e 	bl	406898 <__sflush_r>
  4069fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4069fe:	07da      	lsls	r2, r3, #31
  406a00:	4604      	mov	r4, r0
  406a02:	d402      	bmi.n	406a0a <_fflush_r+0x32>
  406a04:	89ab      	ldrh	r3, [r5, #12]
  406a06:	059b      	lsls	r3, r3, #22
  406a08:	d507      	bpl.n	406a1a <_fflush_r+0x42>
  406a0a:	4620      	mov	r0, r4
  406a0c:	bd38      	pop	{r3, r4, r5, pc}
  406a0e:	4604      	mov	r4, r0
  406a10:	4620      	mov	r0, r4
  406a12:	bd38      	pop	{r3, r4, r5, pc}
  406a14:	f000 f838 	bl	406a88 <__sinit>
  406a18:	e7e4      	b.n	4069e4 <_fflush_r+0xc>
  406a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406a1c:	f000 fbf6 	bl	40720c <__retarget_lock_release_recursive>
  406a20:	4620      	mov	r0, r4
  406a22:	bd38      	pop	{r3, r4, r5, pc}
  406a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406a26:	f000 fbef 	bl	407208 <__retarget_lock_acquire_recursive>
  406a2a:	e7e3      	b.n	4069f4 <_fflush_r+0x1c>

00406a2c <_cleanup_r>:
  406a2c:	4901      	ldr	r1, [pc, #4]	; (406a34 <_cleanup_r+0x8>)
  406a2e:	f000 bbaf 	b.w	407190 <_fwalk_reent>
  406a32:	bf00      	nop
  406a34:	0040804d 	.word	0x0040804d

00406a38 <std.isra.0>:
  406a38:	b510      	push	{r4, lr}
  406a3a:	2300      	movs	r3, #0
  406a3c:	4604      	mov	r4, r0
  406a3e:	8181      	strh	r1, [r0, #12]
  406a40:	81c2      	strh	r2, [r0, #14]
  406a42:	6003      	str	r3, [r0, #0]
  406a44:	6043      	str	r3, [r0, #4]
  406a46:	6083      	str	r3, [r0, #8]
  406a48:	6643      	str	r3, [r0, #100]	; 0x64
  406a4a:	6103      	str	r3, [r0, #16]
  406a4c:	6143      	str	r3, [r0, #20]
  406a4e:	6183      	str	r3, [r0, #24]
  406a50:	4619      	mov	r1, r3
  406a52:	2208      	movs	r2, #8
  406a54:	305c      	adds	r0, #92	; 0x5c
  406a56:	f7fe fdf7 	bl	405648 <memset>
  406a5a:	4807      	ldr	r0, [pc, #28]	; (406a78 <std.isra.0+0x40>)
  406a5c:	4907      	ldr	r1, [pc, #28]	; (406a7c <std.isra.0+0x44>)
  406a5e:	4a08      	ldr	r2, [pc, #32]	; (406a80 <std.isra.0+0x48>)
  406a60:	4b08      	ldr	r3, [pc, #32]	; (406a84 <std.isra.0+0x4c>)
  406a62:	6220      	str	r0, [r4, #32]
  406a64:	61e4      	str	r4, [r4, #28]
  406a66:	6261      	str	r1, [r4, #36]	; 0x24
  406a68:	62a2      	str	r2, [r4, #40]	; 0x28
  406a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  406a6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406a74:	f000 bbc4 	b.w	407200 <__retarget_lock_init_recursive>
  406a78:	00407d91 	.word	0x00407d91
  406a7c:	00407db5 	.word	0x00407db5
  406a80:	00407df1 	.word	0x00407df1
  406a84:	00407e11 	.word	0x00407e11

00406a88 <__sinit>:
  406a88:	b510      	push	{r4, lr}
  406a8a:	4604      	mov	r4, r0
  406a8c:	4812      	ldr	r0, [pc, #72]	; (406ad8 <__sinit+0x50>)
  406a8e:	f000 fbbb 	bl	407208 <__retarget_lock_acquire_recursive>
  406a92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406a94:	b9d2      	cbnz	r2, 406acc <__sinit+0x44>
  406a96:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406a9a:	4810      	ldr	r0, [pc, #64]	; (406adc <__sinit+0x54>)
  406a9c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406aa0:	2103      	movs	r1, #3
  406aa2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406aa6:	63e0      	str	r0, [r4, #60]	; 0x3c
  406aa8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406aac:	6860      	ldr	r0, [r4, #4]
  406aae:	2104      	movs	r1, #4
  406ab0:	f7ff ffc2 	bl	406a38 <std.isra.0>
  406ab4:	2201      	movs	r2, #1
  406ab6:	2109      	movs	r1, #9
  406ab8:	68a0      	ldr	r0, [r4, #8]
  406aba:	f7ff ffbd 	bl	406a38 <std.isra.0>
  406abe:	2202      	movs	r2, #2
  406ac0:	2112      	movs	r1, #18
  406ac2:	68e0      	ldr	r0, [r4, #12]
  406ac4:	f7ff ffb8 	bl	406a38 <std.isra.0>
  406ac8:	2301      	movs	r3, #1
  406aca:	63a3      	str	r3, [r4, #56]	; 0x38
  406acc:	4802      	ldr	r0, [pc, #8]	; (406ad8 <__sinit+0x50>)
  406ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406ad2:	f000 bb9b 	b.w	40720c <__retarget_lock_release_recursive>
  406ad6:	bf00      	nop
  406ad8:	2000c960 	.word	0x2000c960
  406adc:	00406a2d 	.word	0x00406a2d

00406ae0 <__sfp_lock_acquire>:
  406ae0:	4801      	ldr	r0, [pc, #4]	; (406ae8 <__sfp_lock_acquire+0x8>)
  406ae2:	f000 bb91 	b.w	407208 <__retarget_lock_acquire_recursive>
  406ae6:	bf00      	nop
  406ae8:	2000c974 	.word	0x2000c974

00406aec <__sfp_lock_release>:
  406aec:	4801      	ldr	r0, [pc, #4]	; (406af4 <__sfp_lock_release+0x8>)
  406aee:	f000 bb8d 	b.w	40720c <__retarget_lock_release_recursive>
  406af2:	bf00      	nop
  406af4:	2000c974 	.word	0x2000c974

00406af8 <__libc_fini_array>:
  406af8:	b538      	push	{r3, r4, r5, lr}
  406afa:	4c0a      	ldr	r4, [pc, #40]	; (406b24 <__libc_fini_array+0x2c>)
  406afc:	4d0a      	ldr	r5, [pc, #40]	; (406b28 <__libc_fini_array+0x30>)
  406afe:	1b64      	subs	r4, r4, r5
  406b00:	10a4      	asrs	r4, r4, #2
  406b02:	d00a      	beq.n	406b1a <__libc_fini_array+0x22>
  406b04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406b08:	3b01      	subs	r3, #1
  406b0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406b0e:	3c01      	subs	r4, #1
  406b10:	f855 3904 	ldr.w	r3, [r5], #-4
  406b14:	4798      	blx	r3
  406b16:	2c00      	cmp	r4, #0
  406b18:	d1f9      	bne.n	406b0e <__libc_fini_array+0x16>
  406b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406b1e:	f001 bf45 	b.w	4089ac <_fini>
  406b22:	bf00      	nop
  406b24:	004089bc 	.word	0x004089bc
  406b28:	004089b8 	.word	0x004089b8

00406b2c <__fputwc>:
  406b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406b30:	b082      	sub	sp, #8
  406b32:	4680      	mov	r8, r0
  406b34:	4689      	mov	r9, r1
  406b36:	4614      	mov	r4, r2
  406b38:	f000 fb54 	bl	4071e4 <__locale_mb_cur_max>
  406b3c:	2801      	cmp	r0, #1
  406b3e:	d036      	beq.n	406bae <__fputwc+0x82>
  406b40:	464a      	mov	r2, r9
  406b42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406b46:	a901      	add	r1, sp, #4
  406b48:	4640      	mov	r0, r8
  406b4a:	f001 f9bd 	bl	407ec8 <_wcrtomb_r>
  406b4e:	1c42      	adds	r2, r0, #1
  406b50:	4606      	mov	r6, r0
  406b52:	d025      	beq.n	406ba0 <__fputwc+0x74>
  406b54:	b3a8      	cbz	r0, 406bc2 <__fputwc+0x96>
  406b56:	f89d e004 	ldrb.w	lr, [sp, #4]
  406b5a:	2500      	movs	r5, #0
  406b5c:	f10d 0a04 	add.w	sl, sp, #4
  406b60:	e009      	b.n	406b76 <__fputwc+0x4a>
  406b62:	6823      	ldr	r3, [r4, #0]
  406b64:	1c5a      	adds	r2, r3, #1
  406b66:	6022      	str	r2, [r4, #0]
  406b68:	f883 e000 	strb.w	lr, [r3]
  406b6c:	3501      	adds	r5, #1
  406b6e:	42b5      	cmp	r5, r6
  406b70:	d227      	bcs.n	406bc2 <__fputwc+0x96>
  406b72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406b76:	68a3      	ldr	r3, [r4, #8]
  406b78:	3b01      	subs	r3, #1
  406b7a:	2b00      	cmp	r3, #0
  406b7c:	60a3      	str	r3, [r4, #8]
  406b7e:	daf0      	bge.n	406b62 <__fputwc+0x36>
  406b80:	69a7      	ldr	r7, [r4, #24]
  406b82:	42bb      	cmp	r3, r7
  406b84:	4671      	mov	r1, lr
  406b86:	4622      	mov	r2, r4
  406b88:	4640      	mov	r0, r8
  406b8a:	db02      	blt.n	406b92 <__fputwc+0x66>
  406b8c:	f1be 0f0a 	cmp.w	lr, #10
  406b90:	d1e7      	bne.n	406b62 <__fputwc+0x36>
  406b92:	f001 f941 	bl	407e18 <__swbuf_r>
  406b96:	1c43      	adds	r3, r0, #1
  406b98:	d1e8      	bne.n	406b6c <__fputwc+0x40>
  406b9a:	b002      	add	sp, #8
  406b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ba0:	89a3      	ldrh	r3, [r4, #12]
  406ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ba6:	81a3      	strh	r3, [r4, #12]
  406ba8:	b002      	add	sp, #8
  406baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bae:	f109 33ff 	add.w	r3, r9, #4294967295
  406bb2:	2bfe      	cmp	r3, #254	; 0xfe
  406bb4:	d8c4      	bhi.n	406b40 <__fputwc+0x14>
  406bb6:	fa5f fe89 	uxtb.w	lr, r9
  406bba:	4606      	mov	r6, r0
  406bbc:	f88d e004 	strb.w	lr, [sp, #4]
  406bc0:	e7cb      	b.n	406b5a <__fputwc+0x2e>
  406bc2:	4648      	mov	r0, r9
  406bc4:	b002      	add	sp, #8
  406bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bca:	bf00      	nop

00406bcc <_fputwc_r>:
  406bcc:	b530      	push	{r4, r5, lr}
  406bce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406bd0:	f013 0f01 	tst.w	r3, #1
  406bd4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406bd8:	4614      	mov	r4, r2
  406bda:	b083      	sub	sp, #12
  406bdc:	4605      	mov	r5, r0
  406bde:	b29a      	uxth	r2, r3
  406be0:	d101      	bne.n	406be6 <_fputwc_r+0x1a>
  406be2:	0590      	lsls	r0, r2, #22
  406be4:	d51c      	bpl.n	406c20 <_fputwc_r+0x54>
  406be6:	0490      	lsls	r0, r2, #18
  406be8:	d406      	bmi.n	406bf8 <_fputwc_r+0x2c>
  406bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406bf4:	81a3      	strh	r3, [r4, #12]
  406bf6:	6662      	str	r2, [r4, #100]	; 0x64
  406bf8:	4628      	mov	r0, r5
  406bfa:	4622      	mov	r2, r4
  406bfc:	f7ff ff96 	bl	406b2c <__fputwc>
  406c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c02:	07da      	lsls	r2, r3, #31
  406c04:	4605      	mov	r5, r0
  406c06:	d402      	bmi.n	406c0e <_fputwc_r+0x42>
  406c08:	89a3      	ldrh	r3, [r4, #12]
  406c0a:	059b      	lsls	r3, r3, #22
  406c0c:	d502      	bpl.n	406c14 <_fputwc_r+0x48>
  406c0e:	4628      	mov	r0, r5
  406c10:	b003      	add	sp, #12
  406c12:	bd30      	pop	{r4, r5, pc}
  406c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c16:	f000 faf9 	bl	40720c <__retarget_lock_release_recursive>
  406c1a:	4628      	mov	r0, r5
  406c1c:	b003      	add	sp, #12
  406c1e:	bd30      	pop	{r4, r5, pc}
  406c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c22:	9101      	str	r1, [sp, #4]
  406c24:	f000 faf0 	bl	407208 <__retarget_lock_acquire_recursive>
  406c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c2c:	9901      	ldr	r1, [sp, #4]
  406c2e:	b29a      	uxth	r2, r3
  406c30:	e7d9      	b.n	406be6 <_fputwc_r+0x1a>
  406c32:	bf00      	nop

00406c34 <_malloc_trim_r>:
  406c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c36:	4f24      	ldr	r7, [pc, #144]	; (406cc8 <_malloc_trim_r+0x94>)
  406c38:	460c      	mov	r4, r1
  406c3a:	4606      	mov	r6, r0
  406c3c:	f000 fee4 	bl	407a08 <__malloc_lock>
  406c40:	68bb      	ldr	r3, [r7, #8]
  406c42:	685d      	ldr	r5, [r3, #4]
  406c44:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406c48:	310f      	adds	r1, #15
  406c4a:	f025 0503 	bic.w	r5, r5, #3
  406c4e:	4429      	add	r1, r5
  406c50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406c54:	f021 010f 	bic.w	r1, r1, #15
  406c58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406c5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406c60:	db07      	blt.n	406c72 <_malloc_trim_r+0x3e>
  406c62:	2100      	movs	r1, #0
  406c64:	4630      	mov	r0, r6
  406c66:	f001 f881 	bl	407d6c <_sbrk_r>
  406c6a:	68bb      	ldr	r3, [r7, #8]
  406c6c:	442b      	add	r3, r5
  406c6e:	4298      	cmp	r0, r3
  406c70:	d004      	beq.n	406c7c <_malloc_trim_r+0x48>
  406c72:	4630      	mov	r0, r6
  406c74:	f000 fece 	bl	407a14 <__malloc_unlock>
  406c78:	2000      	movs	r0, #0
  406c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c7c:	4261      	negs	r1, r4
  406c7e:	4630      	mov	r0, r6
  406c80:	f001 f874 	bl	407d6c <_sbrk_r>
  406c84:	3001      	adds	r0, #1
  406c86:	d00d      	beq.n	406ca4 <_malloc_trim_r+0x70>
  406c88:	4b10      	ldr	r3, [pc, #64]	; (406ccc <_malloc_trim_r+0x98>)
  406c8a:	68ba      	ldr	r2, [r7, #8]
  406c8c:	6819      	ldr	r1, [r3, #0]
  406c8e:	1b2d      	subs	r5, r5, r4
  406c90:	f045 0501 	orr.w	r5, r5, #1
  406c94:	4630      	mov	r0, r6
  406c96:	1b09      	subs	r1, r1, r4
  406c98:	6055      	str	r5, [r2, #4]
  406c9a:	6019      	str	r1, [r3, #0]
  406c9c:	f000 feba 	bl	407a14 <__malloc_unlock>
  406ca0:	2001      	movs	r0, #1
  406ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ca4:	2100      	movs	r1, #0
  406ca6:	4630      	mov	r0, r6
  406ca8:	f001 f860 	bl	407d6c <_sbrk_r>
  406cac:	68ba      	ldr	r2, [r7, #8]
  406cae:	1a83      	subs	r3, r0, r2
  406cb0:	2b0f      	cmp	r3, #15
  406cb2:	ddde      	ble.n	406c72 <_malloc_trim_r+0x3e>
  406cb4:	4c06      	ldr	r4, [pc, #24]	; (406cd0 <_malloc_trim_r+0x9c>)
  406cb6:	4905      	ldr	r1, [pc, #20]	; (406ccc <_malloc_trim_r+0x98>)
  406cb8:	6824      	ldr	r4, [r4, #0]
  406cba:	f043 0301 	orr.w	r3, r3, #1
  406cbe:	1b00      	subs	r0, r0, r4
  406cc0:	6053      	str	r3, [r2, #4]
  406cc2:	6008      	str	r0, [r1, #0]
  406cc4:	e7d5      	b.n	406c72 <_malloc_trim_r+0x3e>
  406cc6:	bf00      	nop
  406cc8:	200005c0 	.word	0x200005c0
  406ccc:	2000c3a4 	.word	0x2000c3a4
  406cd0:	200009c8 	.word	0x200009c8

00406cd4 <_free_r>:
  406cd4:	2900      	cmp	r1, #0
  406cd6:	d044      	beq.n	406d62 <_free_r+0x8e>
  406cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406cdc:	460d      	mov	r5, r1
  406cde:	4680      	mov	r8, r0
  406ce0:	f000 fe92 	bl	407a08 <__malloc_lock>
  406ce4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406ce8:	4969      	ldr	r1, [pc, #420]	; (406e90 <_free_r+0x1bc>)
  406cea:	f027 0301 	bic.w	r3, r7, #1
  406cee:	f1a5 0408 	sub.w	r4, r5, #8
  406cf2:	18e2      	adds	r2, r4, r3
  406cf4:	688e      	ldr	r6, [r1, #8]
  406cf6:	6850      	ldr	r0, [r2, #4]
  406cf8:	42b2      	cmp	r2, r6
  406cfa:	f020 0003 	bic.w	r0, r0, #3
  406cfe:	d05e      	beq.n	406dbe <_free_r+0xea>
  406d00:	07fe      	lsls	r6, r7, #31
  406d02:	6050      	str	r0, [r2, #4]
  406d04:	d40b      	bmi.n	406d1e <_free_r+0x4a>
  406d06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406d0a:	1be4      	subs	r4, r4, r7
  406d0c:	f101 0e08 	add.w	lr, r1, #8
  406d10:	68a5      	ldr	r5, [r4, #8]
  406d12:	4575      	cmp	r5, lr
  406d14:	443b      	add	r3, r7
  406d16:	d06d      	beq.n	406df4 <_free_r+0x120>
  406d18:	68e7      	ldr	r7, [r4, #12]
  406d1a:	60ef      	str	r7, [r5, #12]
  406d1c:	60bd      	str	r5, [r7, #8]
  406d1e:	1815      	adds	r5, r2, r0
  406d20:	686d      	ldr	r5, [r5, #4]
  406d22:	07ed      	lsls	r5, r5, #31
  406d24:	d53e      	bpl.n	406da4 <_free_r+0xd0>
  406d26:	f043 0201 	orr.w	r2, r3, #1
  406d2a:	6062      	str	r2, [r4, #4]
  406d2c:	50e3      	str	r3, [r4, r3]
  406d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406d32:	d217      	bcs.n	406d64 <_free_r+0x90>
  406d34:	08db      	lsrs	r3, r3, #3
  406d36:	1c58      	adds	r0, r3, #1
  406d38:	109a      	asrs	r2, r3, #2
  406d3a:	684d      	ldr	r5, [r1, #4]
  406d3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406d40:	60a7      	str	r7, [r4, #8]
  406d42:	2301      	movs	r3, #1
  406d44:	4093      	lsls	r3, r2
  406d46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406d4a:	432b      	orrs	r3, r5
  406d4c:	3a08      	subs	r2, #8
  406d4e:	60e2      	str	r2, [r4, #12]
  406d50:	604b      	str	r3, [r1, #4]
  406d52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406d56:	60fc      	str	r4, [r7, #12]
  406d58:	4640      	mov	r0, r8
  406d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406d5e:	f000 be59 	b.w	407a14 <__malloc_unlock>
  406d62:	4770      	bx	lr
  406d64:	0a5a      	lsrs	r2, r3, #9
  406d66:	2a04      	cmp	r2, #4
  406d68:	d852      	bhi.n	406e10 <_free_r+0x13c>
  406d6a:	099a      	lsrs	r2, r3, #6
  406d6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406d70:	00ff      	lsls	r7, r7, #3
  406d72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406d76:	19c8      	adds	r0, r1, r7
  406d78:	59ca      	ldr	r2, [r1, r7]
  406d7a:	3808      	subs	r0, #8
  406d7c:	4290      	cmp	r0, r2
  406d7e:	d04f      	beq.n	406e20 <_free_r+0x14c>
  406d80:	6851      	ldr	r1, [r2, #4]
  406d82:	f021 0103 	bic.w	r1, r1, #3
  406d86:	428b      	cmp	r3, r1
  406d88:	d232      	bcs.n	406df0 <_free_r+0x11c>
  406d8a:	6892      	ldr	r2, [r2, #8]
  406d8c:	4290      	cmp	r0, r2
  406d8e:	d1f7      	bne.n	406d80 <_free_r+0xac>
  406d90:	68c3      	ldr	r3, [r0, #12]
  406d92:	60a0      	str	r0, [r4, #8]
  406d94:	60e3      	str	r3, [r4, #12]
  406d96:	609c      	str	r4, [r3, #8]
  406d98:	60c4      	str	r4, [r0, #12]
  406d9a:	4640      	mov	r0, r8
  406d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406da0:	f000 be38 	b.w	407a14 <__malloc_unlock>
  406da4:	6895      	ldr	r5, [r2, #8]
  406da6:	4f3b      	ldr	r7, [pc, #236]	; (406e94 <_free_r+0x1c0>)
  406da8:	42bd      	cmp	r5, r7
  406daa:	4403      	add	r3, r0
  406dac:	d040      	beq.n	406e30 <_free_r+0x15c>
  406dae:	68d0      	ldr	r0, [r2, #12]
  406db0:	60e8      	str	r0, [r5, #12]
  406db2:	f043 0201 	orr.w	r2, r3, #1
  406db6:	6085      	str	r5, [r0, #8]
  406db8:	6062      	str	r2, [r4, #4]
  406dba:	50e3      	str	r3, [r4, r3]
  406dbc:	e7b7      	b.n	406d2e <_free_r+0x5a>
  406dbe:	07ff      	lsls	r7, r7, #31
  406dc0:	4403      	add	r3, r0
  406dc2:	d407      	bmi.n	406dd4 <_free_r+0x100>
  406dc4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406dc8:	1aa4      	subs	r4, r4, r2
  406dca:	4413      	add	r3, r2
  406dcc:	68a0      	ldr	r0, [r4, #8]
  406dce:	68e2      	ldr	r2, [r4, #12]
  406dd0:	60c2      	str	r2, [r0, #12]
  406dd2:	6090      	str	r0, [r2, #8]
  406dd4:	4a30      	ldr	r2, [pc, #192]	; (406e98 <_free_r+0x1c4>)
  406dd6:	6812      	ldr	r2, [r2, #0]
  406dd8:	f043 0001 	orr.w	r0, r3, #1
  406ddc:	4293      	cmp	r3, r2
  406dde:	6060      	str	r0, [r4, #4]
  406de0:	608c      	str	r4, [r1, #8]
  406de2:	d3b9      	bcc.n	406d58 <_free_r+0x84>
  406de4:	4b2d      	ldr	r3, [pc, #180]	; (406e9c <_free_r+0x1c8>)
  406de6:	4640      	mov	r0, r8
  406de8:	6819      	ldr	r1, [r3, #0]
  406dea:	f7ff ff23 	bl	406c34 <_malloc_trim_r>
  406dee:	e7b3      	b.n	406d58 <_free_r+0x84>
  406df0:	4610      	mov	r0, r2
  406df2:	e7cd      	b.n	406d90 <_free_r+0xbc>
  406df4:	1811      	adds	r1, r2, r0
  406df6:	6849      	ldr	r1, [r1, #4]
  406df8:	07c9      	lsls	r1, r1, #31
  406dfa:	d444      	bmi.n	406e86 <_free_r+0x1b2>
  406dfc:	6891      	ldr	r1, [r2, #8]
  406dfe:	68d2      	ldr	r2, [r2, #12]
  406e00:	60ca      	str	r2, [r1, #12]
  406e02:	4403      	add	r3, r0
  406e04:	f043 0001 	orr.w	r0, r3, #1
  406e08:	6091      	str	r1, [r2, #8]
  406e0a:	6060      	str	r0, [r4, #4]
  406e0c:	50e3      	str	r3, [r4, r3]
  406e0e:	e7a3      	b.n	406d58 <_free_r+0x84>
  406e10:	2a14      	cmp	r2, #20
  406e12:	d816      	bhi.n	406e42 <_free_r+0x16e>
  406e14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406e18:	00ff      	lsls	r7, r7, #3
  406e1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406e1e:	e7aa      	b.n	406d76 <_free_r+0xa2>
  406e20:	10aa      	asrs	r2, r5, #2
  406e22:	2301      	movs	r3, #1
  406e24:	684d      	ldr	r5, [r1, #4]
  406e26:	4093      	lsls	r3, r2
  406e28:	432b      	orrs	r3, r5
  406e2a:	604b      	str	r3, [r1, #4]
  406e2c:	4603      	mov	r3, r0
  406e2e:	e7b0      	b.n	406d92 <_free_r+0xbe>
  406e30:	f043 0201 	orr.w	r2, r3, #1
  406e34:	614c      	str	r4, [r1, #20]
  406e36:	610c      	str	r4, [r1, #16]
  406e38:	60e5      	str	r5, [r4, #12]
  406e3a:	60a5      	str	r5, [r4, #8]
  406e3c:	6062      	str	r2, [r4, #4]
  406e3e:	50e3      	str	r3, [r4, r3]
  406e40:	e78a      	b.n	406d58 <_free_r+0x84>
  406e42:	2a54      	cmp	r2, #84	; 0x54
  406e44:	d806      	bhi.n	406e54 <_free_r+0x180>
  406e46:	0b1a      	lsrs	r2, r3, #12
  406e48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406e4c:	00ff      	lsls	r7, r7, #3
  406e4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406e52:	e790      	b.n	406d76 <_free_r+0xa2>
  406e54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406e58:	d806      	bhi.n	406e68 <_free_r+0x194>
  406e5a:	0bda      	lsrs	r2, r3, #15
  406e5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406e60:	00ff      	lsls	r7, r7, #3
  406e62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406e66:	e786      	b.n	406d76 <_free_r+0xa2>
  406e68:	f240 5054 	movw	r0, #1364	; 0x554
  406e6c:	4282      	cmp	r2, r0
  406e6e:	d806      	bhi.n	406e7e <_free_r+0x1aa>
  406e70:	0c9a      	lsrs	r2, r3, #18
  406e72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406e76:	00ff      	lsls	r7, r7, #3
  406e78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406e7c:	e77b      	b.n	406d76 <_free_r+0xa2>
  406e7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406e82:	257e      	movs	r5, #126	; 0x7e
  406e84:	e777      	b.n	406d76 <_free_r+0xa2>
  406e86:	f043 0101 	orr.w	r1, r3, #1
  406e8a:	6061      	str	r1, [r4, #4]
  406e8c:	6013      	str	r3, [r2, #0]
  406e8e:	e763      	b.n	406d58 <_free_r+0x84>
  406e90:	200005c0 	.word	0x200005c0
  406e94:	200005c8 	.word	0x200005c8
  406e98:	200009cc 	.word	0x200009cc
  406e9c:	2000c3d4 	.word	0x2000c3d4

00406ea0 <__sfvwrite_r>:
  406ea0:	6893      	ldr	r3, [r2, #8]
  406ea2:	2b00      	cmp	r3, #0
  406ea4:	d073      	beq.n	406f8e <__sfvwrite_r+0xee>
  406ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406eaa:	898b      	ldrh	r3, [r1, #12]
  406eac:	b083      	sub	sp, #12
  406eae:	460c      	mov	r4, r1
  406eb0:	0719      	lsls	r1, r3, #28
  406eb2:	9000      	str	r0, [sp, #0]
  406eb4:	4616      	mov	r6, r2
  406eb6:	d526      	bpl.n	406f06 <__sfvwrite_r+0x66>
  406eb8:	6922      	ldr	r2, [r4, #16]
  406eba:	b322      	cbz	r2, 406f06 <__sfvwrite_r+0x66>
  406ebc:	f013 0002 	ands.w	r0, r3, #2
  406ec0:	6835      	ldr	r5, [r6, #0]
  406ec2:	d02c      	beq.n	406f1e <__sfvwrite_r+0x7e>
  406ec4:	f04f 0900 	mov.w	r9, #0
  406ec8:	4fb0      	ldr	r7, [pc, #704]	; (40718c <__sfvwrite_r+0x2ec>)
  406eca:	46c8      	mov	r8, r9
  406ecc:	46b2      	mov	sl, r6
  406ece:	45b8      	cmp	r8, r7
  406ed0:	4643      	mov	r3, r8
  406ed2:	464a      	mov	r2, r9
  406ed4:	bf28      	it	cs
  406ed6:	463b      	movcs	r3, r7
  406ed8:	9800      	ldr	r0, [sp, #0]
  406eda:	f1b8 0f00 	cmp.w	r8, #0
  406ede:	d050      	beq.n	406f82 <__sfvwrite_r+0xe2>
  406ee0:	69e1      	ldr	r1, [r4, #28]
  406ee2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406ee4:	47b0      	blx	r6
  406ee6:	2800      	cmp	r0, #0
  406ee8:	dd58      	ble.n	406f9c <__sfvwrite_r+0xfc>
  406eea:	f8da 3008 	ldr.w	r3, [sl, #8]
  406eee:	1a1b      	subs	r3, r3, r0
  406ef0:	4481      	add	r9, r0
  406ef2:	eba8 0800 	sub.w	r8, r8, r0
  406ef6:	f8ca 3008 	str.w	r3, [sl, #8]
  406efa:	2b00      	cmp	r3, #0
  406efc:	d1e7      	bne.n	406ece <__sfvwrite_r+0x2e>
  406efe:	2000      	movs	r0, #0
  406f00:	b003      	add	sp, #12
  406f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f06:	4621      	mov	r1, r4
  406f08:	9800      	ldr	r0, [sp, #0]
  406f0a:	f7ff fc51 	bl	4067b0 <__swsetup_r>
  406f0e:	2800      	cmp	r0, #0
  406f10:	f040 8133 	bne.w	40717a <__sfvwrite_r+0x2da>
  406f14:	89a3      	ldrh	r3, [r4, #12]
  406f16:	6835      	ldr	r5, [r6, #0]
  406f18:	f013 0002 	ands.w	r0, r3, #2
  406f1c:	d1d2      	bne.n	406ec4 <__sfvwrite_r+0x24>
  406f1e:	f013 0901 	ands.w	r9, r3, #1
  406f22:	d145      	bne.n	406fb0 <__sfvwrite_r+0x110>
  406f24:	464f      	mov	r7, r9
  406f26:	9601      	str	r6, [sp, #4]
  406f28:	b337      	cbz	r7, 406f78 <__sfvwrite_r+0xd8>
  406f2a:	059a      	lsls	r2, r3, #22
  406f2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406f30:	f140 8083 	bpl.w	40703a <__sfvwrite_r+0x19a>
  406f34:	4547      	cmp	r7, r8
  406f36:	46c3      	mov	fp, r8
  406f38:	f0c0 80ab 	bcc.w	407092 <__sfvwrite_r+0x1f2>
  406f3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f40:	f040 80ac 	bne.w	40709c <__sfvwrite_r+0x1fc>
  406f44:	6820      	ldr	r0, [r4, #0]
  406f46:	46ba      	mov	sl, r7
  406f48:	465a      	mov	r2, fp
  406f4a:	4649      	mov	r1, r9
  406f4c:	f000 fcf8 	bl	407940 <memmove>
  406f50:	68a2      	ldr	r2, [r4, #8]
  406f52:	6823      	ldr	r3, [r4, #0]
  406f54:	eba2 0208 	sub.w	r2, r2, r8
  406f58:	445b      	add	r3, fp
  406f5a:	60a2      	str	r2, [r4, #8]
  406f5c:	6023      	str	r3, [r4, #0]
  406f5e:	9a01      	ldr	r2, [sp, #4]
  406f60:	6893      	ldr	r3, [r2, #8]
  406f62:	eba3 030a 	sub.w	r3, r3, sl
  406f66:	44d1      	add	r9, sl
  406f68:	eba7 070a 	sub.w	r7, r7, sl
  406f6c:	6093      	str	r3, [r2, #8]
  406f6e:	2b00      	cmp	r3, #0
  406f70:	d0c5      	beq.n	406efe <__sfvwrite_r+0x5e>
  406f72:	89a3      	ldrh	r3, [r4, #12]
  406f74:	2f00      	cmp	r7, #0
  406f76:	d1d8      	bne.n	406f2a <__sfvwrite_r+0x8a>
  406f78:	f8d5 9000 	ldr.w	r9, [r5]
  406f7c:	686f      	ldr	r7, [r5, #4]
  406f7e:	3508      	adds	r5, #8
  406f80:	e7d2      	b.n	406f28 <__sfvwrite_r+0x88>
  406f82:	f8d5 9000 	ldr.w	r9, [r5]
  406f86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406f8a:	3508      	adds	r5, #8
  406f8c:	e79f      	b.n	406ece <__sfvwrite_r+0x2e>
  406f8e:	2000      	movs	r0, #0
  406f90:	4770      	bx	lr
  406f92:	4621      	mov	r1, r4
  406f94:	9800      	ldr	r0, [sp, #0]
  406f96:	f7ff fd1f 	bl	4069d8 <_fflush_r>
  406f9a:	b370      	cbz	r0, 406ffa <__sfvwrite_r+0x15a>
  406f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406fa4:	f04f 30ff 	mov.w	r0, #4294967295
  406fa8:	81a3      	strh	r3, [r4, #12]
  406faa:	b003      	add	sp, #12
  406fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fb0:	4681      	mov	r9, r0
  406fb2:	4633      	mov	r3, r6
  406fb4:	464e      	mov	r6, r9
  406fb6:	46a8      	mov	r8, r5
  406fb8:	469a      	mov	sl, r3
  406fba:	464d      	mov	r5, r9
  406fbc:	b34e      	cbz	r6, 407012 <__sfvwrite_r+0x172>
  406fbe:	b380      	cbz	r0, 407022 <__sfvwrite_r+0x182>
  406fc0:	6820      	ldr	r0, [r4, #0]
  406fc2:	6923      	ldr	r3, [r4, #16]
  406fc4:	6962      	ldr	r2, [r4, #20]
  406fc6:	45b1      	cmp	r9, r6
  406fc8:	46cb      	mov	fp, r9
  406fca:	bf28      	it	cs
  406fcc:	46b3      	movcs	fp, r6
  406fce:	4298      	cmp	r0, r3
  406fd0:	465f      	mov	r7, fp
  406fd2:	d904      	bls.n	406fde <__sfvwrite_r+0x13e>
  406fd4:	68a3      	ldr	r3, [r4, #8]
  406fd6:	4413      	add	r3, r2
  406fd8:	459b      	cmp	fp, r3
  406fda:	f300 80a6 	bgt.w	40712a <__sfvwrite_r+0x28a>
  406fde:	4593      	cmp	fp, r2
  406fe0:	db4b      	blt.n	40707a <__sfvwrite_r+0x1da>
  406fe2:	4613      	mov	r3, r2
  406fe4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406fe6:	69e1      	ldr	r1, [r4, #28]
  406fe8:	9800      	ldr	r0, [sp, #0]
  406fea:	462a      	mov	r2, r5
  406fec:	47b8      	blx	r7
  406fee:	1e07      	subs	r7, r0, #0
  406ff0:	ddd4      	ble.n	406f9c <__sfvwrite_r+0xfc>
  406ff2:	ebb9 0907 	subs.w	r9, r9, r7
  406ff6:	d0cc      	beq.n	406f92 <__sfvwrite_r+0xf2>
  406ff8:	2001      	movs	r0, #1
  406ffa:	f8da 3008 	ldr.w	r3, [sl, #8]
  406ffe:	1bdb      	subs	r3, r3, r7
  407000:	443d      	add	r5, r7
  407002:	1bf6      	subs	r6, r6, r7
  407004:	f8ca 3008 	str.w	r3, [sl, #8]
  407008:	2b00      	cmp	r3, #0
  40700a:	f43f af78 	beq.w	406efe <__sfvwrite_r+0x5e>
  40700e:	2e00      	cmp	r6, #0
  407010:	d1d5      	bne.n	406fbe <__sfvwrite_r+0x11e>
  407012:	f108 0308 	add.w	r3, r8, #8
  407016:	e913 0060 	ldmdb	r3, {r5, r6}
  40701a:	4698      	mov	r8, r3
  40701c:	3308      	adds	r3, #8
  40701e:	2e00      	cmp	r6, #0
  407020:	d0f9      	beq.n	407016 <__sfvwrite_r+0x176>
  407022:	4632      	mov	r2, r6
  407024:	210a      	movs	r1, #10
  407026:	4628      	mov	r0, r5
  407028:	f000 fc3a 	bl	4078a0 <memchr>
  40702c:	2800      	cmp	r0, #0
  40702e:	f000 80a1 	beq.w	407174 <__sfvwrite_r+0x2d4>
  407032:	3001      	adds	r0, #1
  407034:	eba0 0905 	sub.w	r9, r0, r5
  407038:	e7c2      	b.n	406fc0 <__sfvwrite_r+0x120>
  40703a:	6820      	ldr	r0, [r4, #0]
  40703c:	6923      	ldr	r3, [r4, #16]
  40703e:	4298      	cmp	r0, r3
  407040:	d802      	bhi.n	407048 <__sfvwrite_r+0x1a8>
  407042:	6963      	ldr	r3, [r4, #20]
  407044:	429f      	cmp	r7, r3
  407046:	d25d      	bcs.n	407104 <__sfvwrite_r+0x264>
  407048:	45b8      	cmp	r8, r7
  40704a:	bf28      	it	cs
  40704c:	46b8      	movcs	r8, r7
  40704e:	4642      	mov	r2, r8
  407050:	4649      	mov	r1, r9
  407052:	f000 fc75 	bl	407940 <memmove>
  407056:	68a3      	ldr	r3, [r4, #8]
  407058:	6822      	ldr	r2, [r4, #0]
  40705a:	eba3 0308 	sub.w	r3, r3, r8
  40705e:	4442      	add	r2, r8
  407060:	60a3      	str	r3, [r4, #8]
  407062:	6022      	str	r2, [r4, #0]
  407064:	b10b      	cbz	r3, 40706a <__sfvwrite_r+0x1ca>
  407066:	46c2      	mov	sl, r8
  407068:	e779      	b.n	406f5e <__sfvwrite_r+0xbe>
  40706a:	4621      	mov	r1, r4
  40706c:	9800      	ldr	r0, [sp, #0]
  40706e:	f7ff fcb3 	bl	4069d8 <_fflush_r>
  407072:	2800      	cmp	r0, #0
  407074:	d192      	bne.n	406f9c <__sfvwrite_r+0xfc>
  407076:	46c2      	mov	sl, r8
  407078:	e771      	b.n	406f5e <__sfvwrite_r+0xbe>
  40707a:	465a      	mov	r2, fp
  40707c:	4629      	mov	r1, r5
  40707e:	f000 fc5f 	bl	407940 <memmove>
  407082:	68a2      	ldr	r2, [r4, #8]
  407084:	6823      	ldr	r3, [r4, #0]
  407086:	eba2 020b 	sub.w	r2, r2, fp
  40708a:	445b      	add	r3, fp
  40708c:	60a2      	str	r2, [r4, #8]
  40708e:	6023      	str	r3, [r4, #0]
  407090:	e7af      	b.n	406ff2 <__sfvwrite_r+0x152>
  407092:	6820      	ldr	r0, [r4, #0]
  407094:	46b8      	mov	r8, r7
  407096:	46ba      	mov	sl, r7
  407098:	46bb      	mov	fp, r7
  40709a:	e755      	b.n	406f48 <__sfvwrite_r+0xa8>
  40709c:	6962      	ldr	r2, [r4, #20]
  40709e:	6820      	ldr	r0, [r4, #0]
  4070a0:	6921      	ldr	r1, [r4, #16]
  4070a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4070a6:	eba0 0a01 	sub.w	sl, r0, r1
  4070aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4070ae:	f10a 0001 	add.w	r0, sl, #1
  4070b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4070b6:	4438      	add	r0, r7
  4070b8:	4540      	cmp	r0, r8
  4070ba:	4642      	mov	r2, r8
  4070bc:	bf84      	itt	hi
  4070be:	4680      	movhi	r8, r0
  4070c0:	4642      	movhi	r2, r8
  4070c2:	055b      	lsls	r3, r3, #21
  4070c4:	d544      	bpl.n	407150 <__sfvwrite_r+0x2b0>
  4070c6:	4611      	mov	r1, r2
  4070c8:	9800      	ldr	r0, [sp, #0]
  4070ca:	f000 f921 	bl	407310 <_malloc_r>
  4070ce:	4683      	mov	fp, r0
  4070d0:	2800      	cmp	r0, #0
  4070d2:	d055      	beq.n	407180 <__sfvwrite_r+0x2e0>
  4070d4:	4652      	mov	r2, sl
  4070d6:	6921      	ldr	r1, [r4, #16]
  4070d8:	f7fe fa1c 	bl	405514 <memcpy>
  4070dc:	89a3      	ldrh	r3, [r4, #12]
  4070de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4070e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4070e6:	81a3      	strh	r3, [r4, #12]
  4070e8:	eb0b 000a 	add.w	r0, fp, sl
  4070ec:	eba8 030a 	sub.w	r3, r8, sl
  4070f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4070f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4070f8:	6020      	str	r0, [r4, #0]
  4070fa:	60a3      	str	r3, [r4, #8]
  4070fc:	46b8      	mov	r8, r7
  4070fe:	46ba      	mov	sl, r7
  407100:	46bb      	mov	fp, r7
  407102:	e721      	b.n	406f48 <__sfvwrite_r+0xa8>
  407104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407108:	42b9      	cmp	r1, r7
  40710a:	bf28      	it	cs
  40710c:	4639      	movcs	r1, r7
  40710e:	464a      	mov	r2, r9
  407110:	fb91 f1f3 	sdiv	r1, r1, r3
  407114:	9800      	ldr	r0, [sp, #0]
  407116:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407118:	fb03 f301 	mul.w	r3, r3, r1
  40711c:	69e1      	ldr	r1, [r4, #28]
  40711e:	47b0      	blx	r6
  407120:	f1b0 0a00 	subs.w	sl, r0, #0
  407124:	f73f af1b 	bgt.w	406f5e <__sfvwrite_r+0xbe>
  407128:	e738      	b.n	406f9c <__sfvwrite_r+0xfc>
  40712a:	461a      	mov	r2, r3
  40712c:	4629      	mov	r1, r5
  40712e:	9301      	str	r3, [sp, #4]
  407130:	f000 fc06 	bl	407940 <memmove>
  407134:	6822      	ldr	r2, [r4, #0]
  407136:	9b01      	ldr	r3, [sp, #4]
  407138:	9800      	ldr	r0, [sp, #0]
  40713a:	441a      	add	r2, r3
  40713c:	6022      	str	r2, [r4, #0]
  40713e:	4621      	mov	r1, r4
  407140:	f7ff fc4a 	bl	4069d8 <_fflush_r>
  407144:	9b01      	ldr	r3, [sp, #4]
  407146:	2800      	cmp	r0, #0
  407148:	f47f af28 	bne.w	406f9c <__sfvwrite_r+0xfc>
  40714c:	461f      	mov	r7, r3
  40714e:	e750      	b.n	406ff2 <__sfvwrite_r+0x152>
  407150:	9800      	ldr	r0, [sp, #0]
  407152:	f000 fc65 	bl	407a20 <_realloc_r>
  407156:	4683      	mov	fp, r0
  407158:	2800      	cmp	r0, #0
  40715a:	d1c5      	bne.n	4070e8 <__sfvwrite_r+0x248>
  40715c:	9d00      	ldr	r5, [sp, #0]
  40715e:	6921      	ldr	r1, [r4, #16]
  407160:	4628      	mov	r0, r5
  407162:	f7ff fdb7 	bl	406cd4 <_free_r>
  407166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40716a:	220c      	movs	r2, #12
  40716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407170:	602a      	str	r2, [r5, #0]
  407172:	e715      	b.n	406fa0 <__sfvwrite_r+0x100>
  407174:	f106 0901 	add.w	r9, r6, #1
  407178:	e722      	b.n	406fc0 <__sfvwrite_r+0x120>
  40717a:	f04f 30ff 	mov.w	r0, #4294967295
  40717e:	e6bf      	b.n	406f00 <__sfvwrite_r+0x60>
  407180:	9a00      	ldr	r2, [sp, #0]
  407182:	230c      	movs	r3, #12
  407184:	6013      	str	r3, [r2, #0]
  407186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40718a:	e709      	b.n	406fa0 <__sfvwrite_r+0x100>
  40718c:	7ffffc00 	.word	0x7ffffc00

00407190 <_fwalk_reent>:
  407190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407194:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407198:	d01f      	beq.n	4071da <_fwalk_reent+0x4a>
  40719a:	4688      	mov	r8, r1
  40719c:	4606      	mov	r6, r0
  40719e:	f04f 0900 	mov.w	r9, #0
  4071a2:	687d      	ldr	r5, [r7, #4]
  4071a4:	68bc      	ldr	r4, [r7, #8]
  4071a6:	3d01      	subs	r5, #1
  4071a8:	d411      	bmi.n	4071ce <_fwalk_reent+0x3e>
  4071aa:	89a3      	ldrh	r3, [r4, #12]
  4071ac:	2b01      	cmp	r3, #1
  4071ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4071b2:	d908      	bls.n	4071c6 <_fwalk_reent+0x36>
  4071b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4071b8:	3301      	adds	r3, #1
  4071ba:	4621      	mov	r1, r4
  4071bc:	4630      	mov	r0, r6
  4071be:	d002      	beq.n	4071c6 <_fwalk_reent+0x36>
  4071c0:	47c0      	blx	r8
  4071c2:	ea49 0900 	orr.w	r9, r9, r0
  4071c6:	1c6b      	adds	r3, r5, #1
  4071c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4071cc:	d1ed      	bne.n	4071aa <_fwalk_reent+0x1a>
  4071ce:	683f      	ldr	r7, [r7, #0]
  4071d0:	2f00      	cmp	r7, #0
  4071d2:	d1e6      	bne.n	4071a2 <_fwalk_reent+0x12>
  4071d4:	4648      	mov	r0, r9
  4071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071da:	46b9      	mov	r9, r7
  4071dc:	4648      	mov	r0, r9
  4071de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071e2:	bf00      	nop

004071e4 <__locale_mb_cur_max>:
  4071e4:	4b04      	ldr	r3, [pc, #16]	; (4071f8 <__locale_mb_cur_max+0x14>)
  4071e6:	4a05      	ldr	r2, [pc, #20]	; (4071fc <__locale_mb_cur_max+0x18>)
  4071e8:	681b      	ldr	r3, [r3, #0]
  4071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4071ec:	2b00      	cmp	r3, #0
  4071ee:	bf08      	it	eq
  4071f0:	4613      	moveq	r3, r2
  4071f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4071f6:	4770      	bx	lr
  4071f8:	20000020 	.word	0x20000020
  4071fc:	20000454 	.word	0x20000454

00407200 <__retarget_lock_init_recursive>:
  407200:	4770      	bx	lr
  407202:	bf00      	nop

00407204 <__retarget_lock_close_recursive>:
  407204:	4770      	bx	lr
  407206:	bf00      	nop

00407208 <__retarget_lock_acquire_recursive>:
  407208:	4770      	bx	lr
  40720a:	bf00      	nop

0040720c <__retarget_lock_release_recursive>:
  40720c:	4770      	bx	lr
  40720e:	bf00      	nop

00407210 <__swhatbuf_r>:
  407210:	b570      	push	{r4, r5, r6, lr}
  407212:	460c      	mov	r4, r1
  407214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407218:	2900      	cmp	r1, #0
  40721a:	b090      	sub	sp, #64	; 0x40
  40721c:	4615      	mov	r5, r2
  40721e:	461e      	mov	r6, r3
  407220:	db14      	blt.n	40724c <__swhatbuf_r+0x3c>
  407222:	aa01      	add	r2, sp, #4
  407224:	f000 ff74 	bl	408110 <_fstat_r>
  407228:	2800      	cmp	r0, #0
  40722a:	db0f      	blt.n	40724c <__swhatbuf_r+0x3c>
  40722c:	9a02      	ldr	r2, [sp, #8]
  40722e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407232:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407236:	fab2 f282 	clz	r2, r2
  40723a:	0952      	lsrs	r2, r2, #5
  40723c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407240:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407244:	6032      	str	r2, [r6, #0]
  407246:	602b      	str	r3, [r5, #0]
  407248:	b010      	add	sp, #64	; 0x40
  40724a:	bd70      	pop	{r4, r5, r6, pc}
  40724c:	89a2      	ldrh	r2, [r4, #12]
  40724e:	2300      	movs	r3, #0
  407250:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407254:	6033      	str	r3, [r6, #0]
  407256:	d004      	beq.n	407262 <__swhatbuf_r+0x52>
  407258:	2240      	movs	r2, #64	; 0x40
  40725a:	4618      	mov	r0, r3
  40725c:	602a      	str	r2, [r5, #0]
  40725e:	b010      	add	sp, #64	; 0x40
  407260:	bd70      	pop	{r4, r5, r6, pc}
  407262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407266:	602b      	str	r3, [r5, #0]
  407268:	b010      	add	sp, #64	; 0x40
  40726a:	bd70      	pop	{r4, r5, r6, pc}

0040726c <__smakebuf_r>:
  40726c:	898a      	ldrh	r2, [r1, #12]
  40726e:	0792      	lsls	r2, r2, #30
  407270:	460b      	mov	r3, r1
  407272:	d506      	bpl.n	407282 <__smakebuf_r+0x16>
  407274:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407278:	2101      	movs	r1, #1
  40727a:	601a      	str	r2, [r3, #0]
  40727c:	611a      	str	r2, [r3, #16]
  40727e:	6159      	str	r1, [r3, #20]
  407280:	4770      	bx	lr
  407282:	b5f0      	push	{r4, r5, r6, r7, lr}
  407284:	b083      	sub	sp, #12
  407286:	ab01      	add	r3, sp, #4
  407288:	466a      	mov	r2, sp
  40728a:	460c      	mov	r4, r1
  40728c:	4606      	mov	r6, r0
  40728e:	f7ff ffbf 	bl	407210 <__swhatbuf_r>
  407292:	9900      	ldr	r1, [sp, #0]
  407294:	4605      	mov	r5, r0
  407296:	4630      	mov	r0, r6
  407298:	f000 f83a 	bl	407310 <_malloc_r>
  40729c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072a0:	b1d8      	cbz	r0, 4072da <__smakebuf_r+0x6e>
  4072a2:	9a01      	ldr	r2, [sp, #4]
  4072a4:	4f15      	ldr	r7, [pc, #84]	; (4072fc <__smakebuf_r+0x90>)
  4072a6:	9900      	ldr	r1, [sp, #0]
  4072a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4072ae:	81a3      	strh	r3, [r4, #12]
  4072b0:	6020      	str	r0, [r4, #0]
  4072b2:	6120      	str	r0, [r4, #16]
  4072b4:	6161      	str	r1, [r4, #20]
  4072b6:	b91a      	cbnz	r2, 4072c0 <__smakebuf_r+0x54>
  4072b8:	432b      	orrs	r3, r5
  4072ba:	81a3      	strh	r3, [r4, #12]
  4072bc:	b003      	add	sp, #12
  4072be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4072c0:	4630      	mov	r0, r6
  4072c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4072c6:	f000 ff37 	bl	408138 <_isatty_r>
  4072ca:	b1a0      	cbz	r0, 4072f6 <__smakebuf_r+0x8a>
  4072cc:	89a3      	ldrh	r3, [r4, #12]
  4072ce:	f023 0303 	bic.w	r3, r3, #3
  4072d2:	f043 0301 	orr.w	r3, r3, #1
  4072d6:	b21b      	sxth	r3, r3
  4072d8:	e7ee      	b.n	4072b8 <__smakebuf_r+0x4c>
  4072da:	059a      	lsls	r2, r3, #22
  4072dc:	d4ee      	bmi.n	4072bc <__smakebuf_r+0x50>
  4072de:	f023 0303 	bic.w	r3, r3, #3
  4072e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4072e6:	f043 0302 	orr.w	r3, r3, #2
  4072ea:	2101      	movs	r1, #1
  4072ec:	81a3      	strh	r3, [r4, #12]
  4072ee:	6022      	str	r2, [r4, #0]
  4072f0:	6122      	str	r2, [r4, #16]
  4072f2:	6161      	str	r1, [r4, #20]
  4072f4:	e7e2      	b.n	4072bc <__smakebuf_r+0x50>
  4072f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072fa:	e7dd      	b.n	4072b8 <__smakebuf_r+0x4c>
  4072fc:	00406a2d 	.word	0x00406a2d

00407300 <malloc>:
  407300:	4b02      	ldr	r3, [pc, #8]	; (40730c <malloc+0xc>)
  407302:	4601      	mov	r1, r0
  407304:	6818      	ldr	r0, [r3, #0]
  407306:	f000 b803 	b.w	407310 <_malloc_r>
  40730a:	bf00      	nop
  40730c:	20000020 	.word	0x20000020

00407310 <_malloc_r>:
  407310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407314:	f101 060b 	add.w	r6, r1, #11
  407318:	2e16      	cmp	r6, #22
  40731a:	b083      	sub	sp, #12
  40731c:	4605      	mov	r5, r0
  40731e:	f240 809e 	bls.w	40745e <_malloc_r+0x14e>
  407322:	f036 0607 	bics.w	r6, r6, #7
  407326:	f100 80bd 	bmi.w	4074a4 <_malloc_r+0x194>
  40732a:	42b1      	cmp	r1, r6
  40732c:	f200 80ba 	bhi.w	4074a4 <_malloc_r+0x194>
  407330:	f000 fb6a 	bl	407a08 <__malloc_lock>
  407334:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407338:	f0c0 8293 	bcc.w	407862 <_malloc_r+0x552>
  40733c:	0a73      	lsrs	r3, r6, #9
  40733e:	f000 80b8 	beq.w	4074b2 <_malloc_r+0x1a2>
  407342:	2b04      	cmp	r3, #4
  407344:	f200 8179 	bhi.w	40763a <_malloc_r+0x32a>
  407348:	09b3      	lsrs	r3, r6, #6
  40734a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40734e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407352:	00c3      	lsls	r3, r0, #3
  407354:	4fbf      	ldr	r7, [pc, #764]	; (407654 <_malloc_r+0x344>)
  407356:	443b      	add	r3, r7
  407358:	f1a3 0108 	sub.w	r1, r3, #8
  40735c:	685c      	ldr	r4, [r3, #4]
  40735e:	42a1      	cmp	r1, r4
  407360:	d106      	bne.n	407370 <_malloc_r+0x60>
  407362:	e00c      	b.n	40737e <_malloc_r+0x6e>
  407364:	2a00      	cmp	r2, #0
  407366:	f280 80aa 	bge.w	4074be <_malloc_r+0x1ae>
  40736a:	68e4      	ldr	r4, [r4, #12]
  40736c:	42a1      	cmp	r1, r4
  40736e:	d006      	beq.n	40737e <_malloc_r+0x6e>
  407370:	6863      	ldr	r3, [r4, #4]
  407372:	f023 0303 	bic.w	r3, r3, #3
  407376:	1b9a      	subs	r2, r3, r6
  407378:	2a0f      	cmp	r2, #15
  40737a:	ddf3      	ble.n	407364 <_malloc_r+0x54>
  40737c:	4670      	mov	r0, lr
  40737e:	693c      	ldr	r4, [r7, #16]
  407380:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 407668 <_malloc_r+0x358>
  407384:	4574      	cmp	r4, lr
  407386:	f000 81ab 	beq.w	4076e0 <_malloc_r+0x3d0>
  40738a:	6863      	ldr	r3, [r4, #4]
  40738c:	f023 0303 	bic.w	r3, r3, #3
  407390:	1b9a      	subs	r2, r3, r6
  407392:	2a0f      	cmp	r2, #15
  407394:	f300 8190 	bgt.w	4076b8 <_malloc_r+0x3a8>
  407398:	2a00      	cmp	r2, #0
  40739a:	f8c7 e014 	str.w	lr, [r7, #20]
  40739e:	f8c7 e010 	str.w	lr, [r7, #16]
  4073a2:	f280 809d 	bge.w	4074e0 <_malloc_r+0x1d0>
  4073a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4073aa:	f080 8161 	bcs.w	407670 <_malloc_r+0x360>
  4073ae:	08db      	lsrs	r3, r3, #3
  4073b0:	f103 0c01 	add.w	ip, r3, #1
  4073b4:	1099      	asrs	r1, r3, #2
  4073b6:	687a      	ldr	r2, [r7, #4]
  4073b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4073bc:	f8c4 8008 	str.w	r8, [r4, #8]
  4073c0:	2301      	movs	r3, #1
  4073c2:	408b      	lsls	r3, r1
  4073c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4073c8:	4313      	orrs	r3, r2
  4073ca:	3908      	subs	r1, #8
  4073cc:	60e1      	str	r1, [r4, #12]
  4073ce:	607b      	str	r3, [r7, #4]
  4073d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4073d4:	f8c8 400c 	str.w	r4, [r8, #12]
  4073d8:	1082      	asrs	r2, r0, #2
  4073da:	2401      	movs	r4, #1
  4073dc:	4094      	lsls	r4, r2
  4073de:	429c      	cmp	r4, r3
  4073e0:	f200 808b 	bhi.w	4074fa <_malloc_r+0x1ea>
  4073e4:	421c      	tst	r4, r3
  4073e6:	d106      	bne.n	4073f6 <_malloc_r+0xe6>
  4073e8:	f020 0003 	bic.w	r0, r0, #3
  4073ec:	0064      	lsls	r4, r4, #1
  4073ee:	421c      	tst	r4, r3
  4073f0:	f100 0004 	add.w	r0, r0, #4
  4073f4:	d0fa      	beq.n	4073ec <_malloc_r+0xdc>
  4073f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4073fa:	46cc      	mov	ip, r9
  4073fc:	4680      	mov	r8, r0
  4073fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407402:	459c      	cmp	ip, r3
  407404:	d107      	bne.n	407416 <_malloc_r+0x106>
  407406:	e16d      	b.n	4076e4 <_malloc_r+0x3d4>
  407408:	2a00      	cmp	r2, #0
  40740a:	f280 817b 	bge.w	407704 <_malloc_r+0x3f4>
  40740e:	68db      	ldr	r3, [r3, #12]
  407410:	459c      	cmp	ip, r3
  407412:	f000 8167 	beq.w	4076e4 <_malloc_r+0x3d4>
  407416:	6859      	ldr	r1, [r3, #4]
  407418:	f021 0103 	bic.w	r1, r1, #3
  40741c:	1b8a      	subs	r2, r1, r6
  40741e:	2a0f      	cmp	r2, #15
  407420:	ddf2      	ble.n	407408 <_malloc_r+0xf8>
  407422:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407426:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40742a:	9300      	str	r3, [sp, #0]
  40742c:	199c      	adds	r4, r3, r6
  40742e:	4628      	mov	r0, r5
  407430:	f046 0601 	orr.w	r6, r6, #1
  407434:	f042 0501 	orr.w	r5, r2, #1
  407438:	605e      	str	r6, [r3, #4]
  40743a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40743e:	f8cc 8008 	str.w	r8, [ip, #8]
  407442:	617c      	str	r4, [r7, #20]
  407444:	613c      	str	r4, [r7, #16]
  407446:	f8c4 e00c 	str.w	lr, [r4, #12]
  40744a:	f8c4 e008 	str.w	lr, [r4, #8]
  40744e:	6065      	str	r5, [r4, #4]
  407450:	505a      	str	r2, [r3, r1]
  407452:	f000 fadf 	bl	407a14 <__malloc_unlock>
  407456:	9b00      	ldr	r3, [sp, #0]
  407458:	f103 0408 	add.w	r4, r3, #8
  40745c:	e01e      	b.n	40749c <_malloc_r+0x18c>
  40745e:	2910      	cmp	r1, #16
  407460:	d820      	bhi.n	4074a4 <_malloc_r+0x194>
  407462:	f000 fad1 	bl	407a08 <__malloc_lock>
  407466:	2610      	movs	r6, #16
  407468:	2318      	movs	r3, #24
  40746a:	2002      	movs	r0, #2
  40746c:	4f79      	ldr	r7, [pc, #484]	; (407654 <_malloc_r+0x344>)
  40746e:	443b      	add	r3, r7
  407470:	f1a3 0208 	sub.w	r2, r3, #8
  407474:	685c      	ldr	r4, [r3, #4]
  407476:	4294      	cmp	r4, r2
  407478:	f000 813d 	beq.w	4076f6 <_malloc_r+0x3e6>
  40747c:	6863      	ldr	r3, [r4, #4]
  40747e:	68e1      	ldr	r1, [r4, #12]
  407480:	68a6      	ldr	r6, [r4, #8]
  407482:	f023 0303 	bic.w	r3, r3, #3
  407486:	4423      	add	r3, r4
  407488:	4628      	mov	r0, r5
  40748a:	685a      	ldr	r2, [r3, #4]
  40748c:	60f1      	str	r1, [r6, #12]
  40748e:	f042 0201 	orr.w	r2, r2, #1
  407492:	608e      	str	r6, [r1, #8]
  407494:	605a      	str	r2, [r3, #4]
  407496:	f000 fabd 	bl	407a14 <__malloc_unlock>
  40749a:	3408      	adds	r4, #8
  40749c:	4620      	mov	r0, r4
  40749e:	b003      	add	sp, #12
  4074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074a4:	2400      	movs	r4, #0
  4074a6:	230c      	movs	r3, #12
  4074a8:	4620      	mov	r0, r4
  4074aa:	602b      	str	r3, [r5, #0]
  4074ac:	b003      	add	sp, #12
  4074ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074b2:	2040      	movs	r0, #64	; 0x40
  4074b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4074b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4074bc:	e74a      	b.n	407354 <_malloc_r+0x44>
  4074be:	4423      	add	r3, r4
  4074c0:	68e1      	ldr	r1, [r4, #12]
  4074c2:	685a      	ldr	r2, [r3, #4]
  4074c4:	68a6      	ldr	r6, [r4, #8]
  4074c6:	f042 0201 	orr.w	r2, r2, #1
  4074ca:	60f1      	str	r1, [r6, #12]
  4074cc:	4628      	mov	r0, r5
  4074ce:	608e      	str	r6, [r1, #8]
  4074d0:	605a      	str	r2, [r3, #4]
  4074d2:	f000 fa9f 	bl	407a14 <__malloc_unlock>
  4074d6:	3408      	adds	r4, #8
  4074d8:	4620      	mov	r0, r4
  4074da:	b003      	add	sp, #12
  4074dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074e0:	4423      	add	r3, r4
  4074e2:	4628      	mov	r0, r5
  4074e4:	685a      	ldr	r2, [r3, #4]
  4074e6:	f042 0201 	orr.w	r2, r2, #1
  4074ea:	605a      	str	r2, [r3, #4]
  4074ec:	f000 fa92 	bl	407a14 <__malloc_unlock>
  4074f0:	3408      	adds	r4, #8
  4074f2:	4620      	mov	r0, r4
  4074f4:	b003      	add	sp, #12
  4074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074fa:	68bc      	ldr	r4, [r7, #8]
  4074fc:	6863      	ldr	r3, [r4, #4]
  4074fe:	f023 0803 	bic.w	r8, r3, #3
  407502:	45b0      	cmp	r8, r6
  407504:	d304      	bcc.n	407510 <_malloc_r+0x200>
  407506:	eba8 0306 	sub.w	r3, r8, r6
  40750a:	2b0f      	cmp	r3, #15
  40750c:	f300 8085 	bgt.w	40761a <_malloc_r+0x30a>
  407510:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40766c <_malloc_r+0x35c>
  407514:	4b50      	ldr	r3, [pc, #320]	; (407658 <_malloc_r+0x348>)
  407516:	f8d9 2000 	ldr.w	r2, [r9]
  40751a:	681b      	ldr	r3, [r3, #0]
  40751c:	3201      	adds	r2, #1
  40751e:	4433      	add	r3, r6
  407520:	eb04 0a08 	add.w	sl, r4, r8
  407524:	f000 8155 	beq.w	4077d2 <_malloc_r+0x4c2>
  407528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40752c:	330f      	adds	r3, #15
  40752e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407532:	f02b 0b0f 	bic.w	fp, fp, #15
  407536:	4659      	mov	r1, fp
  407538:	4628      	mov	r0, r5
  40753a:	f000 fc17 	bl	407d6c <_sbrk_r>
  40753e:	1c41      	adds	r1, r0, #1
  407540:	4602      	mov	r2, r0
  407542:	f000 80fc 	beq.w	40773e <_malloc_r+0x42e>
  407546:	4582      	cmp	sl, r0
  407548:	f200 80f7 	bhi.w	40773a <_malloc_r+0x42a>
  40754c:	4b43      	ldr	r3, [pc, #268]	; (40765c <_malloc_r+0x34c>)
  40754e:	6819      	ldr	r1, [r3, #0]
  407550:	4459      	add	r1, fp
  407552:	6019      	str	r1, [r3, #0]
  407554:	f000 814d 	beq.w	4077f2 <_malloc_r+0x4e2>
  407558:	f8d9 0000 	ldr.w	r0, [r9]
  40755c:	3001      	adds	r0, #1
  40755e:	bf1b      	ittet	ne
  407560:	eba2 0a0a 	subne.w	sl, r2, sl
  407564:	4451      	addne	r1, sl
  407566:	f8c9 2000 	streq.w	r2, [r9]
  40756a:	6019      	strne	r1, [r3, #0]
  40756c:	f012 0107 	ands.w	r1, r2, #7
  407570:	f000 8115 	beq.w	40779e <_malloc_r+0x48e>
  407574:	f1c1 0008 	rsb	r0, r1, #8
  407578:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40757c:	4402      	add	r2, r0
  40757e:	3108      	adds	r1, #8
  407580:	eb02 090b 	add.w	r9, r2, fp
  407584:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407588:	eba1 0909 	sub.w	r9, r1, r9
  40758c:	4649      	mov	r1, r9
  40758e:	4628      	mov	r0, r5
  407590:	9301      	str	r3, [sp, #4]
  407592:	9200      	str	r2, [sp, #0]
  407594:	f000 fbea 	bl	407d6c <_sbrk_r>
  407598:	1c43      	adds	r3, r0, #1
  40759a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40759e:	f000 8143 	beq.w	407828 <_malloc_r+0x518>
  4075a2:	1a80      	subs	r0, r0, r2
  4075a4:	4448      	add	r0, r9
  4075a6:	f040 0001 	orr.w	r0, r0, #1
  4075aa:	6819      	ldr	r1, [r3, #0]
  4075ac:	60ba      	str	r2, [r7, #8]
  4075ae:	4449      	add	r1, r9
  4075b0:	42bc      	cmp	r4, r7
  4075b2:	6050      	str	r0, [r2, #4]
  4075b4:	6019      	str	r1, [r3, #0]
  4075b6:	d017      	beq.n	4075e8 <_malloc_r+0x2d8>
  4075b8:	f1b8 0f0f 	cmp.w	r8, #15
  4075bc:	f240 80fb 	bls.w	4077b6 <_malloc_r+0x4a6>
  4075c0:	6860      	ldr	r0, [r4, #4]
  4075c2:	f1a8 020c 	sub.w	r2, r8, #12
  4075c6:	f022 0207 	bic.w	r2, r2, #7
  4075ca:	eb04 0e02 	add.w	lr, r4, r2
  4075ce:	f000 0001 	and.w	r0, r0, #1
  4075d2:	f04f 0c05 	mov.w	ip, #5
  4075d6:	4310      	orrs	r0, r2
  4075d8:	2a0f      	cmp	r2, #15
  4075da:	6060      	str	r0, [r4, #4]
  4075dc:	f8ce c004 	str.w	ip, [lr, #4]
  4075e0:	f8ce c008 	str.w	ip, [lr, #8]
  4075e4:	f200 8117 	bhi.w	407816 <_malloc_r+0x506>
  4075e8:	4b1d      	ldr	r3, [pc, #116]	; (407660 <_malloc_r+0x350>)
  4075ea:	68bc      	ldr	r4, [r7, #8]
  4075ec:	681a      	ldr	r2, [r3, #0]
  4075ee:	4291      	cmp	r1, r2
  4075f0:	bf88      	it	hi
  4075f2:	6019      	strhi	r1, [r3, #0]
  4075f4:	4b1b      	ldr	r3, [pc, #108]	; (407664 <_malloc_r+0x354>)
  4075f6:	681a      	ldr	r2, [r3, #0]
  4075f8:	4291      	cmp	r1, r2
  4075fa:	6862      	ldr	r2, [r4, #4]
  4075fc:	bf88      	it	hi
  4075fe:	6019      	strhi	r1, [r3, #0]
  407600:	f022 0203 	bic.w	r2, r2, #3
  407604:	4296      	cmp	r6, r2
  407606:	eba2 0306 	sub.w	r3, r2, r6
  40760a:	d801      	bhi.n	407610 <_malloc_r+0x300>
  40760c:	2b0f      	cmp	r3, #15
  40760e:	dc04      	bgt.n	40761a <_malloc_r+0x30a>
  407610:	4628      	mov	r0, r5
  407612:	f000 f9ff 	bl	407a14 <__malloc_unlock>
  407616:	2400      	movs	r4, #0
  407618:	e740      	b.n	40749c <_malloc_r+0x18c>
  40761a:	19a2      	adds	r2, r4, r6
  40761c:	f043 0301 	orr.w	r3, r3, #1
  407620:	f046 0601 	orr.w	r6, r6, #1
  407624:	6066      	str	r6, [r4, #4]
  407626:	4628      	mov	r0, r5
  407628:	60ba      	str	r2, [r7, #8]
  40762a:	6053      	str	r3, [r2, #4]
  40762c:	f000 f9f2 	bl	407a14 <__malloc_unlock>
  407630:	3408      	adds	r4, #8
  407632:	4620      	mov	r0, r4
  407634:	b003      	add	sp, #12
  407636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40763a:	2b14      	cmp	r3, #20
  40763c:	d971      	bls.n	407722 <_malloc_r+0x412>
  40763e:	2b54      	cmp	r3, #84	; 0x54
  407640:	f200 80a3 	bhi.w	40778a <_malloc_r+0x47a>
  407644:	0b33      	lsrs	r3, r6, #12
  407646:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40764a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40764e:	00c3      	lsls	r3, r0, #3
  407650:	e680      	b.n	407354 <_malloc_r+0x44>
  407652:	bf00      	nop
  407654:	200005c0 	.word	0x200005c0
  407658:	2000c3d4 	.word	0x2000c3d4
  40765c:	2000c3a4 	.word	0x2000c3a4
  407660:	2000c3cc 	.word	0x2000c3cc
  407664:	2000c3d0 	.word	0x2000c3d0
  407668:	200005c8 	.word	0x200005c8
  40766c:	200009c8 	.word	0x200009c8
  407670:	0a5a      	lsrs	r2, r3, #9
  407672:	2a04      	cmp	r2, #4
  407674:	d95b      	bls.n	40772e <_malloc_r+0x41e>
  407676:	2a14      	cmp	r2, #20
  407678:	f200 80ae 	bhi.w	4077d8 <_malloc_r+0x4c8>
  40767c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407680:	00c9      	lsls	r1, r1, #3
  407682:	325b      	adds	r2, #91	; 0x5b
  407684:	eb07 0c01 	add.w	ip, r7, r1
  407688:	5879      	ldr	r1, [r7, r1]
  40768a:	f1ac 0c08 	sub.w	ip, ip, #8
  40768e:	458c      	cmp	ip, r1
  407690:	f000 8088 	beq.w	4077a4 <_malloc_r+0x494>
  407694:	684a      	ldr	r2, [r1, #4]
  407696:	f022 0203 	bic.w	r2, r2, #3
  40769a:	4293      	cmp	r3, r2
  40769c:	d273      	bcs.n	407786 <_malloc_r+0x476>
  40769e:	6889      	ldr	r1, [r1, #8]
  4076a0:	458c      	cmp	ip, r1
  4076a2:	d1f7      	bne.n	407694 <_malloc_r+0x384>
  4076a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4076a8:	687b      	ldr	r3, [r7, #4]
  4076aa:	60e2      	str	r2, [r4, #12]
  4076ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4076b0:	6094      	str	r4, [r2, #8]
  4076b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4076b6:	e68f      	b.n	4073d8 <_malloc_r+0xc8>
  4076b8:	19a1      	adds	r1, r4, r6
  4076ba:	f046 0c01 	orr.w	ip, r6, #1
  4076be:	f042 0601 	orr.w	r6, r2, #1
  4076c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4076c6:	4628      	mov	r0, r5
  4076c8:	6179      	str	r1, [r7, #20]
  4076ca:	6139      	str	r1, [r7, #16]
  4076cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4076d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4076d4:	604e      	str	r6, [r1, #4]
  4076d6:	50e2      	str	r2, [r4, r3]
  4076d8:	f000 f99c 	bl	407a14 <__malloc_unlock>
  4076dc:	3408      	adds	r4, #8
  4076de:	e6dd      	b.n	40749c <_malloc_r+0x18c>
  4076e0:	687b      	ldr	r3, [r7, #4]
  4076e2:	e679      	b.n	4073d8 <_malloc_r+0xc8>
  4076e4:	f108 0801 	add.w	r8, r8, #1
  4076e8:	f018 0f03 	tst.w	r8, #3
  4076ec:	f10c 0c08 	add.w	ip, ip, #8
  4076f0:	f47f ae85 	bne.w	4073fe <_malloc_r+0xee>
  4076f4:	e02d      	b.n	407752 <_malloc_r+0x442>
  4076f6:	68dc      	ldr	r4, [r3, #12]
  4076f8:	42a3      	cmp	r3, r4
  4076fa:	bf08      	it	eq
  4076fc:	3002      	addeq	r0, #2
  4076fe:	f43f ae3e 	beq.w	40737e <_malloc_r+0x6e>
  407702:	e6bb      	b.n	40747c <_malloc_r+0x16c>
  407704:	4419      	add	r1, r3
  407706:	461c      	mov	r4, r3
  407708:	684a      	ldr	r2, [r1, #4]
  40770a:	68db      	ldr	r3, [r3, #12]
  40770c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407710:	f042 0201 	orr.w	r2, r2, #1
  407714:	604a      	str	r2, [r1, #4]
  407716:	4628      	mov	r0, r5
  407718:	60f3      	str	r3, [r6, #12]
  40771a:	609e      	str	r6, [r3, #8]
  40771c:	f000 f97a 	bl	407a14 <__malloc_unlock>
  407720:	e6bc      	b.n	40749c <_malloc_r+0x18c>
  407722:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407726:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40772a:	00c3      	lsls	r3, r0, #3
  40772c:	e612      	b.n	407354 <_malloc_r+0x44>
  40772e:	099a      	lsrs	r2, r3, #6
  407730:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407734:	00c9      	lsls	r1, r1, #3
  407736:	3238      	adds	r2, #56	; 0x38
  407738:	e7a4      	b.n	407684 <_malloc_r+0x374>
  40773a:	42bc      	cmp	r4, r7
  40773c:	d054      	beq.n	4077e8 <_malloc_r+0x4d8>
  40773e:	68bc      	ldr	r4, [r7, #8]
  407740:	6862      	ldr	r2, [r4, #4]
  407742:	f022 0203 	bic.w	r2, r2, #3
  407746:	e75d      	b.n	407604 <_malloc_r+0x2f4>
  407748:	f859 3908 	ldr.w	r3, [r9], #-8
  40774c:	4599      	cmp	r9, r3
  40774e:	f040 8086 	bne.w	40785e <_malloc_r+0x54e>
  407752:	f010 0f03 	tst.w	r0, #3
  407756:	f100 30ff 	add.w	r0, r0, #4294967295
  40775a:	d1f5      	bne.n	407748 <_malloc_r+0x438>
  40775c:	687b      	ldr	r3, [r7, #4]
  40775e:	ea23 0304 	bic.w	r3, r3, r4
  407762:	607b      	str	r3, [r7, #4]
  407764:	0064      	lsls	r4, r4, #1
  407766:	429c      	cmp	r4, r3
  407768:	f63f aec7 	bhi.w	4074fa <_malloc_r+0x1ea>
  40776c:	2c00      	cmp	r4, #0
  40776e:	f43f aec4 	beq.w	4074fa <_malloc_r+0x1ea>
  407772:	421c      	tst	r4, r3
  407774:	4640      	mov	r0, r8
  407776:	f47f ae3e 	bne.w	4073f6 <_malloc_r+0xe6>
  40777a:	0064      	lsls	r4, r4, #1
  40777c:	421c      	tst	r4, r3
  40777e:	f100 0004 	add.w	r0, r0, #4
  407782:	d0fa      	beq.n	40777a <_malloc_r+0x46a>
  407784:	e637      	b.n	4073f6 <_malloc_r+0xe6>
  407786:	468c      	mov	ip, r1
  407788:	e78c      	b.n	4076a4 <_malloc_r+0x394>
  40778a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40778e:	d815      	bhi.n	4077bc <_malloc_r+0x4ac>
  407790:	0bf3      	lsrs	r3, r6, #15
  407792:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407796:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40779a:	00c3      	lsls	r3, r0, #3
  40779c:	e5da      	b.n	407354 <_malloc_r+0x44>
  40779e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4077a2:	e6ed      	b.n	407580 <_malloc_r+0x270>
  4077a4:	687b      	ldr	r3, [r7, #4]
  4077a6:	1092      	asrs	r2, r2, #2
  4077a8:	2101      	movs	r1, #1
  4077aa:	fa01 f202 	lsl.w	r2, r1, r2
  4077ae:	4313      	orrs	r3, r2
  4077b0:	607b      	str	r3, [r7, #4]
  4077b2:	4662      	mov	r2, ip
  4077b4:	e779      	b.n	4076aa <_malloc_r+0x39a>
  4077b6:	2301      	movs	r3, #1
  4077b8:	6053      	str	r3, [r2, #4]
  4077ba:	e729      	b.n	407610 <_malloc_r+0x300>
  4077bc:	f240 5254 	movw	r2, #1364	; 0x554
  4077c0:	4293      	cmp	r3, r2
  4077c2:	d822      	bhi.n	40780a <_malloc_r+0x4fa>
  4077c4:	0cb3      	lsrs	r3, r6, #18
  4077c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4077ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4077ce:	00c3      	lsls	r3, r0, #3
  4077d0:	e5c0      	b.n	407354 <_malloc_r+0x44>
  4077d2:	f103 0b10 	add.w	fp, r3, #16
  4077d6:	e6ae      	b.n	407536 <_malloc_r+0x226>
  4077d8:	2a54      	cmp	r2, #84	; 0x54
  4077da:	d829      	bhi.n	407830 <_malloc_r+0x520>
  4077dc:	0b1a      	lsrs	r2, r3, #12
  4077de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4077e2:	00c9      	lsls	r1, r1, #3
  4077e4:	326e      	adds	r2, #110	; 0x6e
  4077e6:	e74d      	b.n	407684 <_malloc_r+0x374>
  4077e8:	4b20      	ldr	r3, [pc, #128]	; (40786c <_malloc_r+0x55c>)
  4077ea:	6819      	ldr	r1, [r3, #0]
  4077ec:	4459      	add	r1, fp
  4077ee:	6019      	str	r1, [r3, #0]
  4077f0:	e6b2      	b.n	407558 <_malloc_r+0x248>
  4077f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4077f6:	2800      	cmp	r0, #0
  4077f8:	f47f aeae 	bne.w	407558 <_malloc_r+0x248>
  4077fc:	eb08 030b 	add.w	r3, r8, fp
  407800:	68ba      	ldr	r2, [r7, #8]
  407802:	f043 0301 	orr.w	r3, r3, #1
  407806:	6053      	str	r3, [r2, #4]
  407808:	e6ee      	b.n	4075e8 <_malloc_r+0x2d8>
  40780a:	207f      	movs	r0, #127	; 0x7f
  40780c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407810:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  407814:	e59e      	b.n	407354 <_malloc_r+0x44>
  407816:	f104 0108 	add.w	r1, r4, #8
  40781a:	4628      	mov	r0, r5
  40781c:	9300      	str	r3, [sp, #0]
  40781e:	f7ff fa59 	bl	406cd4 <_free_r>
  407822:	9b00      	ldr	r3, [sp, #0]
  407824:	6819      	ldr	r1, [r3, #0]
  407826:	e6df      	b.n	4075e8 <_malloc_r+0x2d8>
  407828:	2001      	movs	r0, #1
  40782a:	f04f 0900 	mov.w	r9, #0
  40782e:	e6bc      	b.n	4075aa <_malloc_r+0x29a>
  407830:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407834:	d805      	bhi.n	407842 <_malloc_r+0x532>
  407836:	0bda      	lsrs	r2, r3, #15
  407838:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40783c:	00c9      	lsls	r1, r1, #3
  40783e:	3277      	adds	r2, #119	; 0x77
  407840:	e720      	b.n	407684 <_malloc_r+0x374>
  407842:	f240 5154 	movw	r1, #1364	; 0x554
  407846:	428a      	cmp	r2, r1
  407848:	d805      	bhi.n	407856 <_malloc_r+0x546>
  40784a:	0c9a      	lsrs	r2, r3, #18
  40784c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407850:	00c9      	lsls	r1, r1, #3
  407852:	327c      	adds	r2, #124	; 0x7c
  407854:	e716      	b.n	407684 <_malloc_r+0x374>
  407856:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40785a:	227e      	movs	r2, #126	; 0x7e
  40785c:	e712      	b.n	407684 <_malloc_r+0x374>
  40785e:	687b      	ldr	r3, [r7, #4]
  407860:	e780      	b.n	407764 <_malloc_r+0x454>
  407862:	08f0      	lsrs	r0, r6, #3
  407864:	f106 0308 	add.w	r3, r6, #8
  407868:	e600      	b.n	40746c <_malloc_r+0x15c>
  40786a:	bf00      	nop
  40786c:	2000c3a4 	.word	0x2000c3a4

00407870 <__ascii_mbtowc>:
  407870:	b082      	sub	sp, #8
  407872:	b149      	cbz	r1, 407888 <__ascii_mbtowc+0x18>
  407874:	b15a      	cbz	r2, 40788e <__ascii_mbtowc+0x1e>
  407876:	b16b      	cbz	r3, 407894 <__ascii_mbtowc+0x24>
  407878:	7813      	ldrb	r3, [r2, #0]
  40787a:	600b      	str	r3, [r1, #0]
  40787c:	7812      	ldrb	r2, [r2, #0]
  40787e:	1c10      	adds	r0, r2, #0
  407880:	bf18      	it	ne
  407882:	2001      	movne	r0, #1
  407884:	b002      	add	sp, #8
  407886:	4770      	bx	lr
  407888:	a901      	add	r1, sp, #4
  40788a:	2a00      	cmp	r2, #0
  40788c:	d1f3      	bne.n	407876 <__ascii_mbtowc+0x6>
  40788e:	4610      	mov	r0, r2
  407890:	b002      	add	sp, #8
  407892:	4770      	bx	lr
  407894:	f06f 0001 	mvn.w	r0, #1
  407898:	e7f4      	b.n	407884 <__ascii_mbtowc+0x14>
  40789a:	bf00      	nop
  40789c:	0000      	movs	r0, r0
	...

004078a0 <memchr>:
  4078a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4078a4:	2a10      	cmp	r2, #16
  4078a6:	db2b      	blt.n	407900 <memchr+0x60>
  4078a8:	f010 0f07 	tst.w	r0, #7
  4078ac:	d008      	beq.n	4078c0 <memchr+0x20>
  4078ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4078b2:	3a01      	subs	r2, #1
  4078b4:	428b      	cmp	r3, r1
  4078b6:	d02d      	beq.n	407914 <memchr+0x74>
  4078b8:	f010 0f07 	tst.w	r0, #7
  4078bc:	b342      	cbz	r2, 407910 <memchr+0x70>
  4078be:	d1f6      	bne.n	4078ae <memchr+0xe>
  4078c0:	b4f0      	push	{r4, r5, r6, r7}
  4078c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4078c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4078ca:	f022 0407 	bic.w	r4, r2, #7
  4078ce:	f07f 0700 	mvns.w	r7, #0
  4078d2:	2300      	movs	r3, #0
  4078d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4078d8:	3c08      	subs	r4, #8
  4078da:	ea85 0501 	eor.w	r5, r5, r1
  4078de:	ea86 0601 	eor.w	r6, r6, r1
  4078e2:	fa85 f547 	uadd8	r5, r5, r7
  4078e6:	faa3 f587 	sel	r5, r3, r7
  4078ea:	fa86 f647 	uadd8	r6, r6, r7
  4078ee:	faa5 f687 	sel	r6, r5, r7
  4078f2:	b98e      	cbnz	r6, 407918 <memchr+0x78>
  4078f4:	d1ee      	bne.n	4078d4 <memchr+0x34>
  4078f6:	bcf0      	pop	{r4, r5, r6, r7}
  4078f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4078fc:	f002 0207 	and.w	r2, r2, #7
  407900:	b132      	cbz	r2, 407910 <memchr+0x70>
  407902:	f810 3b01 	ldrb.w	r3, [r0], #1
  407906:	3a01      	subs	r2, #1
  407908:	ea83 0301 	eor.w	r3, r3, r1
  40790c:	b113      	cbz	r3, 407914 <memchr+0x74>
  40790e:	d1f8      	bne.n	407902 <memchr+0x62>
  407910:	2000      	movs	r0, #0
  407912:	4770      	bx	lr
  407914:	3801      	subs	r0, #1
  407916:	4770      	bx	lr
  407918:	2d00      	cmp	r5, #0
  40791a:	bf06      	itte	eq
  40791c:	4635      	moveq	r5, r6
  40791e:	3803      	subeq	r0, #3
  407920:	3807      	subne	r0, #7
  407922:	f015 0f01 	tst.w	r5, #1
  407926:	d107      	bne.n	407938 <memchr+0x98>
  407928:	3001      	adds	r0, #1
  40792a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40792e:	bf02      	ittt	eq
  407930:	3001      	addeq	r0, #1
  407932:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407936:	3001      	addeq	r0, #1
  407938:	bcf0      	pop	{r4, r5, r6, r7}
  40793a:	3801      	subs	r0, #1
  40793c:	4770      	bx	lr
  40793e:	bf00      	nop

00407940 <memmove>:
  407940:	4288      	cmp	r0, r1
  407942:	b5f0      	push	{r4, r5, r6, r7, lr}
  407944:	d90d      	bls.n	407962 <memmove+0x22>
  407946:	188b      	adds	r3, r1, r2
  407948:	4298      	cmp	r0, r3
  40794a:	d20a      	bcs.n	407962 <memmove+0x22>
  40794c:	1884      	adds	r4, r0, r2
  40794e:	2a00      	cmp	r2, #0
  407950:	d051      	beq.n	4079f6 <memmove+0xb6>
  407952:	4622      	mov	r2, r4
  407954:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407958:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40795c:	4299      	cmp	r1, r3
  40795e:	d1f9      	bne.n	407954 <memmove+0x14>
  407960:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407962:	2a0f      	cmp	r2, #15
  407964:	d948      	bls.n	4079f8 <memmove+0xb8>
  407966:	ea41 0300 	orr.w	r3, r1, r0
  40796a:	079b      	lsls	r3, r3, #30
  40796c:	d146      	bne.n	4079fc <memmove+0xbc>
  40796e:	f100 0410 	add.w	r4, r0, #16
  407972:	f101 0310 	add.w	r3, r1, #16
  407976:	4615      	mov	r5, r2
  407978:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40797c:	f844 6c10 	str.w	r6, [r4, #-16]
  407980:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407984:	f844 6c0c 	str.w	r6, [r4, #-12]
  407988:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40798c:	f844 6c08 	str.w	r6, [r4, #-8]
  407990:	3d10      	subs	r5, #16
  407992:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407996:	f844 6c04 	str.w	r6, [r4, #-4]
  40799a:	2d0f      	cmp	r5, #15
  40799c:	f103 0310 	add.w	r3, r3, #16
  4079a0:	f104 0410 	add.w	r4, r4, #16
  4079a4:	d8e8      	bhi.n	407978 <memmove+0x38>
  4079a6:	f1a2 0310 	sub.w	r3, r2, #16
  4079aa:	f023 030f 	bic.w	r3, r3, #15
  4079ae:	f002 0e0f 	and.w	lr, r2, #15
  4079b2:	3310      	adds	r3, #16
  4079b4:	f1be 0f03 	cmp.w	lr, #3
  4079b8:	4419      	add	r1, r3
  4079ba:	4403      	add	r3, r0
  4079bc:	d921      	bls.n	407a02 <memmove+0xc2>
  4079be:	1f1e      	subs	r6, r3, #4
  4079c0:	460d      	mov	r5, r1
  4079c2:	4674      	mov	r4, lr
  4079c4:	3c04      	subs	r4, #4
  4079c6:	f855 7b04 	ldr.w	r7, [r5], #4
  4079ca:	f846 7f04 	str.w	r7, [r6, #4]!
  4079ce:	2c03      	cmp	r4, #3
  4079d0:	d8f8      	bhi.n	4079c4 <memmove+0x84>
  4079d2:	f1ae 0404 	sub.w	r4, lr, #4
  4079d6:	f024 0403 	bic.w	r4, r4, #3
  4079da:	3404      	adds	r4, #4
  4079dc:	4421      	add	r1, r4
  4079de:	4423      	add	r3, r4
  4079e0:	f002 0203 	and.w	r2, r2, #3
  4079e4:	b162      	cbz	r2, 407a00 <memmove+0xc0>
  4079e6:	3b01      	subs	r3, #1
  4079e8:	440a      	add	r2, r1
  4079ea:	f811 4b01 	ldrb.w	r4, [r1], #1
  4079ee:	f803 4f01 	strb.w	r4, [r3, #1]!
  4079f2:	428a      	cmp	r2, r1
  4079f4:	d1f9      	bne.n	4079ea <memmove+0xaa>
  4079f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4079f8:	4603      	mov	r3, r0
  4079fa:	e7f3      	b.n	4079e4 <memmove+0xa4>
  4079fc:	4603      	mov	r3, r0
  4079fe:	e7f2      	b.n	4079e6 <memmove+0xa6>
  407a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a02:	4672      	mov	r2, lr
  407a04:	e7ee      	b.n	4079e4 <memmove+0xa4>
  407a06:	bf00      	nop

00407a08 <__malloc_lock>:
  407a08:	4801      	ldr	r0, [pc, #4]	; (407a10 <__malloc_lock+0x8>)
  407a0a:	f7ff bbfd 	b.w	407208 <__retarget_lock_acquire_recursive>
  407a0e:	bf00      	nop
  407a10:	2000c964 	.word	0x2000c964

00407a14 <__malloc_unlock>:
  407a14:	4801      	ldr	r0, [pc, #4]	; (407a1c <__malloc_unlock+0x8>)
  407a16:	f7ff bbf9 	b.w	40720c <__retarget_lock_release_recursive>
  407a1a:	bf00      	nop
  407a1c:	2000c964 	.word	0x2000c964

00407a20 <_realloc_r>:
  407a20:	2900      	cmp	r1, #0
  407a22:	f000 8095 	beq.w	407b50 <_realloc_r+0x130>
  407a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a2a:	460d      	mov	r5, r1
  407a2c:	4616      	mov	r6, r2
  407a2e:	b083      	sub	sp, #12
  407a30:	4680      	mov	r8, r0
  407a32:	f106 070b 	add.w	r7, r6, #11
  407a36:	f7ff ffe7 	bl	407a08 <__malloc_lock>
  407a3a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407a3e:	2f16      	cmp	r7, #22
  407a40:	f02e 0403 	bic.w	r4, lr, #3
  407a44:	f1a5 0908 	sub.w	r9, r5, #8
  407a48:	d83c      	bhi.n	407ac4 <_realloc_r+0xa4>
  407a4a:	2210      	movs	r2, #16
  407a4c:	4617      	mov	r7, r2
  407a4e:	42be      	cmp	r6, r7
  407a50:	d83d      	bhi.n	407ace <_realloc_r+0xae>
  407a52:	4294      	cmp	r4, r2
  407a54:	da43      	bge.n	407ade <_realloc_r+0xbe>
  407a56:	4bc4      	ldr	r3, [pc, #784]	; (407d68 <_realloc_r+0x348>)
  407a58:	6899      	ldr	r1, [r3, #8]
  407a5a:	eb09 0004 	add.w	r0, r9, r4
  407a5e:	4288      	cmp	r0, r1
  407a60:	f000 80b4 	beq.w	407bcc <_realloc_r+0x1ac>
  407a64:	6843      	ldr	r3, [r0, #4]
  407a66:	f023 0101 	bic.w	r1, r3, #1
  407a6a:	4401      	add	r1, r0
  407a6c:	6849      	ldr	r1, [r1, #4]
  407a6e:	07c9      	lsls	r1, r1, #31
  407a70:	d54c      	bpl.n	407b0c <_realloc_r+0xec>
  407a72:	f01e 0f01 	tst.w	lr, #1
  407a76:	f000 809b 	beq.w	407bb0 <_realloc_r+0x190>
  407a7a:	4631      	mov	r1, r6
  407a7c:	4640      	mov	r0, r8
  407a7e:	f7ff fc47 	bl	407310 <_malloc_r>
  407a82:	4606      	mov	r6, r0
  407a84:	2800      	cmp	r0, #0
  407a86:	d03a      	beq.n	407afe <_realloc_r+0xde>
  407a88:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407a8c:	f023 0301 	bic.w	r3, r3, #1
  407a90:	444b      	add	r3, r9
  407a92:	f1a0 0208 	sub.w	r2, r0, #8
  407a96:	429a      	cmp	r2, r3
  407a98:	f000 8121 	beq.w	407cde <_realloc_r+0x2be>
  407a9c:	1f22      	subs	r2, r4, #4
  407a9e:	2a24      	cmp	r2, #36	; 0x24
  407aa0:	f200 8107 	bhi.w	407cb2 <_realloc_r+0x292>
  407aa4:	2a13      	cmp	r2, #19
  407aa6:	f200 80db 	bhi.w	407c60 <_realloc_r+0x240>
  407aaa:	4603      	mov	r3, r0
  407aac:	462a      	mov	r2, r5
  407aae:	6811      	ldr	r1, [r2, #0]
  407ab0:	6019      	str	r1, [r3, #0]
  407ab2:	6851      	ldr	r1, [r2, #4]
  407ab4:	6059      	str	r1, [r3, #4]
  407ab6:	6892      	ldr	r2, [r2, #8]
  407ab8:	609a      	str	r2, [r3, #8]
  407aba:	4629      	mov	r1, r5
  407abc:	4640      	mov	r0, r8
  407abe:	f7ff f909 	bl	406cd4 <_free_r>
  407ac2:	e01c      	b.n	407afe <_realloc_r+0xde>
  407ac4:	f027 0707 	bic.w	r7, r7, #7
  407ac8:	2f00      	cmp	r7, #0
  407aca:	463a      	mov	r2, r7
  407acc:	dabf      	bge.n	407a4e <_realloc_r+0x2e>
  407ace:	2600      	movs	r6, #0
  407ad0:	230c      	movs	r3, #12
  407ad2:	4630      	mov	r0, r6
  407ad4:	f8c8 3000 	str.w	r3, [r8]
  407ad8:	b003      	add	sp, #12
  407ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ade:	462e      	mov	r6, r5
  407ae0:	1be3      	subs	r3, r4, r7
  407ae2:	2b0f      	cmp	r3, #15
  407ae4:	d81e      	bhi.n	407b24 <_realloc_r+0x104>
  407ae6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407aea:	f003 0301 	and.w	r3, r3, #1
  407aee:	4323      	orrs	r3, r4
  407af0:	444c      	add	r4, r9
  407af2:	f8c9 3004 	str.w	r3, [r9, #4]
  407af6:	6863      	ldr	r3, [r4, #4]
  407af8:	f043 0301 	orr.w	r3, r3, #1
  407afc:	6063      	str	r3, [r4, #4]
  407afe:	4640      	mov	r0, r8
  407b00:	f7ff ff88 	bl	407a14 <__malloc_unlock>
  407b04:	4630      	mov	r0, r6
  407b06:	b003      	add	sp, #12
  407b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b0c:	f023 0303 	bic.w	r3, r3, #3
  407b10:	18e1      	adds	r1, r4, r3
  407b12:	4291      	cmp	r1, r2
  407b14:	db1f      	blt.n	407b56 <_realloc_r+0x136>
  407b16:	68c3      	ldr	r3, [r0, #12]
  407b18:	6882      	ldr	r2, [r0, #8]
  407b1a:	462e      	mov	r6, r5
  407b1c:	60d3      	str	r3, [r2, #12]
  407b1e:	460c      	mov	r4, r1
  407b20:	609a      	str	r2, [r3, #8]
  407b22:	e7dd      	b.n	407ae0 <_realloc_r+0xc0>
  407b24:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407b28:	eb09 0107 	add.w	r1, r9, r7
  407b2c:	f002 0201 	and.w	r2, r2, #1
  407b30:	444c      	add	r4, r9
  407b32:	f043 0301 	orr.w	r3, r3, #1
  407b36:	4317      	orrs	r7, r2
  407b38:	f8c9 7004 	str.w	r7, [r9, #4]
  407b3c:	604b      	str	r3, [r1, #4]
  407b3e:	6863      	ldr	r3, [r4, #4]
  407b40:	f043 0301 	orr.w	r3, r3, #1
  407b44:	3108      	adds	r1, #8
  407b46:	6063      	str	r3, [r4, #4]
  407b48:	4640      	mov	r0, r8
  407b4a:	f7ff f8c3 	bl	406cd4 <_free_r>
  407b4e:	e7d6      	b.n	407afe <_realloc_r+0xde>
  407b50:	4611      	mov	r1, r2
  407b52:	f7ff bbdd 	b.w	407310 <_malloc_r>
  407b56:	f01e 0f01 	tst.w	lr, #1
  407b5a:	d18e      	bne.n	407a7a <_realloc_r+0x5a>
  407b5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407b60:	eba9 0a01 	sub.w	sl, r9, r1
  407b64:	f8da 1004 	ldr.w	r1, [sl, #4]
  407b68:	f021 0103 	bic.w	r1, r1, #3
  407b6c:	440b      	add	r3, r1
  407b6e:	4423      	add	r3, r4
  407b70:	4293      	cmp	r3, r2
  407b72:	db25      	blt.n	407bc0 <_realloc_r+0x1a0>
  407b74:	68c2      	ldr	r2, [r0, #12]
  407b76:	6881      	ldr	r1, [r0, #8]
  407b78:	4656      	mov	r6, sl
  407b7a:	60ca      	str	r2, [r1, #12]
  407b7c:	6091      	str	r1, [r2, #8]
  407b7e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407b82:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407b86:	1f22      	subs	r2, r4, #4
  407b88:	2a24      	cmp	r2, #36	; 0x24
  407b8a:	60c1      	str	r1, [r0, #12]
  407b8c:	6088      	str	r0, [r1, #8]
  407b8e:	f200 8094 	bhi.w	407cba <_realloc_r+0x29a>
  407b92:	2a13      	cmp	r2, #19
  407b94:	d96f      	bls.n	407c76 <_realloc_r+0x256>
  407b96:	6829      	ldr	r1, [r5, #0]
  407b98:	f8ca 1008 	str.w	r1, [sl, #8]
  407b9c:	6869      	ldr	r1, [r5, #4]
  407b9e:	f8ca 100c 	str.w	r1, [sl, #12]
  407ba2:	2a1b      	cmp	r2, #27
  407ba4:	f200 80a2 	bhi.w	407cec <_realloc_r+0x2cc>
  407ba8:	3508      	adds	r5, #8
  407baa:	f10a 0210 	add.w	r2, sl, #16
  407bae:	e063      	b.n	407c78 <_realloc_r+0x258>
  407bb0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407bb4:	eba9 0a03 	sub.w	sl, r9, r3
  407bb8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407bbc:	f021 0103 	bic.w	r1, r1, #3
  407bc0:	1863      	adds	r3, r4, r1
  407bc2:	4293      	cmp	r3, r2
  407bc4:	f6ff af59 	blt.w	407a7a <_realloc_r+0x5a>
  407bc8:	4656      	mov	r6, sl
  407bca:	e7d8      	b.n	407b7e <_realloc_r+0x15e>
  407bcc:	6841      	ldr	r1, [r0, #4]
  407bce:	f021 0b03 	bic.w	fp, r1, #3
  407bd2:	44a3      	add	fp, r4
  407bd4:	f107 0010 	add.w	r0, r7, #16
  407bd8:	4583      	cmp	fp, r0
  407bda:	da56      	bge.n	407c8a <_realloc_r+0x26a>
  407bdc:	f01e 0f01 	tst.w	lr, #1
  407be0:	f47f af4b 	bne.w	407a7a <_realloc_r+0x5a>
  407be4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407be8:	eba9 0a01 	sub.w	sl, r9, r1
  407bec:	f8da 1004 	ldr.w	r1, [sl, #4]
  407bf0:	f021 0103 	bic.w	r1, r1, #3
  407bf4:	448b      	add	fp, r1
  407bf6:	4558      	cmp	r0, fp
  407bf8:	dce2      	bgt.n	407bc0 <_realloc_r+0x1a0>
  407bfa:	4656      	mov	r6, sl
  407bfc:	f8da 100c 	ldr.w	r1, [sl, #12]
  407c00:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407c04:	1f22      	subs	r2, r4, #4
  407c06:	2a24      	cmp	r2, #36	; 0x24
  407c08:	60c1      	str	r1, [r0, #12]
  407c0a:	6088      	str	r0, [r1, #8]
  407c0c:	f200 808f 	bhi.w	407d2e <_realloc_r+0x30e>
  407c10:	2a13      	cmp	r2, #19
  407c12:	f240 808a 	bls.w	407d2a <_realloc_r+0x30a>
  407c16:	6829      	ldr	r1, [r5, #0]
  407c18:	f8ca 1008 	str.w	r1, [sl, #8]
  407c1c:	6869      	ldr	r1, [r5, #4]
  407c1e:	f8ca 100c 	str.w	r1, [sl, #12]
  407c22:	2a1b      	cmp	r2, #27
  407c24:	f200 808a 	bhi.w	407d3c <_realloc_r+0x31c>
  407c28:	3508      	adds	r5, #8
  407c2a:	f10a 0210 	add.w	r2, sl, #16
  407c2e:	6829      	ldr	r1, [r5, #0]
  407c30:	6011      	str	r1, [r2, #0]
  407c32:	6869      	ldr	r1, [r5, #4]
  407c34:	6051      	str	r1, [r2, #4]
  407c36:	68a9      	ldr	r1, [r5, #8]
  407c38:	6091      	str	r1, [r2, #8]
  407c3a:	eb0a 0107 	add.w	r1, sl, r7
  407c3e:	ebab 0207 	sub.w	r2, fp, r7
  407c42:	f042 0201 	orr.w	r2, r2, #1
  407c46:	6099      	str	r1, [r3, #8]
  407c48:	604a      	str	r2, [r1, #4]
  407c4a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c4e:	f003 0301 	and.w	r3, r3, #1
  407c52:	431f      	orrs	r7, r3
  407c54:	4640      	mov	r0, r8
  407c56:	f8ca 7004 	str.w	r7, [sl, #4]
  407c5a:	f7ff fedb 	bl	407a14 <__malloc_unlock>
  407c5e:	e751      	b.n	407b04 <_realloc_r+0xe4>
  407c60:	682b      	ldr	r3, [r5, #0]
  407c62:	6003      	str	r3, [r0, #0]
  407c64:	686b      	ldr	r3, [r5, #4]
  407c66:	6043      	str	r3, [r0, #4]
  407c68:	2a1b      	cmp	r2, #27
  407c6a:	d82d      	bhi.n	407cc8 <_realloc_r+0x2a8>
  407c6c:	f100 0308 	add.w	r3, r0, #8
  407c70:	f105 0208 	add.w	r2, r5, #8
  407c74:	e71b      	b.n	407aae <_realloc_r+0x8e>
  407c76:	4632      	mov	r2, r6
  407c78:	6829      	ldr	r1, [r5, #0]
  407c7a:	6011      	str	r1, [r2, #0]
  407c7c:	6869      	ldr	r1, [r5, #4]
  407c7e:	6051      	str	r1, [r2, #4]
  407c80:	68a9      	ldr	r1, [r5, #8]
  407c82:	6091      	str	r1, [r2, #8]
  407c84:	461c      	mov	r4, r3
  407c86:	46d1      	mov	r9, sl
  407c88:	e72a      	b.n	407ae0 <_realloc_r+0xc0>
  407c8a:	eb09 0107 	add.w	r1, r9, r7
  407c8e:	ebab 0b07 	sub.w	fp, fp, r7
  407c92:	f04b 0201 	orr.w	r2, fp, #1
  407c96:	6099      	str	r1, [r3, #8]
  407c98:	604a      	str	r2, [r1, #4]
  407c9a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407c9e:	f003 0301 	and.w	r3, r3, #1
  407ca2:	431f      	orrs	r7, r3
  407ca4:	4640      	mov	r0, r8
  407ca6:	f845 7c04 	str.w	r7, [r5, #-4]
  407caa:	f7ff feb3 	bl	407a14 <__malloc_unlock>
  407cae:	462e      	mov	r6, r5
  407cb0:	e728      	b.n	407b04 <_realloc_r+0xe4>
  407cb2:	4629      	mov	r1, r5
  407cb4:	f7ff fe44 	bl	407940 <memmove>
  407cb8:	e6ff      	b.n	407aba <_realloc_r+0x9a>
  407cba:	4629      	mov	r1, r5
  407cbc:	4630      	mov	r0, r6
  407cbe:	461c      	mov	r4, r3
  407cc0:	46d1      	mov	r9, sl
  407cc2:	f7ff fe3d 	bl	407940 <memmove>
  407cc6:	e70b      	b.n	407ae0 <_realloc_r+0xc0>
  407cc8:	68ab      	ldr	r3, [r5, #8]
  407cca:	6083      	str	r3, [r0, #8]
  407ccc:	68eb      	ldr	r3, [r5, #12]
  407cce:	60c3      	str	r3, [r0, #12]
  407cd0:	2a24      	cmp	r2, #36	; 0x24
  407cd2:	d017      	beq.n	407d04 <_realloc_r+0x2e4>
  407cd4:	f100 0310 	add.w	r3, r0, #16
  407cd8:	f105 0210 	add.w	r2, r5, #16
  407cdc:	e6e7      	b.n	407aae <_realloc_r+0x8e>
  407cde:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407ce2:	f023 0303 	bic.w	r3, r3, #3
  407ce6:	441c      	add	r4, r3
  407ce8:	462e      	mov	r6, r5
  407cea:	e6f9      	b.n	407ae0 <_realloc_r+0xc0>
  407cec:	68a9      	ldr	r1, [r5, #8]
  407cee:	f8ca 1010 	str.w	r1, [sl, #16]
  407cf2:	68e9      	ldr	r1, [r5, #12]
  407cf4:	f8ca 1014 	str.w	r1, [sl, #20]
  407cf8:	2a24      	cmp	r2, #36	; 0x24
  407cfa:	d00c      	beq.n	407d16 <_realloc_r+0x2f6>
  407cfc:	3510      	adds	r5, #16
  407cfe:	f10a 0218 	add.w	r2, sl, #24
  407d02:	e7b9      	b.n	407c78 <_realloc_r+0x258>
  407d04:	692b      	ldr	r3, [r5, #16]
  407d06:	6103      	str	r3, [r0, #16]
  407d08:	696b      	ldr	r3, [r5, #20]
  407d0a:	6143      	str	r3, [r0, #20]
  407d0c:	f105 0218 	add.w	r2, r5, #24
  407d10:	f100 0318 	add.w	r3, r0, #24
  407d14:	e6cb      	b.n	407aae <_realloc_r+0x8e>
  407d16:	692a      	ldr	r2, [r5, #16]
  407d18:	f8ca 2018 	str.w	r2, [sl, #24]
  407d1c:	696a      	ldr	r2, [r5, #20]
  407d1e:	f8ca 201c 	str.w	r2, [sl, #28]
  407d22:	3518      	adds	r5, #24
  407d24:	f10a 0220 	add.w	r2, sl, #32
  407d28:	e7a6      	b.n	407c78 <_realloc_r+0x258>
  407d2a:	4632      	mov	r2, r6
  407d2c:	e77f      	b.n	407c2e <_realloc_r+0x20e>
  407d2e:	4629      	mov	r1, r5
  407d30:	4630      	mov	r0, r6
  407d32:	9301      	str	r3, [sp, #4]
  407d34:	f7ff fe04 	bl	407940 <memmove>
  407d38:	9b01      	ldr	r3, [sp, #4]
  407d3a:	e77e      	b.n	407c3a <_realloc_r+0x21a>
  407d3c:	68a9      	ldr	r1, [r5, #8]
  407d3e:	f8ca 1010 	str.w	r1, [sl, #16]
  407d42:	68e9      	ldr	r1, [r5, #12]
  407d44:	f8ca 1014 	str.w	r1, [sl, #20]
  407d48:	2a24      	cmp	r2, #36	; 0x24
  407d4a:	d003      	beq.n	407d54 <_realloc_r+0x334>
  407d4c:	3510      	adds	r5, #16
  407d4e:	f10a 0218 	add.w	r2, sl, #24
  407d52:	e76c      	b.n	407c2e <_realloc_r+0x20e>
  407d54:	692a      	ldr	r2, [r5, #16]
  407d56:	f8ca 2018 	str.w	r2, [sl, #24]
  407d5a:	696a      	ldr	r2, [r5, #20]
  407d5c:	f8ca 201c 	str.w	r2, [sl, #28]
  407d60:	3518      	adds	r5, #24
  407d62:	f10a 0220 	add.w	r2, sl, #32
  407d66:	e762      	b.n	407c2e <_realloc_r+0x20e>
  407d68:	200005c0 	.word	0x200005c0

00407d6c <_sbrk_r>:
  407d6c:	b538      	push	{r3, r4, r5, lr}
  407d6e:	4c07      	ldr	r4, [pc, #28]	; (407d8c <_sbrk_r+0x20>)
  407d70:	2300      	movs	r3, #0
  407d72:	4605      	mov	r5, r0
  407d74:	4608      	mov	r0, r1
  407d76:	6023      	str	r3, [r4, #0]
  407d78:	f7f8 fdf2 	bl	400960 <_sbrk>
  407d7c:	1c43      	adds	r3, r0, #1
  407d7e:	d000      	beq.n	407d82 <_sbrk_r+0x16>
  407d80:	bd38      	pop	{r3, r4, r5, pc}
  407d82:	6823      	ldr	r3, [r4, #0]
  407d84:	2b00      	cmp	r3, #0
  407d86:	d0fb      	beq.n	407d80 <_sbrk_r+0x14>
  407d88:	602b      	str	r3, [r5, #0]
  407d8a:	bd38      	pop	{r3, r4, r5, pc}
  407d8c:	2000c978 	.word	0x2000c978

00407d90 <__sread>:
  407d90:	b510      	push	{r4, lr}
  407d92:	460c      	mov	r4, r1
  407d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d98:	f000 f9f6 	bl	408188 <_read_r>
  407d9c:	2800      	cmp	r0, #0
  407d9e:	db03      	blt.n	407da8 <__sread+0x18>
  407da0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407da2:	4403      	add	r3, r0
  407da4:	6523      	str	r3, [r4, #80]	; 0x50
  407da6:	bd10      	pop	{r4, pc}
  407da8:	89a3      	ldrh	r3, [r4, #12]
  407daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407dae:	81a3      	strh	r3, [r4, #12]
  407db0:	bd10      	pop	{r4, pc}
  407db2:	bf00      	nop

00407db4 <__swrite>:
  407db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407db8:	4616      	mov	r6, r2
  407dba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407dbe:	461f      	mov	r7, r3
  407dc0:	05d3      	lsls	r3, r2, #23
  407dc2:	460c      	mov	r4, r1
  407dc4:	4605      	mov	r5, r0
  407dc6:	d507      	bpl.n	407dd8 <__swrite+0x24>
  407dc8:	2200      	movs	r2, #0
  407dca:	2302      	movs	r3, #2
  407dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407dd0:	f000 f9c4 	bl	40815c <_lseek_r>
  407dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407ddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407de0:	81a2      	strh	r2, [r4, #12]
  407de2:	463b      	mov	r3, r7
  407de4:	4632      	mov	r2, r6
  407de6:	4628      	mov	r0, r5
  407de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407dec:	f000 b8a4 	b.w	407f38 <_write_r>

00407df0 <__sseek>:
  407df0:	b510      	push	{r4, lr}
  407df2:	460c      	mov	r4, r1
  407df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407df8:	f000 f9b0 	bl	40815c <_lseek_r>
  407dfc:	89a3      	ldrh	r3, [r4, #12]
  407dfe:	1c42      	adds	r2, r0, #1
  407e00:	bf0e      	itee	eq
  407e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407e0a:	6520      	strne	r0, [r4, #80]	; 0x50
  407e0c:	81a3      	strh	r3, [r4, #12]
  407e0e:	bd10      	pop	{r4, pc}

00407e10 <__sclose>:
  407e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407e14:	f000 b908 	b.w	408028 <_close_r>

00407e18 <__swbuf_r>:
  407e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407e1a:	460d      	mov	r5, r1
  407e1c:	4614      	mov	r4, r2
  407e1e:	4606      	mov	r6, r0
  407e20:	b110      	cbz	r0, 407e28 <__swbuf_r+0x10>
  407e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407e24:	2b00      	cmp	r3, #0
  407e26:	d04b      	beq.n	407ec0 <__swbuf_r+0xa8>
  407e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407e2c:	69a3      	ldr	r3, [r4, #24]
  407e2e:	60a3      	str	r3, [r4, #8]
  407e30:	b291      	uxth	r1, r2
  407e32:	0708      	lsls	r0, r1, #28
  407e34:	d539      	bpl.n	407eaa <__swbuf_r+0x92>
  407e36:	6923      	ldr	r3, [r4, #16]
  407e38:	2b00      	cmp	r3, #0
  407e3a:	d036      	beq.n	407eaa <__swbuf_r+0x92>
  407e3c:	b2ed      	uxtb	r5, r5
  407e3e:	0489      	lsls	r1, r1, #18
  407e40:	462f      	mov	r7, r5
  407e42:	d515      	bpl.n	407e70 <__swbuf_r+0x58>
  407e44:	6822      	ldr	r2, [r4, #0]
  407e46:	6961      	ldr	r1, [r4, #20]
  407e48:	1ad3      	subs	r3, r2, r3
  407e4a:	428b      	cmp	r3, r1
  407e4c:	da1c      	bge.n	407e88 <__swbuf_r+0x70>
  407e4e:	3301      	adds	r3, #1
  407e50:	68a1      	ldr	r1, [r4, #8]
  407e52:	1c50      	adds	r0, r2, #1
  407e54:	3901      	subs	r1, #1
  407e56:	60a1      	str	r1, [r4, #8]
  407e58:	6020      	str	r0, [r4, #0]
  407e5a:	7015      	strb	r5, [r2, #0]
  407e5c:	6962      	ldr	r2, [r4, #20]
  407e5e:	429a      	cmp	r2, r3
  407e60:	d01a      	beq.n	407e98 <__swbuf_r+0x80>
  407e62:	89a3      	ldrh	r3, [r4, #12]
  407e64:	07db      	lsls	r3, r3, #31
  407e66:	d501      	bpl.n	407e6c <__swbuf_r+0x54>
  407e68:	2d0a      	cmp	r5, #10
  407e6a:	d015      	beq.n	407e98 <__swbuf_r+0x80>
  407e6c:	4638      	mov	r0, r7
  407e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e70:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407e76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407e7a:	81a2      	strh	r2, [r4, #12]
  407e7c:	6822      	ldr	r2, [r4, #0]
  407e7e:	6661      	str	r1, [r4, #100]	; 0x64
  407e80:	6961      	ldr	r1, [r4, #20]
  407e82:	1ad3      	subs	r3, r2, r3
  407e84:	428b      	cmp	r3, r1
  407e86:	dbe2      	blt.n	407e4e <__swbuf_r+0x36>
  407e88:	4621      	mov	r1, r4
  407e8a:	4630      	mov	r0, r6
  407e8c:	f7fe fda4 	bl	4069d8 <_fflush_r>
  407e90:	b940      	cbnz	r0, 407ea4 <__swbuf_r+0x8c>
  407e92:	6822      	ldr	r2, [r4, #0]
  407e94:	2301      	movs	r3, #1
  407e96:	e7db      	b.n	407e50 <__swbuf_r+0x38>
  407e98:	4621      	mov	r1, r4
  407e9a:	4630      	mov	r0, r6
  407e9c:	f7fe fd9c 	bl	4069d8 <_fflush_r>
  407ea0:	2800      	cmp	r0, #0
  407ea2:	d0e3      	beq.n	407e6c <__swbuf_r+0x54>
  407ea4:	f04f 37ff 	mov.w	r7, #4294967295
  407ea8:	e7e0      	b.n	407e6c <__swbuf_r+0x54>
  407eaa:	4621      	mov	r1, r4
  407eac:	4630      	mov	r0, r6
  407eae:	f7fe fc7f 	bl	4067b0 <__swsetup_r>
  407eb2:	2800      	cmp	r0, #0
  407eb4:	d1f6      	bne.n	407ea4 <__swbuf_r+0x8c>
  407eb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407eba:	6923      	ldr	r3, [r4, #16]
  407ebc:	b291      	uxth	r1, r2
  407ebe:	e7bd      	b.n	407e3c <__swbuf_r+0x24>
  407ec0:	f7fe fde2 	bl	406a88 <__sinit>
  407ec4:	e7b0      	b.n	407e28 <__swbuf_r+0x10>
  407ec6:	bf00      	nop

00407ec8 <_wcrtomb_r>:
  407ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  407eca:	4606      	mov	r6, r0
  407ecc:	b085      	sub	sp, #20
  407ece:	461f      	mov	r7, r3
  407ed0:	b189      	cbz	r1, 407ef6 <_wcrtomb_r+0x2e>
  407ed2:	4c10      	ldr	r4, [pc, #64]	; (407f14 <_wcrtomb_r+0x4c>)
  407ed4:	4d10      	ldr	r5, [pc, #64]	; (407f18 <_wcrtomb_r+0x50>)
  407ed6:	6824      	ldr	r4, [r4, #0]
  407ed8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407eda:	2c00      	cmp	r4, #0
  407edc:	bf08      	it	eq
  407ede:	462c      	moveq	r4, r5
  407ee0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407ee4:	47a0      	blx	r4
  407ee6:	1c43      	adds	r3, r0, #1
  407ee8:	d103      	bne.n	407ef2 <_wcrtomb_r+0x2a>
  407eea:	2200      	movs	r2, #0
  407eec:	238a      	movs	r3, #138	; 0x8a
  407eee:	603a      	str	r2, [r7, #0]
  407ef0:	6033      	str	r3, [r6, #0]
  407ef2:	b005      	add	sp, #20
  407ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407ef6:	460c      	mov	r4, r1
  407ef8:	4906      	ldr	r1, [pc, #24]	; (407f14 <_wcrtomb_r+0x4c>)
  407efa:	4a07      	ldr	r2, [pc, #28]	; (407f18 <_wcrtomb_r+0x50>)
  407efc:	6809      	ldr	r1, [r1, #0]
  407efe:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407f00:	2900      	cmp	r1, #0
  407f02:	bf08      	it	eq
  407f04:	4611      	moveq	r1, r2
  407f06:	4622      	mov	r2, r4
  407f08:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407f0c:	a901      	add	r1, sp, #4
  407f0e:	47a0      	blx	r4
  407f10:	e7e9      	b.n	407ee6 <_wcrtomb_r+0x1e>
  407f12:	bf00      	nop
  407f14:	20000020 	.word	0x20000020
  407f18:	20000454 	.word	0x20000454

00407f1c <__ascii_wctomb>:
  407f1c:	b121      	cbz	r1, 407f28 <__ascii_wctomb+0xc>
  407f1e:	2aff      	cmp	r2, #255	; 0xff
  407f20:	d804      	bhi.n	407f2c <__ascii_wctomb+0x10>
  407f22:	700a      	strb	r2, [r1, #0]
  407f24:	2001      	movs	r0, #1
  407f26:	4770      	bx	lr
  407f28:	4608      	mov	r0, r1
  407f2a:	4770      	bx	lr
  407f2c:	238a      	movs	r3, #138	; 0x8a
  407f2e:	6003      	str	r3, [r0, #0]
  407f30:	f04f 30ff 	mov.w	r0, #4294967295
  407f34:	4770      	bx	lr
  407f36:	bf00      	nop

00407f38 <_write_r>:
  407f38:	b570      	push	{r4, r5, r6, lr}
  407f3a:	460d      	mov	r5, r1
  407f3c:	4c08      	ldr	r4, [pc, #32]	; (407f60 <_write_r+0x28>)
  407f3e:	4611      	mov	r1, r2
  407f40:	4606      	mov	r6, r0
  407f42:	461a      	mov	r2, r3
  407f44:	4628      	mov	r0, r5
  407f46:	2300      	movs	r3, #0
  407f48:	6023      	str	r3, [r4, #0]
  407f4a:	f7fa fca9 	bl	4028a0 <_write>
  407f4e:	1c43      	adds	r3, r0, #1
  407f50:	d000      	beq.n	407f54 <_write_r+0x1c>
  407f52:	bd70      	pop	{r4, r5, r6, pc}
  407f54:	6823      	ldr	r3, [r4, #0]
  407f56:	2b00      	cmp	r3, #0
  407f58:	d0fb      	beq.n	407f52 <_write_r+0x1a>
  407f5a:	6033      	str	r3, [r6, #0]
  407f5c:	bd70      	pop	{r4, r5, r6, pc}
  407f5e:	bf00      	nop
  407f60:	2000c978 	.word	0x2000c978

00407f64 <__register_exitproc>:
  407f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407f68:	4d2c      	ldr	r5, [pc, #176]	; (40801c <__register_exitproc+0xb8>)
  407f6a:	4606      	mov	r6, r0
  407f6c:	6828      	ldr	r0, [r5, #0]
  407f6e:	4698      	mov	r8, r3
  407f70:	460f      	mov	r7, r1
  407f72:	4691      	mov	r9, r2
  407f74:	f7ff f948 	bl	407208 <__retarget_lock_acquire_recursive>
  407f78:	4b29      	ldr	r3, [pc, #164]	; (408020 <__register_exitproc+0xbc>)
  407f7a:	681c      	ldr	r4, [r3, #0]
  407f7c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407f80:	2b00      	cmp	r3, #0
  407f82:	d03e      	beq.n	408002 <__register_exitproc+0x9e>
  407f84:	685a      	ldr	r2, [r3, #4]
  407f86:	2a1f      	cmp	r2, #31
  407f88:	dc1c      	bgt.n	407fc4 <__register_exitproc+0x60>
  407f8a:	f102 0e01 	add.w	lr, r2, #1
  407f8e:	b176      	cbz	r6, 407fae <__register_exitproc+0x4a>
  407f90:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407f94:	2401      	movs	r4, #1
  407f96:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407f9a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407f9e:	4094      	lsls	r4, r2
  407fa0:	4320      	orrs	r0, r4
  407fa2:	2e02      	cmp	r6, #2
  407fa4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407fa8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407fac:	d023      	beq.n	407ff6 <__register_exitproc+0x92>
  407fae:	3202      	adds	r2, #2
  407fb0:	f8c3 e004 	str.w	lr, [r3, #4]
  407fb4:	6828      	ldr	r0, [r5, #0]
  407fb6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407fba:	f7ff f927 	bl	40720c <__retarget_lock_release_recursive>
  407fbe:	2000      	movs	r0, #0
  407fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407fc4:	4b17      	ldr	r3, [pc, #92]	; (408024 <__register_exitproc+0xc0>)
  407fc6:	b30b      	cbz	r3, 40800c <__register_exitproc+0xa8>
  407fc8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407fcc:	f7ff f998 	bl	407300 <malloc>
  407fd0:	4603      	mov	r3, r0
  407fd2:	b1d8      	cbz	r0, 40800c <__register_exitproc+0xa8>
  407fd4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407fd8:	6002      	str	r2, [r0, #0]
  407fda:	2100      	movs	r1, #0
  407fdc:	6041      	str	r1, [r0, #4]
  407fde:	460a      	mov	r2, r1
  407fe0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407fe4:	f04f 0e01 	mov.w	lr, #1
  407fe8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407fec:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407ff0:	2e00      	cmp	r6, #0
  407ff2:	d0dc      	beq.n	407fae <__register_exitproc+0x4a>
  407ff4:	e7cc      	b.n	407f90 <__register_exitproc+0x2c>
  407ff6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407ffa:	430c      	orrs	r4, r1
  407ffc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408000:	e7d5      	b.n	407fae <__register_exitproc+0x4a>
  408002:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408006:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40800a:	e7bb      	b.n	407f84 <__register_exitproc+0x20>
  40800c:	6828      	ldr	r0, [r5, #0]
  40800e:	f7ff f8fd 	bl	40720c <__retarget_lock_release_recursive>
  408012:	f04f 30ff 	mov.w	r0, #4294967295
  408016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40801a:	bf00      	nop
  40801c:	20000450 	.word	0x20000450
  408020:	0040882c 	.word	0x0040882c
  408024:	00407301 	.word	0x00407301

00408028 <_close_r>:
  408028:	b538      	push	{r3, r4, r5, lr}
  40802a:	4c07      	ldr	r4, [pc, #28]	; (408048 <_close_r+0x20>)
  40802c:	2300      	movs	r3, #0
  40802e:	4605      	mov	r5, r0
  408030:	4608      	mov	r0, r1
  408032:	6023      	str	r3, [r4, #0]
  408034:	f7f8 fcb0 	bl	400998 <_close>
  408038:	1c43      	adds	r3, r0, #1
  40803a:	d000      	beq.n	40803e <_close_r+0x16>
  40803c:	bd38      	pop	{r3, r4, r5, pc}
  40803e:	6823      	ldr	r3, [r4, #0]
  408040:	2b00      	cmp	r3, #0
  408042:	d0fb      	beq.n	40803c <_close_r+0x14>
  408044:	602b      	str	r3, [r5, #0]
  408046:	bd38      	pop	{r3, r4, r5, pc}
  408048:	2000c978 	.word	0x2000c978

0040804c <_fclose_r>:
  40804c:	b570      	push	{r4, r5, r6, lr}
  40804e:	b159      	cbz	r1, 408068 <_fclose_r+0x1c>
  408050:	4605      	mov	r5, r0
  408052:	460c      	mov	r4, r1
  408054:	b110      	cbz	r0, 40805c <_fclose_r+0x10>
  408056:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408058:	2b00      	cmp	r3, #0
  40805a:	d03c      	beq.n	4080d6 <_fclose_r+0x8a>
  40805c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40805e:	07d8      	lsls	r0, r3, #31
  408060:	d505      	bpl.n	40806e <_fclose_r+0x22>
  408062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408066:	b92b      	cbnz	r3, 408074 <_fclose_r+0x28>
  408068:	2600      	movs	r6, #0
  40806a:	4630      	mov	r0, r6
  40806c:	bd70      	pop	{r4, r5, r6, pc}
  40806e:	89a3      	ldrh	r3, [r4, #12]
  408070:	0599      	lsls	r1, r3, #22
  408072:	d53c      	bpl.n	4080ee <_fclose_r+0xa2>
  408074:	4621      	mov	r1, r4
  408076:	4628      	mov	r0, r5
  408078:	f7fe fc0e 	bl	406898 <__sflush_r>
  40807c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40807e:	4606      	mov	r6, r0
  408080:	b133      	cbz	r3, 408090 <_fclose_r+0x44>
  408082:	69e1      	ldr	r1, [r4, #28]
  408084:	4628      	mov	r0, r5
  408086:	4798      	blx	r3
  408088:	2800      	cmp	r0, #0
  40808a:	bfb8      	it	lt
  40808c:	f04f 36ff 	movlt.w	r6, #4294967295
  408090:	89a3      	ldrh	r3, [r4, #12]
  408092:	061a      	lsls	r2, r3, #24
  408094:	d422      	bmi.n	4080dc <_fclose_r+0x90>
  408096:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408098:	b141      	cbz	r1, 4080ac <_fclose_r+0x60>
  40809a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40809e:	4299      	cmp	r1, r3
  4080a0:	d002      	beq.n	4080a8 <_fclose_r+0x5c>
  4080a2:	4628      	mov	r0, r5
  4080a4:	f7fe fe16 	bl	406cd4 <_free_r>
  4080a8:	2300      	movs	r3, #0
  4080aa:	6323      	str	r3, [r4, #48]	; 0x30
  4080ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4080ae:	b121      	cbz	r1, 4080ba <_fclose_r+0x6e>
  4080b0:	4628      	mov	r0, r5
  4080b2:	f7fe fe0f 	bl	406cd4 <_free_r>
  4080b6:	2300      	movs	r3, #0
  4080b8:	6463      	str	r3, [r4, #68]	; 0x44
  4080ba:	f7fe fd11 	bl	406ae0 <__sfp_lock_acquire>
  4080be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4080c0:	2200      	movs	r2, #0
  4080c2:	07db      	lsls	r3, r3, #31
  4080c4:	81a2      	strh	r2, [r4, #12]
  4080c6:	d50e      	bpl.n	4080e6 <_fclose_r+0x9a>
  4080c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4080ca:	f7ff f89b 	bl	407204 <__retarget_lock_close_recursive>
  4080ce:	f7fe fd0d 	bl	406aec <__sfp_lock_release>
  4080d2:	4630      	mov	r0, r6
  4080d4:	bd70      	pop	{r4, r5, r6, pc}
  4080d6:	f7fe fcd7 	bl	406a88 <__sinit>
  4080da:	e7bf      	b.n	40805c <_fclose_r+0x10>
  4080dc:	6921      	ldr	r1, [r4, #16]
  4080de:	4628      	mov	r0, r5
  4080e0:	f7fe fdf8 	bl	406cd4 <_free_r>
  4080e4:	e7d7      	b.n	408096 <_fclose_r+0x4a>
  4080e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4080e8:	f7ff f890 	bl	40720c <__retarget_lock_release_recursive>
  4080ec:	e7ec      	b.n	4080c8 <_fclose_r+0x7c>
  4080ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4080f0:	f7ff f88a 	bl	407208 <__retarget_lock_acquire_recursive>
  4080f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4080f8:	2b00      	cmp	r3, #0
  4080fa:	d1bb      	bne.n	408074 <_fclose_r+0x28>
  4080fc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4080fe:	f016 0601 	ands.w	r6, r6, #1
  408102:	d1b1      	bne.n	408068 <_fclose_r+0x1c>
  408104:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408106:	f7ff f881 	bl	40720c <__retarget_lock_release_recursive>
  40810a:	4630      	mov	r0, r6
  40810c:	bd70      	pop	{r4, r5, r6, pc}
  40810e:	bf00      	nop

00408110 <_fstat_r>:
  408110:	b538      	push	{r3, r4, r5, lr}
  408112:	460b      	mov	r3, r1
  408114:	4c07      	ldr	r4, [pc, #28]	; (408134 <_fstat_r+0x24>)
  408116:	4605      	mov	r5, r0
  408118:	4611      	mov	r1, r2
  40811a:	4618      	mov	r0, r3
  40811c:	2300      	movs	r3, #0
  40811e:	6023      	str	r3, [r4, #0]
  408120:	f7f8 fc3d 	bl	40099e <_fstat>
  408124:	1c43      	adds	r3, r0, #1
  408126:	d000      	beq.n	40812a <_fstat_r+0x1a>
  408128:	bd38      	pop	{r3, r4, r5, pc}
  40812a:	6823      	ldr	r3, [r4, #0]
  40812c:	2b00      	cmp	r3, #0
  40812e:	d0fb      	beq.n	408128 <_fstat_r+0x18>
  408130:	602b      	str	r3, [r5, #0]
  408132:	bd38      	pop	{r3, r4, r5, pc}
  408134:	2000c978 	.word	0x2000c978

00408138 <_isatty_r>:
  408138:	b538      	push	{r3, r4, r5, lr}
  40813a:	4c07      	ldr	r4, [pc, #28]	; (408158 <_isatty_r+0x20>)
  40813c:	2300      	movs	r3, #0
  40813e:	4605      	mov	r5, r0
  408140:	4608      	mov	r0, r1
  408142:	6023      	str	r3, [r4, #0]
  408144:	f7f8 fc30 	bl	4009a8 <_isatty>
  408148:	1c43      	adds	r3, r0, #1
  40814a:	d000      	beq.n	40814e <_isatty_r+0x16>
  40814c:	bd38      	pop	{r3, r4, r5, pc}
  40814e:	6823      	ldr	r3, [r4, #0]
  408150:	2b00      	cmp	r3, #0
  408152:	d0fb      	beq.n	40814c <_isatty_r+0x14>
  408154:	602b      	str	r3, [r5, #0]
  408156:	bd38      	pop	{r3, r4, r5, pc}
  408158:	2000c978 	.word	0x2000c978

0040815c <_lseek_r>:
  40815c:	b570      	push	{r4, r5, r6, lr}
  40815e:	460d      	mov	r5, r1
  408160:	4c08      	ldr	r4, [pc, #32]	; (408184 <_lseek_r+0x28>)
  408162:	4611      	mov	r1, r2
  408164:	4606      	mov	r6, r0
  408166:	461a      	mov	r2, r3
  408168:	4628      	mov	r0, r5
  40816a:	2300      	movs	r3, #0
  40816c:	6023      	str	r3, [r4, #0]
  40816e:	f7f8 fc1d 	bl	4009ac <_lseek>
  408172:	1c43      	adds	r3, r0, #1
  408174:	d000      	beq.n	408178 <_lseek_r+0x1c>
  408176:	bd70      	pop	{r4, r5, r6, pc}
  408178:	6823      	ldr	r3, [r4, #0]
  40817a:	2b00      	cmp	r3, #0
  40817c:	d0fb      	beq.n	408176 <_lseek_r+0x1a>
  40817e:	6033      	str	r3, [r6, #0]
  408180:	bd70      	pop	{r4, r5, r6, pc}
  408182:	bf00      	nop
  408184:	2000c978 	.word	0x2000c978

00408188 <_read_r>:
  408188:	b570      	push	{r4, r5, r6, lr}
  40818a:	460d      	mov	r5, r1
  40818c:	4c08      	ldr	r4, [pc, #32]	; (4081b0 <_read_r+0x28>)
  40818e:	4611      	mov	r1, r2
  408190:	4606      	mov	r6, r0
  408192:	461a      	mov	r2, r3
  408194:	4628      	mov	r0, r5
  408196:	2300      	movs	r3, #0
  408198:	6023      	str	r3, [r4, #0]
  40819a:	f7fa fb63 	bl	402864 <_read>
  40819e:	1c43      	adds	r3, r0, #1
  4081a0:	d000      	beq.n	4081a4 <_read_r+0x1c>
  4081a2:	bd70      	pop	{r4, r5, r6, pc}
  4081a4:	6823      	ldr	r3, [r4, #0]
  4081a6:	2b00      	cmp	r3, #0
  4081a8:	d0fb      	beq.n	4081a2 <_read_r+0x1a>
  4081aa:	6033      	str	r3, [r6, #0]
  4081ac:	bd70      	pop	{r4, r5, r6, pc}
  4081ae:	bf00      	nop
  4081b0:	2000c978 	.word	0x2000c978

004081b4 <__aeabi_uldivmod>:
  4081b4:	b953      	cbnz	r3, 4081cc <__aeabi_uldivmod+0x18>
  4081b6:	b94a      	cbnz	r2, 4081cc <__aeabi_uldivmod+0x18>
  4081b8:	2900      	cmp	r1, #0
  4081ba:	bf08      	it	eq
  4081bc:	2800      	cmpeq	r0, #0
  4081be:	bf1c      	itt	ne
  4081c0:	f04f 31ff 	movne.w	r1, #4294967295
  4081c4:	f04f 30ff 	movne.w	r0, #4294967295
  4081c8:	f000 b97a 	b.w	4084c0 <__aeabi_idiv0>
  4081cc:	f1ad 0c08 	sub.w	ip, sp, #8
  4081d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4081d4:	f000 f806 	bl	4081e4 <__udivmoddi4>
  4081d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4081dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4081e0:	b004      	add	sp, #16
  4081e2:	4770      	bx	lr

004081e4 <__udivmoddi4>:
  4081e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4081e8:	468c      	mov	ip, r1
  4081ea:	460d      	mov	r5, r1
  4081ec:	4604      	mov	r4, r0
  4081ee:	9e08      	ldr	r6, [sp, #32]
  4081f0:	2b00      	cmp	r3, #0
  4081f2:	d151      	bne.n	408298 <__udivmoddi4+0xb4>
  4081f4:	428a      	cmp	r2, r1
  4081f6:	4617      	mov	r7, r2
  4081f8:	d96d      	bls.n	4082d6 <__udivmoddi4+0xf2>
  4081fa:	fab2 fe82 	clz	lr, r2
  4081fe:	f1be 0f00 	cmp.w	lr, #0
  408202:	d00b      	beq.n	40821c <__udivmoddi4+0x38>
  408204:	f1ce 0c20 	rsb	ip, lr, #32
  408208:	fa01 f50e 	lsl.w	r5, r1, lr
  40820c:	fa20 fc0c 	lsr.w	ip, r0, ip
  408210:	fa02 f70e 	lsl.w	r7, r2, lr
  408214:	ea4c 0c05 	orr.w	ip, ip, r5
  408218:	fa00 f40e 	lsl.w	r4, r0, lr
  40821c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408220:	0c25      	lsrs	r5, r4, #16
  408222:	fbbc f8fa 	udiv	r8, ip, sl
  408226:	fa1f f987 	uxth.w	r9, r7
  40822a:	fb0a cc18 	mls	ip, sl, r8, ip
  40822e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408232:	fb08 f309 	mul.w	r3, r8, r9
  408236:	42ab      	cmp	r3, r5
  408238:	d90a      	bls.n	408250 <__udivmoddi4+0x6c>
  40823a:	19ed      	adds	r5, r5, r7
  40823c:	f108 32ff 	add.w	r2, r8, #4294967295
  408240:	f080 8123 	bcs.w	40848a <__udivmoddi4+0x2a6>
  408244:	42ab      	cmp	r3, r5
  408246:	f240 8120 	bls.w	40848a <__udivmoddi4+0x2a6>
  40824a:	f1a8 0802 	sub.w	r8, r8, #2
  40824e:	443d      	add	r5, r7
  408250:	1aed      	subs	r5, r5, r3
  408252:	b2a4      	uxth	r4, r4
  408254:	fbb5 f0fa 	udiv	r0, r5, sl
  408258:	fb0a 5510 	mls	r5, sl, r0, r5
  40825c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408260:	fb00 f909 	mul.w	r9, r0, r9
  408264:	45a1      	cmp	r9, r4
  408266:	d909      	bls.n	40827c <__udivmoddi4+0x98>
  408268:	19e4      	adds	r4, r4, r7
  40826a:	f100 33ff 	add.w	r3, r0, #4294967295
  40826e:	f080 810a 	bcs.w	408486 <__udivmoddi4+0x2a2>
  408272:	45a1      	cmp	r9, r4
  408274:	f240 8107 	bls.w	408486 <__udivmoddi4+0x2a2>
  408278:	3802      	subs	r0, #2
  40827a:	443c      	add	r4, r7
  40827c:	eba4 0409 	sub.w	r4, r4, r9
  408280:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408284:	2100      	movs	r1, #0
  408286:	2e00      	cmp	r6, #0
  408288:	d061      	beq.n	40834e <__udivmoddi4+0x16a>
  40828a:	fa24 f40e 	lsr.w	r4, r4, lr
  40828e:	2300      	movs	r3, #0
  408290:	6034      	str	r4, [r6, #0]
  408292:	6073      	str	r3, [r6, #4]
  408294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408298:	428b      	cmp	r3, r1
  40829a:	d907      	bls.n	4082ac <__udivmoddi4+0xc8>
  40829c:	2e00      	cmp	r6, #0
  40829e:	d054      	beq.n	40834a <__udivmoddi4+0x166>
  4082a0:	2100      	movs	r1, #0
  4082a2:	e886 0021 	stmia.w	r6, {r0, r5}
  4082a6:	4608      	mov	r0, r1
  4082a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082ac:	fab3 f183 	clz	r1, r3
  4082b0:	2900      	cmp	r1, #0
  4082b2:	f040 808e 	bne.w	4083d2 <__udivmoddi4+0x1ee>
  4082b6:	42ab      	cmp	r3, r5
  4082b8:	d302      	bcc.n	4082c0 <__udivmoddi4+0xdc>
  4082ba:	4282      	cmp	r2, r0
  4082bc:	f200 80fa 	bhi.w	4084b4 <__udivmoddi4+0x2d0>
  4082c0:	1a84      	subs	r4, r0, r2
  4082c2:	eb65 0503 	sbc.w	r5, r5, r3
  4082c6:	2001      	movs	r0, #1
  4082c8:	46ac      	mov	ip, r5
  4082ca:	2e00      	cmp	r6, #0
  4082cc:	d03f      	beq.n	40834e <__udivmoddi4+0x16a>
  4082ce:	e886 1010 	stmia.w	r6, {r4, ip}
  4082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082d6:	b912      	cbnz	r2, 4082de <__udivmoddi4+0xfa>
  4082d8:	2701      	movs	r7, #1
  4082da:	fbb7 f7f2 	udiv	r7, r7, r2
  4082de:	fab7 fe87 	clz	lr, r7
  4082e2:	f1be 0f00 	cmp.w	lr, #0
  4082e6:	d134      	bne.n	408352 <__udivmoddi4+0x16e>
  4082e8:	1beb      	subs	r3, r5, r7
  4082ea:	0c3a      	lsrs	r2, r7, #16
  4082ec:	fa1f fc87 	uxth.w	ip, r7
  4082f0:	2101      	movs	r1, #1
  4082f2:	fbb3 f8f2 	udiv	r8, r3, r2
  4082f6:	0c25      	lsrs	r5, r4, #16
  4082f8:	fb02 3318 	mls	r3, r2, r8, r3
  4082fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408300:	fb0c f308 	mul.w	r3, ip, r8
  408304:	42ab      	cmp	r3, r5
  408306:	d907      	bls.n	408318 <__udivmoddi4+0x134>
  408308:	19ed      	adds	r5, r5, r7
  40830a:	f108 30ff 	add.w	r0, r8, #4294967295
  40830e:	d202      	bcs.n	408316 <__udivmoddi4+0x132>
  408310:	42ab      	cmp	r3, r5
  408312:	f200 80d1 	bhi.w	4084b8 <__udivmoddi4+0x2d4>
  408316:	4680      	mov	r8, r0
  408318:	1aed      	subs	r5, r5, r3
  40831a:	b2a3      	uxth	r3, r4
  40831c:	fbb5 f0f2 	udiv	r0, r5, r2
  408320:	fb02 5510 	mls	r5, r2, r0, r5
  408324:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408328:	fb0c fc00 	mul.w	ip, ip, r0
  40832c:	45a4      	cmp	ip, r4
  40832e:	d907      	bls.n	408340 <__udivmoddi4+0x15c>
  408330:	19e4      	adds	r4, r4, r7
  408332:	f100 33ff 	add.w	r3, r0, #4294967295
  408336:	d202      	bcs.n	40833e <__udivmoddi4+0x15a>
  408338:	45a4      	cmp	ip, r4
  40833a:	f200 80b8 	bhi.w	4084ae <__udivmoddi4+0x2ca>
  40833e:	4618      	mov	r0, r3
  408340:	eba4 040c 	sub.w	r4, r4, ip
  408344:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408348:	e79d      	b.n	408286 <__udivmoddi4+0xa2>
  40834a:	4631      	mov	r1, r6
  40834c:	4630      	mov	r0, r6
  40834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408352:	f1ce 0420 	rsb	r4, lr, #32
  408356:	fa05 f30e 	lsl.w	r3, r5, lr
  40835a:	fa07 f70e 	lsl.w	r7, r7, lr
  40835e:	fa20 f804 	lsr.w	r8, r0, r4
  408362:	0c3a      	lsrs	r2, r7, #16
  408364:	fa25 f404 	lsr.w	r4, r5, r4
  408368:	ea48 0803 	orr.w	r8, r8, r3
  40836c:	fbb4 f1f2 	udiv	r1, r4, r2
  408370:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408374:	fb02 4411 	mls	r4, r2, r1, r4
  408378:	fa1f fc87 	uxth.w	ip, r7
  40837c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408380:	fb01 f30c 	mul.w	r3, r1, ip
  408384:	42ab      	cmp	r3, r5
  408386:	fa00 f40e 	lsl.w	r4, r0, lr
  40838a:	d909      	bls.n	4083a0 <__udivmoddi4+0x1bc>
  40838c:	19ed      	adds	r5, r5, r7
  40838e:	f101 30ff 	add.w	r0, r1, #4294967295
  408392:	f080 808a 	bcs.w	4084aa <__udivmoddi4+0x2c6>
  408396:	42ab      	cmp	r3, r5
  408398:	f240 8087 	bls.w	4084aa <__udivmoddi4+0x2c6>
  40839c:	3902      	subs	r1, #2
  40839e:	443d      	add	r5, r7
  4083a0:	1aeb      	subs	r3, r5, r3
  4083a2:	fa1f f588 	uxth.w	r5, r8
  4083a6:	fbb3 f0f2 	udiv	r0, r3, r2
  4083aa:	fb02 3310 	mls	r3, r2, r0, r3
  4083ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4083b2:	fb00 f30c 	mul.w	r3, r0, ip
  4083b6:	42ab      	cmp	r3, r5
  4083b8:	d907      	bls.n	4083ca <__udivmoddi4+0x1e6>
  4083ba:	19ed      	adds	r5, r5, r7
  4083bc:	f100 38ff 	add.w	r8, r0, #4294967295
  4083c0:	d26f      	bcs.n	4084a2 <__udivmoddi4+0x2be>
  4083c2:	42ab      	cmp	r3, r5
  4083c4:	d96d      	bls.n	4084a2 <__udivmoddi4+0x2be>
  4083c6:	3802      	subs	r0, #2
  4083c8:	443d      	add	r5, r7
  4083ca:	1aeb      	subs	r3, r5, r3
  4083cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4083d0:	e78f      	b.n	4082f2 <__udivmoddi4+0x10e>
  4083d2:	f1c1 0720 	rsb	r7, r1, #32
  4083d6:	fa22 f807 	lsr.w	r8, r2, r7
  4083da:	408b      	lsls	r3, r1
  4083dc:	fa05 f401 	lsl.w	r4, r5, r1
  4083e0:	ea48 0303 	orr.w	r3, r8, r3
  4083e4:	fa20 fe07 	lsr.w	lr, r0, r7
  4083e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4083ec:	40fd      	lsrs	r5, r7
  4083ee:	ea4e 0e04 	orr.w	lr, lr, r4
  4083f2:	fbb5 f9fc 	udiv	r9, r5, ip
  4083f6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4083fa:	fb0c 5519 	mls	r5, ip, r9, r5
  4083fe:	fa1f f883 	uxth.w	r8, r3
  408402:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408406:	fb09 f408 	mul.w	r4, r9, r8
  40840a:	42ac      	cmp	r4, r5
  40840c:	fa02 f201 	lsl.w	r2, r2, r1
  408410:	fa00 fa01 	lsl.w	sl, r0, r1
  408414:	d908      	bls.n	408428 <__udivmoddi4+0x244>
  408416:	18ed      	adds	r5, r5, r3
  408418:	f109 30ff 	add.w	r0, r9, #4294967295
  40841c:	d243      	bcs.n	4084a6 <__udivmoddi4+0x2c2>
  40841e:	42ac      	cmp	r4, r5
  408420:	d941      	bls.n	4084a6 <__udivmoddi4+0x2c2>
  408422:	f1a9 0902 	sub.w	r9, r9, #2
  408426:	441d      	add	r5, r3
  408428:	1b2d      	subs	r5, r5, r4
  40842a:	fa1f fe8e 	uxth.w	lr, lr
  40842e:	fbb5 f0fc 	udiv	r0, r5, ip
  408432:	fb0c 5510 	mls	r5, ip, r0, r5
  408436:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40843a:	fb00 f808 	mul.w	r8, r0, r8
  40843e:	45a0      	cmp	r8, r4
  408440:	d907      	bls.n	408452 <__udivmoddi4+0x26e>
  408442:	18e4      	adds	r4, r4, r3
  408444:	f100 35ff 	add.w	r5, r0, #4294967295
  408448:	d229      	bcs.n	40849e <__udivmoddi4+0x2ba>
  40844a:	45a0      	cmp	r8, r4
  40844c:	d927      	bls.n	40849e <__udivmoddi4+0x2ba>
  40844e:	3802      	subs	r0, #2
  408450:	441c      	add	r4, r3
  408452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408456:	eba4 0408 	sub.w	r4, r4, r8
  40845a:	fba0 8902 	umull	r8, r9, r0, r2
  40845e:	454c      	cmp	r4, r9
  408460:	46c6      	mov	lr, r8
  408462:	464d      	mov	r5, r9
  408464:	d315      	bcc.n	408492 <__udivmoddi4+0x2ae>
  408466:	d012      	beq.n	40848e <__udivmoddi4+0x2aa>
  408468:	b156      	cbz	r6, 408480 <__udivmoddi4+0x29c>
  40846a:	ebba 030e 	subs.w	r3, sl, lr
  40846e:	eb64 0405 	sbc.w	r4, r4, r5
  408472:	fa04 f707 	lsl.w	r7, r4, r7
  408476:	40cb      	lsrs	r3, r1
  408478:	431f      	orrs	r7, r3
  40847a:	40cc      	lsrs	r4, r1
  40847c:	6037      	str	r7, [r6, #0]
  40847e:	6074      	str	r4, [r6, #4]
  408480:	2100      	movs	r1, #0
  408482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408486:	4618      	mov	r0, r3
  408488:	e6f8      	b.n	40827c <__udivmoddi4+0x98>
  40848a:	4690      	mov	r8, r2
  40848c:	e6e0      	b.n	408250 <__udivmoddi4+0x6c>
  40848e:	45c2      	cmp	sl, r8
  408490:	d2ea      	bcs.n	408468 <__udivmoddi4+0x284>
  408492:	ebb8 0e02 	subs.w	lr, r8, r2
  408496:	eb69 0503 	sbc.w	r5, r9, r3
  40849a:	3801      	subs	r0, #1
  40849c:	e7e4      	b.n	408468 <__udivmoddi4+0x284>
  40849e:	4628      	mov	r0, r5
  4084a0:	e7d7      	b.n	408452 <__udivmoddi4+0x26e>
  4084a2:	4640      	mov	r0, r8
  4084a4:	e791      	b.n	4083ca <__udivmoddi4+0x1e6>
  4084a6:	4681      	mov	r9, r0
  4084a8:	e7be      	b.n	408428 <__udivmoddi4+0x244>
  4084aa:	4601      	mov	r1, r0
  4084ac:	e778      	b.n	4083a0 <__udivmoddi4+0x1bc>
  4084ae:	3802      	subs	r0, #2
  4084b0:	443c      	add	r4, r7
  4084b2:	e745      	b.n	408340 <__udivmoddi4+0x15c>
  4084b4:	4608      	mov	r0, r1
  4084b6:	e708      	b.n	4082ca <__udivmoddi4+0xe6>
  4084b8:	f1a8 0802 	sub.w	r8, r8, #2
  4084bc:	443d      	add	r5, r7
  4084be:	e72b      	b.n	408318 <__udivmoddi4+0x134>

004084c0 <__aeabi_idiv0>:
  4084c0:	4770      	bx	lr
  4084c2:	bf00      	nop
  4084c4:	45534552 	.word	0x45534552
  4084c8:	00000d54 	.word	0x00000d54

004084cc <HC_AFEC_channel_list>:
  4084cc:	00010000 00030002                       ........

004084d4 <HC_temp_channel_list>:
  4084d4:	000a0009 0006000b                       ........

004084dc <LC_AFEC_channel_list>:
  4084dc:	00050004 00070006                       ........

004084e4 <PDU_DEN_iopins>:
  4084e4:	0000006b 0000006c 0000006d 0000006e     k...l...m...n...
	...

00408504 <PDU_DSEL_iopins>:
  408504:	00000070 00000071 00000072 00000073     p...q...r...s...
	...

00408524 <PDU_digital_iopoins>:
  408524:	00000001 00000002 00000004 00000008     ................
  408534:	00000010 00000020 00000040 00000080     .... ...@.......
  408544:	00000100 00000200 54204348 61657268     ........HC Threa
  408554:	00000064 6c696146 74206465 7263206f     d...Failed to cr
  408564:	65746165 48206120 61742043 25206b73     eate a HC task %
  408574:	000a0d64 5420434c 61657268 00000064     d...LC Thread...
  408584:	6c696146 74206465 7263206f 65746165     Failed to create
  408594:	4c206120 61742043 25206b73 000a0d64      a LC task %d...
  4085a4:	204e4143 65726854 00006461 6c696146     CAN Thread..Fail
  4085b4:	74206465 7263206f 65746165 6e616320     ed to create can
  4085c4:	73617420 000a0d6b 74617453 54207375      task...Status T
  4085d4:	61657268 00000064 72727543 20746e65     hread...Current 
  4085e4:	65726854 00006461 74617453 68542065     Thread..State Th
  4085f4:	64616572 00000000 74737953 54206d65     read....System T
  408604:	61657268 00000064                       hread...

0040860c <pwm_assignment>:
  40860c:	00000000 00000001 00000002 00000003     ................

0040861c <recieve_dispatch_table>:
  40861c:	04680000 00400f35 08600000 00400f55     ..h.5.@...`.U.@.
  40862c:	08640000 00400f6d 04800000 00400f81     ..d.m.@.......@.

0040863c <HC_AFEC_channel_list>:
  40863c:	00010000 00030002                       ........

00408644 <HC_temp_channel_list>:
  408644:	000a0009 0006000b                       ........

0040864c <LC_AFEC_channel_list>:
  40864c:	00050004 00070006                       ........

00408654 <PDU_AFEC_channel_offset>:
  408654:	0000002f 00000028 00000028 00000028     /...(...(...(...
  408664:	00000001 00000001 00000001 00000001     ................
  408674:	00000001 00000001 00000001 00000001     ................

00408684 <PDU_DEN_iopins>:
  408684:	0000006b 0000006c 0000006d 0000006e     k...l...m...n...
	...

004086a4 <PDU_DSEL_iopins>:
  4086a4:	00000070 00000071 00000072 00000073     p...q...r...s...
	...

004086c4 <PDU_iopins>:
  4086c4:	00000074 00000075 00000076 00000077     t...u...v...w...
  4086d4:	00000078 00000079 0000007a 0000007b     x...y...z...{...
  4086e4:	0000007c 0000007d 0000007e 0000007f     |...}...~.......

004086f4 <PDU_status_id>:
  4086f4:	c0804000                                .@..

004086f8 <curr_limits>:
  4086f8:	0000001a 0000000f 0000000f 0000000a     ................
  408708:	0000000c 00000000 00000002 00000006     ................
  408718:	00000006 00000003 00000005 00000000     ................

00408728 <pwm_assignment>:
  408728:	00000000 00000001 00000002 00000003     ................

00408738 <pwm_staturation_limits>:
  408738:	4b321900 00646464                       ..2Kddd.

00408740 <pwm_voltage_levels>:
  408740:	0b0a0908 000e0d0c                       ........

00408748 <state_id>:
  408748:	30201000 00000000                       .. 0....

00408750 <can_bit_time>:
  408750:	02020308 02094b03 43020303 0303030a     .....K.....C....
  408760:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  408770:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  408780:	05050510 06114504 47040505 06060512     .....E.....G....
  408790:	06134304 44040606 06060714 08154604     .C.....D.....F..
  4087a0:	47040606 07070716 08174404 46040708     ...G.....D.....F
  4087b0:	08080718 08194304 44040808 00000001     .....C.....D....
  4087c0:	00000002 00000004 00000008 00000010     ................
  4087d0:	00000020 00000040 00000080 00000100      ...@...........
  4087e0:	00000200 00000400 454c4449 00000000     ........IDLE....
  4087f0:	75626544 6f6d2067 00006564 0000000d     Debug mode......
  408800:	74696e49 696c6169 0064657a 63617473     Initialized.stac
  408810:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  408820:	00000a0d 31676f6c 00006630              ....log10f..

0040882c <_global_impure_ptr>:
  40882c:	20000028 0000000a 33323130 37363534     (.. ....01234567
  40883c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40884c:	37363534 62613938 66656463 00000000     456789abcdef....
  40885c:	6c756e28 0000296c                       (null)..

00408864 <blanks.7217>:
  408864:	20202020 20202020 20202020 20202020                     

00408874 <zeroes.7218>:
  408874:	30303030 30303030 30303030 30303030     0000000000000000
  408884:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408894 <_ctype_>:
  408894:	20202000 20202020 28282020 20282828     .         ((((( 
  4088a4:	20202020 20202020 20202020 20202020                     
  4088b4:	10108820 10101010 10101010 10101010      ...............
  4088c4:	04040410 04040404 10040404 10101010     ................
  4088d4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4088e4:	01010101 01010101 01010101 10101010     ................
  4088f4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408904:	02020202 02020202 02020202 10101010     ................
  408914:	00000020 00000000 00000000 00000000      ...............
	...

00408998 <_init>:
  408998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40899a:	bf00      	nop
  40899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40899e:	bc08      	pop	{r3}
  4089a0:	469e      	mov	lr, r3
  4089a2:	4770      	bx	lr

004089a4 <__init_array_start>:
  4089a4:	00406879 	.word	0x00406879

004089a8 <__frame_dummy_init_array_entry>:
  4089a8:	0040011d                                ..@.

004089ac <_fini>:
  4089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4089ae:	bf00      	nop
  4089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4089b2:	bc08      	pop	{r3}
  4089b4:	469e      	mov	lr, r3
  4089b6:	4770      	bx	lr

004089b8 <__fini_array_start>:
  4089b8:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <max_duty_cycle>:
20000014:	0064 0000                                   d...

20000018 <pwm_request_arr>:
20000018:	4b4b 4b4b                                   KKKK

2000001c <__fdlib_version>:
2000001c:	0001 0000                                   ....

20000020 <_impure_ptr>:
20000020:	0028 2000 0000 0000                         (.. ....

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__atexit_recursive_mutex>:
20000450:	c954 2000                                   T.. 

20000454 <__global_locale>:
20000454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000534:	7f1d 0040 7871 0040 0000 0000 8894 0040     ..@.qx@.......@.
20000544:	8890 0040 87ec 0040 87ec 0040 87ec 0040     ..@...@...@...@.
20000554:	87ec 0040 87ec 0040 87ec 0040 87ec 0040     ..@...@...@...@.
20000564:	87ec 0040 87ec 0040 ffff ffff ffff ffff     ..@...@.........
20000574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005c0 <__malloc_av_>:
	...
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 

200009c8 <__malloc_sbrk_base>:
200009c8:	ffff ffff                                   ....

200009cc <__malloc_trim_threshold>:
200009cc:	0000 0002                                   ....
